require( "ffi/winapi/headers/windows" )
local ffi = require( "ffi" )
ffi.cdef [[
  typedef enum CONFLICT_RESOLUTION_POLICY {
    CRP_NONE = 0,
    CRP_DESTINATION_PROVIDER_WINS = 1,
    CRP_SOURCE_PROVIDER_WINS = 2,
  } CONFLICT_RESOLUTION_POLICY;
  typedef enum FILTERING_TYPE {
    FT_CURRENT_ITEMS_ONLY = 0,
  } FILTERING_TYPE;
  typedef enum KNOWLEDGE_COOKIE_COMPARISON_RESULT {
    KCCR_COOKIE_KNOWLEDGE_EQUAL = 0,
    KCCR_COOKIE_KNOWLEDGE_CONTAINED = 1,
    KCCR_COOKIE_KNOWLEDGE_CONTAINS = 2,
    KCCR_COOKIE_KNOWLEDGE_NOT_COMPARABLE = 3,
  } KNOWLEDGE_COOKIE_COMPARISON_RESULT;
  typedef enum SYNC_FULL_ENUMERATION_ACTION {
    SFEA_FULL_ENUMERATION = 0,
    SFEA_PARTIAL_SYNC = 1,
    SFEA_ABORT = 2,
  } SYNC_FULL_ENUMERATION_ACTION;
  typedef enum SYNC_PROGRESS_STAGE {
    SPS_CHANGE_DETECTION = 0,
    SPS_CHANGE_ENUMERATION = 1,
    SPS_CHANGE_APPLICATION = 2,
  } SYNC_PROGRESS_STAGE;
  typedef enum SYNC_PROVIDER_ROLE {
    SPR_SOURCE = 0,
    SPR_DESTINATION = 1,
  } SYNC_PROVIDER_ROLE;
  typedef enum SYNC_RESOLVE_ACTION {
    SRA_DEFER = 0,
    SRA_ACCEPT_DESTINATION_PROVIDER = 1,
    SRA_ACCEPT_SOURCE_PROVIDER = 2,
    SRA_MERGE = 3,
    SRA_TRANSFER_AND_DEFER = 4,
  } SYNC_RESOLVE_ACTION;
  typedef enum SYNC_SERIALIZATION_VERSION {
    SYNC_SERIALIZATION_VERSION_V1 = 1,
    SYNC_SERIALIZATION_VERSION_V2 = 4,
  } SYNC_SERIALIZATION_VERSION;
  typedef enum SYNC_STATISTICS {
    SYNC_STATISTICS_RANGE_COUNT = 0,
  } SYNC_STATISTICS;
  typedef struct ID_PARAMETER_PAIR {
    BOOL fIsVariable,
    USHORT cbIdSize,
  } ID_PARAMETER_PAIR;

  typedef struct ID_PARAMETERS {
    DWORD dwSize,
    ID_PARAMETER_PAIR replicaId,
    ID_PARAMETER_PAIR itemId,
    ID_PARAMETER_PAIR changeUnitId,
  } ID_PARAMETERS;

  typedef struct SYNC_RANGE {
    BYTE* pbClosedLowerBound,
    BYTE* pbClosedUpperBound,
  } SYNC_RANGE;

  typedef struct SYNC_SESSION_STATISTICS {
    DWORD dwChangesApplied,
    DWORD dwChangesFailed,
  } SYNC_SESSION_STATISTICS;

  typedef struct SYNC_TIME {
    DWORD dwDate,
    DWORD dwTime,
  } SYNC_TIME;

  typedef struct SYNC_VERSION {
    DWORD dwLastUpdatingReplicaKey,
    ULONGLONG ullTickCount,
  } SYNC_VERSION;

]]
