require( 'ffi/winapi/headers/windows' )
local ffi = require( 'ffi' )
ffi.cdef [[
  HRESULT           ABProviderInit(             HINSTANCE hInstance, LPMALLOC lpMalloc, LPALLOCATEBUFFER lpAllocateBuffer, LPALLOCATEMORE lpAllocateMore, LPFREEBUFFER lpFreeBuffer, ULONG ulFlags, ULONG ulMAPIVer, ULONG* lpulProviderVer, LPABPROVIDER* lppABProvider);
  STDAPI            BuildDisplayTable(          LPALLOCATEBUFFER lpAllocateBuffer, LPALLOCATEMORE lpAllocateMore, LPFREEBUFFER lpFreeBuffer, LPMALLOC lpMalloc, HINSTANCE hInstance, UINT cPages, LPDTPAGE lpPage, ULONG ulFlags, LPMAPITABLE* lppTable, LPTABLEDATA* lppTblData);
  VOID              ChangeIdleRoutine(          FTG ftg, PFNIDLE pfnIdle, LPVOID pvIdleParam, short priIdle, ULONG csecIdle, USHORT iroIdle, USHORT ircIdle);
  HRESULT           CheckParms(                 METHODS eMethod, LPVOID First);
  VOID              CloseIMsgSession(           LPMSGSESS lpMsgSess);
  SCODE             CreateIProp(                LPCIID lpInterface, ALLOCATEBUFFER* lpAllocateBuffer, ALLOCATEMORE* lpAllocateMore, FREEBUFFER* lpFreeBuffer, LPVOID lpvReserved, LPPROPDATA* lppPropData);
  SCODE             CreateTable(                LPCIID lpInterface, ALLOCATEBUFFER* lpAllocateBuffer, ALLOCATEMORE* lpAllocateMore, FREEBUFFER* lpFreeBuffer, LPVOID lpvReserved, WINAPI_MapiTableType ulTableType, ULONG ulPropTagIndexColumn, LPSPropTagArray lpSPropTagArrayColumns, LPTABLEDATA* lppTableData);
  VOID              DeinitMapiUtil(             );
  VOID              DeregisterIdleRoutine(      FTG ftg);
  VOID              EnableIdleRoutine(          FTG ftg, BOOL fEnable);
  WINAPI_BOOL_ULONG FBadColumnSet(              LPSPropTagArray lpptaCols);
  BOOL              FBadEntryList(              LPENTRYLIST lpEntryList);
  WINAPI_BOOL_ULONG FBadProp(                   LPSPropValue lpprop);
  WINAPI_BOOL_ULONG FBadPropTag(                ULONG ulPropTag);
  WINAPI_BOOL_ULONG FBadRestriction(            LPSRestriction lpres);
  BOOL              FBadRglpNameID(             LPMAPINAMEID* lppNameId, ULONG cNames);
  BOOL              FBadRglpszW(                LPWSTR* lppszW, ULONG cStrings);
  WINAPI_BOOL_ULONG FBadRow(                    LPSRow lprow);
  BOOL              FBadRowSet(                 LPSRowSet lpRowSet);
  WINAPI_BOOL_ULONG FBadSortOrderSet(           LPSSortOrderSet lpsos);
  BOOL              FBinFromHex(                LPSTR sz, LPBYTE pb);
  BOOL              FEqualNames(                LPMAPINAMEID lpName1, LPMAPINAMEID lpName2);
  BOOL              FGetComponentPath(          LPCSTR szComponent, LPSTR szQualifier, LPSTR szDllPath, DWORD cchBufferSize, BOOL fInstall);
  BOOL              FPropCompareProp(           LPSPropValue lpSPropValue1, ULONG ulRelOp, LPSPropValue lpSPropValue2);
  BOOL              FPropContainsProp(          LPSPropValue lpSPropValueDst, LPSPropValue lpSPropValueSrc, ULONG ulFuzzyLevel);
  BOOL              FPropExists(                LPMAPIPROP pobj, ULONG ulPropTag);
  void              FreePadrlist(               LPADRLIST padrlist);
  void              FreeProws(                  LPSRowSet prows);
  FILETIME          FtAddFt(                    FILETIME Addend1, FILETIME Addend2);
  FTG               FtgRegisterIdleRoutine(     PFNIDLE pfnIdle, LPVOID pvIdleParam, short priIdle, ULONG csecIdle, USHORT iroIdle);
  FILETIME          FtMulDw(                    DWORD Multiplier, FILETIME Multiplicand);
  FILETIME          FtMulDwDw(                  DWORD Multiplicand, DWORD Multiplier);
  FILETIME          FtNegFt(                    FILETIME ft);
  FILETIME          FtSubFt(                    FILETIME Minuend, FILETIME Subtrahend);
  HRESULT           GetAttribIMsgOnIStg(        LPVOID lpObject, LPSPropTagArray lpPropTagArray, LPSPropAttrArray* lppPropAttrArray);
  VOID              GetInstance(                LPSPropValue pvalMv, LPSPropValue pvalSv, ULONG uliInst);
  void              HexFromBin(                 LPBYTE pb, int cb, LPSTR sz);
  HRESULT           HrAddColumnsEx(             LPMAPITABLE lptbl, LPSPropTagArray lpproptagColumnsNew, LPALLOCATEBUFFER lpAllocateBuffer, LPFREEBUFFER lpFreeBuffer, void* lpfnFilterColumns);
  STDAPI            HrAllocAdviseSink(          LPNOTIFCALLBACK lpfnCallback, LPVOID lpvContext, LPMAPIADVISESINK* lppAdviseSink);
  STDAPI            HrComposeEID(               LPMAPISESSION psession, ULONG cbStoreRecordKey, LPBYTE pStoreRecordKey, ULONG cbMsgEID, LPENTRYID pMsgEID, ULONG* pcbEID, LPENTRYID* ppEID);
  STDAPI            HrComposeMsgID(             LPMAPISESSION psession, ULONG cbStoreRecordKey, LPBYTE pStoreRecordKey, ULONG cbMsgEID, LPENTRYID pMsgEID, LPTSTR* pszMsgID);
  STDAPI            HrDecomposeEID(             LPMAPISESSION psession, ULONG cbEID, LPENTRYID pEID, ULONG* pcbStoreEID, LPENTRYID* ppStoreEID, ULONG* pcbMsgEID, LPENTRYID* ppMsgEID);
  STDAPI            HrDecomposeMsgID(           LPMAPISESSION psession, LPTSTR szMsgID, ULONG* pcbStoreEID, LPENTRYID* ppStoreEID, ULONG* pcbMsgEID, LPENTRYID* ppMsgEID);
  HRESULT           HrDispatchNotifications(    ULONG ulFlags);
  HRESULT           HrEntryIDFromSz(            LPSTR sz, ULONG* pcb, LPENTRYID* ppentry);
  STDAPI            HrGetOneProp(               LPMAPIPROP pmp, ULONG ulPropTag, LPSPropValue* ppprop);
  HRESULT           HrIStorageFromStream(       LPUNKNOWN lpUnkIn, LPCIID lpInterface, ULONG ulFlags, LPSTORAGE* lppStorageOut);
  HRESULT           HrQueryAllRows(             LPMAPITABLE ptable, LPSPropTagArray ptaga, LPSRestriction pres, LPSSortOrderSet psos, LONG crowsMax, LPSRowSet* pprows);
  STDAPI            HrSetOneProp(               LPMAPIPROP pmp, LPSPropValue pprop);
  STDAPI            HrSzFromEntryID(            ULONG cb, LPENTRYID pentry, LPTSTR* psz);
  STDAPI            HrThisThreadAdviseSink(     LPMAPIADVISESINK lpAdviseSink, LPMAPIADVISESINK* lppAdviseSink);
  STDAPI            HrValidateIPMSubtree(       LPMDB lpMDB, ULONG ulFlags, ULONG* lpcValues, LPSPropValue* lppProps, LPMAPIERROR* lppMapiError);
  LONG              LPropCompareProp(           LPSPropValue lpSPropValueA, LPSPropValue lpSPropValueB);
  HRESULT           MAPIAdminProfiles(          ULONG ulFlags, LPPROFADMIN* lppProfAdmin);
  SCODE             MAPIAllocateBuffer(         ULONG cbSize, LPVOID* lppBuffer);
  SCODE             MAPIAllocateMore(           ULONG cbSize, LPVOID lpObject, LPVOID* lppBuffer);
  void              MAPIDeInitIdle(             );
  HRESULT           MAPIFreeBuffer(             LPVOID lpBuffer);
  LPMALLOC          MAPIGetDefaultMalloc(       );
  HRESULT           MAPIInitialize(             LPMAPIINIT_0 lpMapiInit);
  LONG              MAPIInitIdle(               LPVOID lpvReserved);
  HRESULT           MAPILogonEx(                ULONG_PTR ulUIParam, LPTSTR lpszProfileName, LPTSTR lpszPassword, FLAGS flFlags, LPMAPISESSION* lppSession);
  STDAPI            MAPIOpenFormMgr(            LPMAPISESSION pSession, LPMAPIFORMMGR* ppmgr);
  STDAPI            MAPIOpenLocalFormContainer( LPMAPIFORMCONTAINER* ppfcnt);
  void              MAPIUninitialize(           );
  SCODE             MapStorageSCode(            SCODE StgSCode);
  HRESULT           MSProviderInit(             HINSTANCE hInstance, LPMALLOC lpMalloc, LPALLOCATEBUFFER lpAllocateBuffer, LPALLOCATEMORE lpAllocateMore, LPFREEBUFFER lpFreeBuffer, ULONG ulFlags, ULONG ulMAPIVer, ULONG* lpulProviderVer, LPMSPROVIDER* lppMSProvider);
  SCODE             OpenIMsgOnIStg(             LPMSGSESS lpMsgSess, LPALLOCATEBUFFER lpAllocateBuffer, LPALLOCATEMORE lpAllocateMore, LPFREEBUFFER lpFreeBuffer, LPMALLOC lpmalloc, LPVOID lpMapiSup, LPSTORAGE lpStg, MSGCALLRELEASE* lpfMsgCallRelease, ULONG ulCallerData, ULONG ulFlags, LPMESSAGE* lppMsg);
  SCODE             OpenIMsgSession(            LPMALLOC lpMalloc, ULONG ulFlags, LPMSGSESS* lppMsgSess);
  HRESULT           OpenStreamOnFile(           LPALLOCATEBUFFER lpAllocateBuffer, LPFREEBUFFER lpFreeBuffer, ULONG ulFlags, LPTSTR lpszFileName, LPTSTR lpszPrefix, LPSTREAM* lppStream);
  HRESULT           OpenTnefStream(             LPVOID lpvSupport, LPSTREAM lpStream, LPTSTR lpszStreamName, ULONG ulFlags, LPMESSAGE lpMessage, WORD wKey, LPSTREAM* lppTNEF);
  HRESULT           OpenTnefStreamEx(           LPVOID lpvSupport, LPSTREAM lpStream, LPTSTR lpszStreamName, ULONG ulFlags, LPMESSAGE lpMessage, WORD wKeyVal, LPADRBOOK lpAdressBook, LPITNEF* lppTNEF);
  LPSPropValue      PpropFindProp(              LPSPropValue rgprop, ULONG cprop, ULONG ulPropTag);
  HRESULT           PreprocessMessage(          LPVOID lpvSession, LPMESSAGE lpMessage, LPADRBOOK lpAdrBook, LPMAPIFOLDER lpFolder, LPALLOCATEBUFFER AllocateBuffer, LPALLOCATEMORE AllocateMore, LPFREEBUFFER FreeBuffer, ULONG* lpcOutbound, LPMESSAGE** lpppMessage, LPADRLIST* lppRecipList);
  SCODE             PropCopyMore(               LPSPropValue lpSPropValueDest, LPSPropValue lpSPropValueSrc, ALLOCATEMORE* lpfAllocMore, LPVOID lpvObject);
  HRESULT           RemovePreprocessInfo(       LPMESSAGE lpMessage);
  HRESULT           RTFSync(                    LPMESSAGE lpMessage, ULONG ulFlags, BOOL* lpfMessageUpdated);
  SCODE             ScBinFromHexBounded(        LPSTR sz, LPBYTE pb, ULONG cb);
  SCODE             ScCopyNotifications(        int cntf, LPNOTIFICATION rgntf, LPVOID pvDst, ULONG* pcb);
  SCODE             ScCopyProps(                int cprop, LPSPropValue rgprop, LPVOID pvDst, ULONG* pcb);
  SCODE             ScCountNotifications(       int cntf, LPNOTIFICATION rgntf, ULONG* pcb);
  SCODE             ScCountProps(               int cprop, LPSPropValue rgprop, ULONG* pcb);
  SCODE             ScCreateConversationIndex(  ULONG cbParent, LPBYTE lpbParent, ULONG* lpcbIndex, LPBYTE* lppbIndex);
  SCODE             ScDupPropset(               int cprop, LPSPropValue rgprop, LPALLOCATEBUFFER lpAllocateBuffer, LPSPropValue* prgprop);
  SCODE             ScInitMapiUtil(             ULONG ulFlags);
  SCODE             ScLocalPathFromUNC(         LPSTR szUNC, LPSTR szLocal, UINT cchLocal);
  SCODE             ScRelocNotifications(       int cntf, LPNOTIFICATION rgntf, LPVOID pvBaseOld, LPVOID pvBaseNew, ULONG* pcb);
  SCODE             ScRelocProps(               int cprop, LPSPropValue rgprop, LPVOID pvBaseOld, LPVOID pvBaseNew, ULONG* pcb);
  SCODE             ScUNCFromLocalPath(         LPSTR szLocal, LPSTR szUNC, UINT cchUNC);
  HRESULT           SetAttribIMsgOnIStg(        LPVOID lpObject, LPSPropTagArray lpPropTags, LPSPropAttrArray lpPropAttrs, LPSPropProblemArray* lppPropProblems);
  LPTSTR            SzFindCh(                   LPCTSTR lpsz, USHORT ch);
  LPTSTR            SzFindLastCh(               LPCTSTR lpsz, USHORT ch);
  LPTSTR            SzFindSz(                   LPCTSTR lpsz, LPCTSTR lpszKey);
  UINT              UFromSz(                    LPCTSTR lpsz);
  ULONG             UlAddRef(                   LPVOID punk);
  ULONG             UlFromSzHex(                LPCTSTR lpsz);
  ULONG             UlPropSize(                 LPSPropValue lpSPropValue);
  ULONG             UlRelease(                  LPVOID punk);
  HRESULT           UlValidateParameters(       METHODS eMethod, LPVOID First);
  HRESULT           UlValidateParms(            METHODS eMethod, LPVOID First);
  HRESULT           ValidateParameters(         METHODS eMethod, LPVOID First);
  HRESULT           ValidateParms(              METHODS eMethod, LPVOID First);
  HRESULT           WrapCompressedRTFStream(    LPSTREAM lpCompressedRTFStream, ULONG ulflags, LPSTREAM* lpUncompressedRTFStream);
  STDAPI            WrapStoreEntryID(           ULONG ulFlags, LPTSTR szDLLName, ULONG cbOrigEntry, LPENTRYID lpOrigEntry, ULONG* lpcbWrappedEntry, LPENTRYID* lppWrappedEntry);
  HRESULT           XPProviderInit(             HINSTANCE hInstance, LPMALLOC lpMalloc, LPALLOCATEBUFFER lpAllocateBuffer, LPALLOCATEMORE lpAllocateMore, LPFREEBUFFER lpFreeBuffer, ULONG ulFlags, ULONG ulMAPIVer, ULONG* lpulProviderVer, LPXPPROVIDER* lppXPProvider);
]]
return ffi.load( 'MsMapi32.dll' )
