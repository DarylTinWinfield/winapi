require( 'ffi/winapi/mozilla/nspr' )
local ffi = require( 'ffi' )
ffi.cdef [[
  typedef PRInt32 WINAPI_SSLOption; //Alias
  static const PRInt32 SSL_SECURITY = 1;
  static const PRInt32 SSL_SOCKS = 2;
  static const PRInt32 SSL_REQUEST_CERTIFICATE = 3;
  static const PRInt32 SSL_HANDSHAKE_AS_CLIENT = 5;
  static const PRInt32 SSL_HANDSHAKE_AS_SERVER = 6;
  static const PRInt32 SSL_ENABLE_SSL2 = 7;
  static const PRInt32 SSL_ENABLE_SSL3 = 8;
  static const PRInt32 SSL_NO_CACHE = 9;
  static const PRInt32 SSL_REQUIRE_CERTIFICATE = 10;
  static const PRInt32 SSL_ENABLE_FDX = 11;
  static const PRInt32 SSL_V2_COMPATIBLE_HELLO = 12;
  static const PRInt32 SSL_ENABLE_TLS = 13;
  static const PRInt32 SSL_ROLLBACK_DETECTION = 14;
  static const PRInt32 SSL_NO_STEP_DOWN = 15;
  static const PRInt32 SSL_BYPASS_PKCS11 = 16;
  static const PRInt32 SSL_NO_LOCKS = 17;
  static const PRInt32 SSL_ENABLE_SESSION_TICKETS = 18;
  static const PRInt32 SSL_ENABLE_DEFLATE = 19;
  static const PRInt32 SSL_ENABLE_RENEGOTIATION = 20;
  static const PRInt32 SSL_REQUIRE_SAFE_NEGOTIATION = 21;
  static const PRInt32 SSL_ENABLE_FALSE_START = 22;
  typedef PRInt32 WINAPI_SSLCipher; //Alias
  static const PRInt32 SSL_NULL_WITH_NULL_NULL = 0x0000;
  static const PRInt32 SSL_RSA_WITH_NULL_MD5 = 0x0001;
  static const PRInt32 SSL_RSA_WITH_NULL_SHA = 0x0002;
  static const PRInt32 SSL_RSA_EXPORT_WITH_RC4_40_MD5 = 0x0003;
  static const PRInt32 SSL_RSA_WITH_RC4_128_MD5 = 0x0004;
  static const PRInt32 SSL_RSA_WITH_RC4_128_SHA = 0x0005;
  static const PRInt32 SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = 0x0006;
  static const PRInt32 SSL_RSA_WITH_IDEA_CBC_SHA = 0x0007;
  static const PRInt32 SSL_RSA_EXPORT_WITH_DES40_CBC_SHA = 0x0008;
  static const PRInt32 SSL_RSA_WITH_DES_CBC_SHA = 0x0009;
  static const PRInt32 SSL_RSA_WITH_3DES_EDE_CBC_SHA = 0x000a;
  static const PRInt32 SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA = 0x000b;
  static const PRInt32 SSL_DH_DSS_WITH_DES_CBC_SHA = 0x000c;
  static const PRInt32 SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA = 0x000d;
  static const PRInt32 SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA = 0x000e;
  static const PRInt32 SSL_DH_RSA_WITH_DES_CBC_SHA = 0x000f;
  static const PRInt32 SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA = 0x0010;
  static const PRInt32 SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA = 0x0011;
  static const PRInt32 SSL_DHE_DSS_WITH_DES_CBC_SHA = 0x0012;
  static const PRInt32 SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA = 0x0013;
  static const PRInt32 SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA = 0x0014;
  static const PRInt32 SSL_DHE_RSA_WITH_DES_CBC_SHA = 0x0015;
  static const PRInt32 SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA = 0x0016;
  static const PRInt32 SSL_DH_ANON_EXPORT_WITH_RC4_40_MD5 = 0x0017;
  static const PRInt32 SSL_DH_ANON_WITH_RC4_128_MD5 = 0x0018;
  static const PRInt32 SSL_DH_ANON_EXPORT_WITH_DES40_CBC_SHA = 0x0019;
  static const PRInt32 SSL_DH_ANON_WITH_DES_CBC_SHA = 0x001a;
  static const PRInt32 SSL_DH_ANON_WITH_3DES_EDE_CBC_SHA = 0x001b;
  static const PRInt32 SSL_FORTEZZA_DMS_WITH_NULL_SHA = 0x001c;
  static const PRInt32 SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA = 0x001d;
  static const PRInt32 SSL_FORTEZZA_DMS_WITH_RC4_128_SHA = 0x001e;
  static const PRInt32 TLS_RSA_WITH_AES_128_CBC_SHA = 0x002F;
  static const PRInt32 TLS_DH_DSS_WITH_AES_128_CBC_SHA = 0x0030;
  static const PRInt32 TLS_DH_RSA_WITH_AES_128_CBC_SHA = 0x0031;
  static const PRInt32 TLS_DHE_DSS_WITH_AES_128_CBC_SHA = 0x0032;
  static const PRInt32 TLS_DHE_RSA_WITH_AES_128_CBC_SHA = 0x0033;
  static const PRInt32 TLS_DH_ANON_WITH_AES_128_CBC_SHA = 0x0034;
  static const PRInt32 TLS_RSA_WITH_AES_256_CBC_SHA = 0x0035;
  static const PRInt32 TLS_DH_DSS_WITH_AES_256_CBC_SHA = 0x0036;
  static const PRInt32 TLS_DH_RSA_WITH_AES_256_CBC_SHA = 0x0037;
  static const PRInt32 TLS_DHE_DSS_WITH_AES_256_CBC_SHA = 0x0038;
  static const PRInt32 TLS_DHE_RSA_WITH_AES_256_CBC_SHA = 0x0039;
  static const PRInt32 TLS_DH_ANON_WITH_AES_256_CBC_SHA = 0x003A;
  static const PRInt32 TLS_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x0041;
  static const PRInt32 TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = 0x0042;
  static const PRInt32 TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x0043;
  static const PRInt32 TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = 0x0044;
  static const PRInt32 TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x0045;
  static const PRInt32 TLS_DH_ANON_WITH_CAMELLIA_128_CBC_SHA = 0x0046;
  static const PRInt32 TLS_RSA_EXPORT1024_WITH_DES_CBC_SHA = 0x0062;
  static const PRInt32 TLS_RSA_EXPORT1024_WITH_RC4_56_SHA = 0x0064;
  static const PRInt32 TLS_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA = 0x0063;
  static const PRInt32 TLS_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA = 0x0065;
  static const PRInt32 TLS_DHE_DSS_WITH_RC4_128_SHA = 0x0066;
  static const PRInt32 TLS_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x0084;
  static const PRInt32 TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = 0x0085;
  static const PRInt32 TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x0086;
  static const PRInt32 TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = 0x0087;
  static const PRInt32 TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x0088;
  static const PRInt32 TLS_DH_ANON_WITH_CAMELLIA_256_CBC_SHA = 0x0089;
  static const PRInt32 TLS_ECDH_ECDSA_WITH_NULL_SHA = 0xC001;
  static const PRInt32 TLS_ECDH_ECDSA_WITH_RC4_128_SHA = 0xC002;
  static const PRInt32 TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA = 0xC003;
  static const PRInt32 TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = 0xC004;
  static const PRInt32 TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = 0xC005;
  static const PRInt32 TLS_ECDHE_ECDSA_WITH_NULL_SHA = 0xC006;
  static const PRInt32 TLS_ECDHE_ECDSA_WITH_RC4_128_SHA = 0xC007;
  static const PRInt32 TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = 0xC008;
  static const PRInt32 TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 0xC009;
  static const PRInt32 TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 0xC00A;
  static const PRInt32 TLS_ECDH_RSA_WITH_NULL_SHA = 0xC00B;
  static const PRInt32 TLS_ECDH_RSA_WITH_RC4_128_SHA = 0xC00C;
  static const PRInt32 TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA = 0xC00D;
  static const PRInt32 TLS_ECDH_RSA_WITH_AES_128_CBC_SHA = 0xC00E;
  static const PRInt32 TLS_ECDH_RSA_WITH_AES_256_CBC_SHA = 0xC00F;
  static const PRInt32 TLS_ECDHE_RSA_WITH_NULL_SHA = 0xC010;
  static const PRInt32 TLS_ECDHE_RSA_WITH_RC4_128_SHA = 0xC011;
  static const PRInt32 TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = 0xC012;
  static const PRInt32 TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = 0xC013;
  static const PRInt32 TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = 0xC014;
  static const PRInt32 TLS_ECDH_anon_WITH_NULL_SHA = 0xC015;
  static const PRInt32 TLS_ECDH_anon_WITH_RC4_128_SHA = 0xC016;
  static const PRInt32 TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA = 0xC017;
  static const PRInt32 TLS_ECDH_anon_WITH_AES_128_CBC_SHA = 0xC018;
  static const PRInt32 TLS_ECDH_anon_WITH_AES_256_CBC_SHA = 0xC019;
  static const PRInt32 SSL_EN_RC4_128_WITH_MD5 = 0xFF01;
  static const PRInt32 SSL_EN_RC2_128_CBC_WITH_MD5 = 0xFF03;
  static const PRInt32 SSL_EN_DES_192_EDE3_CBC_WITH_MD5 = 0xFF07;
  static const PRInt32 SSL_EN_DES_64_CBC_WITH_MD5 = 0xFF06;
  static const PRInt32 SSL_EN_RC4_128_EXPORT40_WITH_MD5 = 0xFF02;
  static const PRInt32 SSL_EN_RC2_128_CBC_EXPORT40_WITH_MD5 = 0xFF04;
  static const PRInt32 SSL_RSA_OLDFIPS_WITH_3DES_EDE_CBC_SHA = 0xffe0;
  static const PRInt32 SSL_RSA_OLDFIPS_WITH_DES_CBC_SHA = 0xffe1;
  static const PRInt32 SSL_RSA_FIPS_WITH_3DES_EDE_CBC_SHA = 0xfeff;
  static const PRInt32 SSL_RSA_FIPS_WITH_DES_CBC_SHA = 0xfefe;
  typedef PRInt32 WINAPI_SSLPolicy; //Alias
  static const PRInt32 SSL_ALLOWED = 0;
  static const PRInt32 SSL_RESTRICTED = 1;
  static const PRInt32 SSL_NOT_ALLOWED = 2;
  typedef int WINAPI_SSLSecurityStatus; //Alias
  static const int SSL_SECURITY_STATUS_OFF = 0;
  static const int SSL_SECURITY_STATUS_ON_HIGH = 1;
  static const int SSL_SECURITY_STATUS_ON_LOW = 2;
  SECStatus        SSL_OptionSetDefault(           WINAPI_SSLOption option, PRBool on);
  SECStatus        SSL_OptionGetDefault(           WINAPI_SSLOption option, PRBool* on);
  SECStatus        SSL_CipherPrefSetDefault(       WINAPI_SSLCipher cipher, PRBool enabled);
  SECStatus        SSL_CipherPrefGetDefault(       WINAPI_SSLCipher cipher, PRBool* enabled);
  void             SSL_ClearSessionCache(          );
  SECStatus        SSL_ConfigServerSessionIDCache( int maxCacheEntries, PRUint32 timeout, PRUint32 ssl3_timeout, WINAPI_char* directory);
  SECStatus        SSL_ConfigMPServerSIDCache(     int maxCacheEntries, PRUint32 timeout, PRUint32 ssl3_timeout, WINAPI_char* directory);
  SECStatus        SSL_InheritMPServerSIDCache(    WINAPI_char* envString);
  SECStatus        NSS_SetDomesticPolicy(          );
  SECStatus        NSS_SetExportPolicy(            );
  SECStatus        NSS_SetFrancePolicy(            );
  SECStatus        SSL_CipherPolicySet(            WINAPI_SSLCipher cipher, WINAPI_SSLPolicy policy);
  SECStatus        SSL_CipherPolicyGet(            WINAPI_SSLCipher cipher, WINAPI_SSLPolicy policy);
  PRFileDesc*      SSL_ImportFD(                   PRFileDesc* model, PRFileDesc* fd);
  SECStatus        SSL_OptionSet(                  PRFileDesc* fd, WINAPI_SSLOption option, PRBool on);
  SECStatus        SSL_OptionGet(                  PRFileDesc* fd, WINAPI_SSLOption option, PRBool* on);
  SECStatus        SSL_CipherPrefSet(              PRFileDesc* fd, WINAPI_SSLCipher cipher, PRBool enabled);
  SECStatus        SSL_CipherPrefGet(              PRFileDesc* fd, WINAPI_SSLCipher cipher, PRBool* enabled);
  SECStatus        SSL_ConfigSecureServer(         PRFileDesc* fd, CERTCertificate* cert, SECKEYPrivateKey* key, SSLKEAType keaType);
  int              SSL_SetURL(                     PRFileDesc* fd, char* url);
  int              SSL_SetPKCS11PinArg(            PRFileDesc* fd, void* a);
  SECStatus        SSL_AuthCertificateHook(        PRFileDesc* fd, SSLAuthCertificate f, void* arg);
  SECStatus        SSL_AuthCertificate(            void* arg, PRFileDesc* fd, PRBool checksig, PRBool isServer);
  SECStatus        SSL_BadCertHook(                PRFileDesc* fd, SSLBadCertHandler f, void* arg);
  SECStatus        SSL_GetClientAuthDataHook(      PRFileDesc* fd, SSLGetClientAuthData f, void* arg);
  SECStatus        NSS_GetClientAuthData(          void* arg, PRFileDesc* socket, CERTDistNamesStr* caNames, CERTCertificateStr** pRetCert, SECKEYPrivateKeyStr** pRetKey);
  SECStatus        SSL_HandshakeCallback(          PRFileDesc* fd, SSLHandshakeCallback cb, void* client_data);
  int              SSL_InvalidateSession(          PRFileDesc* fd);
  int              SSL_DataPending(                PRFileDesc* fd);
  SECStatus        SSL_SecurityStatus(             PRFileDesc* fd, WINAPI_SSLSecurityStatus* on, char** cipher, int* keysize, int* secretKeySize, char** issuer, char** subject);
  SECItem*         SSL_GetSessionID(               PRFileDesc* fd);
  int              SSL_SetSockPeerID(              PRFileDesc* fd, char* peerID);
  CERTCertificate* SSL_PeerCertificate(            PRFileDesc* fd);
  char*            SSL_RevealURL(                  PRFileDesc* fd);
  void*            SSL_RevealPinArg(               PRFileDesc* fd);
  SECStatus        SSL_ForceHandshake(             PRFileDesc* fd);
  SECStatus        SSL_ReHandshake(                PRFileDesc* fd, PRBool flushCache);
  SECStatus        SSL_ResetHandshake(             PRFileDesc* fd, PRBool asServer);
]]
return ffi.load( 'SSL3.DLL' )
