require( 'ffi/winapi/mozilla/nspr' )
local ffi = require( 'ffi' )
ffi.cdef [[
  typedef PRIntn PrAddressFamily; //Alias
  static const PrAddressFamily PR_AF_UNSPEC = 0;
  static const PrAddressFamily PR_AF_LOCAL = 1;
  static const PrAddressFamily PR_AF_INET = 2;
  static const PrAddressFamily PR_AF_INET6 = 100;
  PRStatus         PR_JoinThread(                       PRThread* thread);
  PRThread*        PR_CreateThread(                     PRThreadType type, void *void* start, void* arg, PRThreadPriority priority, PRThreadScope scope, PRThreadState state, PRUint32 stackSize);
  PRThread*        PR_GetCurrentThread(                 );
  PRThread*        PR_AttachThread(                     PRThreadType type, PRThreadPriority priority, PRThreadStack* stack);
  void             PR_DetachThread(                     );
  PRThreadPriority PR_GetThreadPriority(                PRThread* thread);
  void             PR_SetThreadPriority(                PRThread* thread, PRThreadPriority priority);
  PRStatus         PR_NewThreadPrivateIndex(            PRUintn* newIndex, PRThreadPrivateDTOR destructor);
  PRStatus         PR_SetThreadPrivate(                 PRUintn index, void* priv);
  void*            PR_GetThreadPrivate(                 PRUintn index);
  PRStatus         PR_Interrupt(                        PRThread* thread);
  void             PR_ClearInterrupt(                   );
  PRStatus         PR_Sleep(                            PRIntervalTime ticks);
  void             PR_SetConcurrency(                   PRUintn numCPUs);
  PRThreadScope    PR_GetThreadScope(                   );
  PRLock*          PR_NewLock(                          );
  void             PR_DestroyLock(                      PRLock* lock);
  void             PR_Lock(                             PRLock* lock);
  PRStatus         PR_Unlock(                           PRLock* lock);
  PRCondVar*       PR_NewCondVar(                       PRLock* lock);
  void             PR_DestroyCondVar(                   PRCondVar* cvar);
  PRStatus         PR_WaitCondVar(                      PRCondVar* cvar, PRIntervalTime timeout);
  PRStatus         PR_NotifyCondVar(                    PRCondVar* cvar);
  PRStatus         PR_NotifyAllCondVar(                 PRCondVar* cvar);
  PRMonitor*       PR_NewMonitor(                       );
  void             PR_DestroyMonitor(                   PRMonitor* mon);
  void             PR_EnterMonitor(                     PRMonitor* mon);
  PRStatus         PR_ExitMonitor(                      PRMonitor* mon);
  PRStatus         PR_Wait(                             PRMonitor* mon, PRIntervalTime ticks);
  PRStatus         PR_Notify(                           PRMonitor* mon);
  PRStatus         PR_NotifyAll(                        PRMonitor* mon);
  PRMonitor*       PR_CEnterMonitor(                    void* address);
  PRStatus         PR_CExitMonitor(                     void* address);
  PRStatus         PR_CWait(                            void* address, PRIntervalTime timeout);
  PRStatus         PR_CNotify(                          void* address);
  PRStatus         PR_CNotifyAll(                       void* address);
  PRFileDesc*      PR_Open(                             char* name, PRIntn flags, PRIntn mode);
  PRStatus         PR_GetFileInfo(                      char* fn, PRFileInfo* info);
  PRStatus         PR_GetFileInfo64(                    char* fn, PRFileInfo64* info);
  PRStatus         PR_Rename(                           char* from, char* to);
  PRStatus         PR_Access(                           char* name, PRAccessHow how);
  PRStatus         PR_Close(                            PRFileDesc* fd);
  PRInt32          PR_Read(                             PRFileDesc* fd, void* buf, PRInt32 amount);
  PRInt32          PR_Write(                            PRFileDesc* fd, void* buf, PRInt32 amount);
  PRInt32          PR_Writev(                           PRFileDesc* fd, PRIOVec* iov, PRInt32 size, PRIntervalTime timeout);
  PRStatus         PR_GetOpenFileInfo(                  PRFileDesc* fd, PRFileInfo* info);
  PRStatus         PR_GetOpenFileInfo64(                PRFileDesc* fd, PRFileInfo* info);
  PRInt32          PR_Seek(                             PRFileDesc* fd, PRInt32 offset, PRSeekWhence whence);
  PRInt64          PR_Seek64(                           PRFileDesc* fd, PRInt64 offset, PRSeekWhence whence);
  PRInt32          PR_Available(                        PRFileDesc* fd);
  PRInt64          PR_Available64(                      PRFileDesc* fd);
  PRStatus         PR_Sync(                             PRFileDesc* fd);
  PRDescType       PR_GetDescType(                      PRFileDesc* file);
  PRFileDesc*      PR_GetSpecialFD(                     PRSpecialFD id);
  PRStatus         PR_CreatePipe(                       PRFileDesc** readPipe, PRFileDesc** writePipe);
  PRDir*           PR_OpenDir(                          char* name);
  PRDirEntry*      PR_ReadDir(                          PRDir* dir, PRDirFlags flags);
  PRStatus         PR_CloseDir(                         PRDir* dir);
  PRStatus         PR_MkDir(                            char* name, PRIntn mode);
  PRStatus         PR_RmDir(                            char* name);
  PRFileDesc*      PR_OpenUDPSocket(                    PrAddressFamily af);
  PRFileDesc*      PR_NewUDPSocket(                     );
  PRFileDesc*      PR_OpenTCPSocket(                    PrAddressFamily af);
  PRFileDesc*      PR_NewTCPSocket(                     );
  PRStatus         PR_Connect(                          PRFileDesc* fd, PRNetAddr* addr, PRIntervalTime timeout);
  PRFileDesc*      PR_Accept(                           PRFileDesc* fd, PRNetAddr* addr, PRIntervalTime timeout);
  PRStatus         PR_Bind(                             PRFileDesc* fd, PRNetAddr* addr);
  PRStatus         PR_Listen(                           PRFileDesc* fd, PRIntn backlog);
  PRStatus         PR_Shutdown(                         PRFileDesc* fd, PRShutdownHow how);
  PRInt32          PR_Recv(                             PRFileDesc* fd, void* buf, PRInt32 amount, PRIntn flags, PRIntervalTime timeout);
  PRInt32          PR_Send(                             PRFileDesc* fd, void* buf, PRInt32 amount, PRIntn flags, PRIntervalTime timeout);
  PRInt32          PR_RecvFrom(                         PRFileDesc* fd, void* buf, PRInt32 amount, PRIntn flags, PRNetAddr* addr, PRIntervalTime timeout);
  PRInt32          PR_SendTo(                           PRFileDesc* fd, void* buf, PRInt32 amount, PRIntn flags, PRNetAddr* addr, PRIntervalTime timeout);
  PRInt32          PR_TransmitFile(                     PRFileDesc* networkSocket, PRFileDesc* sourceFile, void* headers, PRInt32 hlen, PRTransmitFileFlags flags, PRIntervalTime timeout);
  PRInt32          PR_AcceptRead(                       PRFileDesc* listenSock, PRFileDesc** acceptedSock, PRNetAddr** peerAddr, void* buf, PRInt32 amount, PRIntervalTime timeout);
  PRStatus         PR_GetSockName(                      PRFileDesc* fd, PRNetAddr* addr);
  PRStatus         PR_GetPeerName(                      PRFileDesc* fd, PRNetAddr* addr);
  PRStatus         PR_GetSocketOption(                  PRFileDesc* fd, PRSocketOptionData* data);
  PRStatus         PR_SetSocketOption(                  PRFileDesc* fd, PRSocketOptionData* data);
  PRUint16         PR_ntohs(                            PRUint16 conversion);
  PRUint32         PR_ntohl(                            PRUint32 conversion);
  PRUint16         PR_htons(                            PRUint16 conversion);
  PRUint32         PR_htonl(                            PRUint32 conversion);
  PRFileMap*       PR_CreateFileMap(                    PRFileDesc* fd, PRInt64 size, PRFileMapProtect prot);
  void*            PR_MemMap(                           PRFileMap* fmap, PRInt64 offset, PRUint32 len);
  PRStatus         PR_MemUnmap(                         void* addr, PRUint32 len);
  PRStatus         PR_CloseFileMap(                     PRFileMap* fmap);
  PRInt32          PR_Poll(                             PRPollDesc* pds, PRIntn npds, PRIntervalTime timeout);
  PRStatus         PR_GetConnectStatus(                 PRPollDesc* pd);
  PRFileDesc*      PR_NewPollableEvent(                 );
  PRStatus         PR_DestroyPollableEvent(             PRFileDesc* event);
  PRStatus         PR_SetPollableEvent(                 PRFileDesc* event);
  PRStatus         PR_WaitForPollableEvent(             PRFileDesc* event);
  PRDescIdentity   PR_GetUniqueIdentity(                char* layer_name);
  char*            PR_GetNameForIdentity(               PRDescIdentity ident);
  PRDescIdentity   PR_GetLayersIdentity(                PRFileDesc* fd);
  PRFileDesc*      PR_GetIdentitiesLayer(               PRFileDesc* stack, PRDescIdentity id);
  PRIOMethods*     PR_GetDefaultIOMethods(              );
  PRFileDesc*      PR_CreateIOLayerStub(                PRDescIdentity ident, PRIOMethods* methods);
  PRStatus         PR_PushIOLayer(                      PRFileDesc* stack, PRDescIdentity id, PRFileDesc* layer);
  PRFileDesc*      PR_PopIOLayer(                       PRFileDesc* stack, PRDescIdentity id);
  PRStatus         PR_InitializeNetAddr(                PRNetAddrValue val, PRUint16 port, PRNetAddr* addr);
  PRStatus         PR_StringToNetAddr(                  char* string, PRNetAddr* addr);
  PRStatus         PR_NetAddrToString(                  PRNetAddr* addr, char* string, PRUint32 size);
  PRStatus         PR_GetHostByName(                    char* hostname, char* buf, PRIntn bufsize, PRHostEnt* hostentry);
  PRStatus         PR_GetHostByAddr(                    PRNetAddr* hostaddr, char* buf, PRIntn bufsize, PRHostEnt* hostentry);
  PRIntn           PR_EnumerateHostEnt(                 PRIntn enumIndex, PRHostEnt* hostEnt, PRUint16 port, PRNetAddr* address);
  PRStatus         PR_GetProtoByName(                   char* protocolname, char* buffer, PRInt32 bufsize, PRProtoEnt* result);
  PRStatus         PR_GetProtoByNumber(                 PRInt32 protocolnumber, char* buffer, PRInt32 bufsize, PRProtoEnt* result);
  PRIntervalTime   PR_IntervalNow(                      );
  PRUint32         PR_TicksPerSecond(                   );
  PRIntervalTime   PR_SecondsToInterval(                PRUint32 seconds);
  PRIntervalTime   PR_MillisecondsToInterval(           PRUint32 milli);
  PRIntervalTime   PR_MicrosecondsToInterval(           PRUint32 milli);
  PRUint32         PR_IntervalToSeconds(                PRIntervalTime ticks);
  PRUint32         PR_IntervalToMilliseconds(           PRIntervalTime ticks);
  PRUint32         PR_IntervalToMicroseconds(           PRIntervalTime ticks);
  PRTimeParameters PR_LocalTimeParameters(              PRExplodedTime* gmt);
  PRTimeParameters PR_GMTParameters(                    PRExplodedTime* gmt);
  PRTime           PR_Now(                              );
  void             PR_ExplodeTime(                      PRTime usecs, PRTimeParamFn params, PRExplodedTime* exploded);
  PRTime           PR_ImplodeTime(                      PRExplodedTime* exploded);
  void             PR_NormalizeTime(                    PRExplodedTime* time, PRTimeParamFn params);
  void*            PR_Calloc(                           PRUint32 nelem, PRUint32 elsize);
  void*            PR_Realloc(                          void* ptr, PRUint32 size);
  void             PR_Free(                             void* ptr);
  PRFloat64        PR_strtod(                           char* s00, char** se);
  PRStatus         PR_dtoa(                             PRFloat64 d, PRIntn mode, PRIntn ndigits, PRIntn* decpt, PRIntn* sign, char** rve, char* buf, PRSize bufsz);
  void             PR_cnvtf(                            char* buf, PRIntn bufsz, PRIntn prcsn, PRFloat64 fval);
  PRStatus         PR_SetLibraryPath(                   char* path);
  char*            PR_GetLibraryPath(                   );
  char*            PR_GetLibraryName(                   char* dir, char* lib);
  void             PR_FreeLibraryName(                  char* mem);
  PRLibrary*       PR_LoadLibrary(                      char* name);
  PRStatus         PR_UnloadLibrary(                    PRLibrary* lib);
  void*            PR_FindSymbolAndLibrary(             char* name, PRLibrary** lib);
  void*            PR_FindSymbol(                       PRLibrary* lib, char* name);
  PRSharedMemory*  PR_OpenSharedMemory(                 char* name, PRSize size, PRIntn flags, PRIntn mode);
  void*            PR_AttachSharedMemory(               PRSharedMemory* shm, PRIntn flags);
  PRStatus         PR_DetachSharedMemory(               PRSharedMemory* shm, void* addr);
  PRStatus         PR_CloseSharedMemory(                PRSharedMemory* shm);
  PRStatus         PR_DeleteSharedMemory(               char* name);
  PRFileMap*       PR_OpenAnonFileMap(                  char* dirName, PRSize size, PRFileMapProtect prot);
  PRStatus         PR_ProcessAttrSetInheritableFileMap( PRProcessAttr* attr, PRFileMap* fm, char* shmname);
  PRFileMap*       PR_GetInheritedFileMap(              char* shmname);
  PRStatus         PR_ExportFileMapAsString(            PRFileMap* fm, PRSize bufsize, char* buf);
  PRFileMap*       PR_ImportFileMapFromString(          char* fmstring);
  PRSem*           PR_OpenSemaphore(                    char* name, PRIntn flags, PRIntn mode, PRUintn value);
  PRStatus         PR_WaitSemaphore(                    PRSem* sem);
  PRStatus         PR_PostSemaphore(                    PRSem* sem);
  PRStatus         PR_CloseSemaphore(                   PRSem* sem);
  PRStatus         PR_DeleteSemaphore(                  char* name);
  PRSize           PR_GetRandomNoise(                   void* buf, PRSize size);
  void             PR_SetError(                         PRErrorCode errorCode, PRInt32 oserr);
  void             PR_SetErrorText(                     PRIntn textLength, char* text);
  PRErrorCode      PR_GetError(                         );
  PRInt32          PR_GetOSError(                       );
  PRInt32          PR_GetErrorTextLength(               );
  PRInt32          PR_GetErrorText(                     char* text);
  PRInt32          PR_AtomicIncrement(                  PRInt32* val);
  PRInt32          PR_AtomicDecrement(                  PRInt32* val);
  PRInt32          PR_AtomicSet(                        PRInt32* val, PRInt32 newval);
  PRInt32          PR_AtomicAdd(                        PRInt32* ptr, PRInt32 val);
  PRStack*         PR_CreateStack(                      char* stack_name);
  void             PR_StackPush(                        PRStack* stack, PRStackElem* stack_elem);
  PRStackElem*     PR_StackPop(                         PRStack* stack);
  PRStatus         PR_DestroyStack(                     PRStack* stack);
  PRProcessAttr*   PR_NewProcessAttr(                   );
  void             PR_ResetProcessAttr(                 PRProcessAttr* attr);
  void             PR_DestroyProcessAttr(               PRProcessAttr* attr);
  void             PR_ProcessAttrSetStdioRedirect(      PRProcessAttr* attr, PRInt32 stdioFd, PRFileDesc* redirectFd);
  PRStatus         PR_ProcessAttrSetCurrentDirectory(   PRProcess* attr, char* dir);
  void             PR_ProcessAttrSetInheritableFD(      PRProcess* attr, PRFileDesc* fd, char* name);
  PRProcess*       PR_CreateProcess(                    char* path, char** argv, char** envp, PRProcessAttr* attr);
  PRStatus         PR_DetachProcess(                    PRProcess* process);
  PRStatus         PR_WaitProcess(                      PRProcess* process, PRInt32* exitCode);
  PRStatus         PR_KillProcess(                      PRProcess* process);
]]
ffi.load( 'NSPR4.DLL' )
