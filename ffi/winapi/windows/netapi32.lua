require( 'ffi/winapi/headers/windows' )
require( 'ffi/winapi/headers/network' )
local ffi = require( 'ffi' )
ffi.cdef [[
  DWORD          DsAddressToSiteNames(              LPCTSTR ComputerName, DWORD EntryCount, PSOCKET_ADDRESS SocketAddresses, LPTSTR** SiteNames);
  DWORD          DsAddressToSiteNamesEx(            LPCTSTR ComputerName, DWORD EntryCount, PSOCKET_ADDRESS SocketAddresses, LPTSTR** SiteNames, LPTSTR** SubnetNames);
  DWORD          DsDeregisterDnsHostRecords(        LPTSTR ServerName, LPTSTR DnsDomainName, GUID* DomainGuid, GUID* DsaGuid, LPTSTR DnsHostName);
  DWORD          DsEnumerateDomainTrusts(           LPTSTR ServerName, ULONG Flags, PDS_DOMAIN_TRUSTS* Domains, PULONG DomainCount);
  void           DsGetDcCloseW(                     HANDLE GetDcContextHandle);
  DWORD          DsGetDcName(                       LPCTSTR ComputerName, LPCTSTR DomainName, GUID* DomainGuid, LPCTSTR SiteName, WINAPI_DsGetDcNameFlags Flags, PDOMAIN_CONTROLLER_INFO* DomainControllerInfo);
  DWORD          DsGetDcNext(                       HANDLE GetDcContextHandle, PULONG SockAddressCount, LPSOCKET_ADDRESS* SockAddresses, LPTSTR* DnsHostName);
  DWORD          DsGetDcOpen(                       LPCTSTR DnsName, ULONG OptionFlags, LPCTSTR SiteName, GUID* DomainGuid, LPCTSTR DnsForestName, ULONG DcFlags, PHANDLE RetGetDcContext);
  DWORD          DsGetDcSiteCoverage(               LPCTSTR ServerName, PULONG EntryCount, LPTSTR** SiteNames);
  DWORD          DsGetForestTrustInformationW(      LPCWSTR ServerName, LPCWSTR TrustedDomainName, DWORD Flags, PLSA_FOREST_TRUST_INFORMATION* ForestTrustInfo);
  DWORD          DsGetSiteName(                     LPCTSTR ComputerName, LPTSTR* SiteName);
  void           DsMergeForestTrustInformationW(    LPCWSTR DomainName, PLSA_FOREST_TRUST_INFORMATION NewForestTrustInfo, PLSA_FOREST_TRUST_INFORMATION OldForestTrustInfo, PLSA_FOREST_TRUST_INFORMATION* ForestTrustInfo);
  void           DsRoleFreeMemory(                  PVOID Buffer);
  DWORD          DsRoleGetPrimaryDomainInformation( LPCWSTR lpServer, DSROLE_PRIMARY_DOMAIN_INFO_LEVEL InfoLevel, PBYTE* Buffer);
  DWORD          DsValidateSubnetName(              LPCTSTR SubnetName);
  NET_API_STATUS NetAlertRaise(                     LPCWSTR AlertEventName, LPVOID Buffer, DWORD BufferSize);
  NET_API_STATUS NetAlertRaiseEx(                   LPCWSTR AlertEventName, LPVOID VariableInfo, DWORD VariableInfoSize, LPCWSTR ServiceName);
  NET_API_STATUS NetApiBufferAllocate(              DWORD ByteCount, LPVOID* Buffer);
  NET_API_STATUS NetApiBufferFree(                  LPVOID Buffer);
  NET_API_STATUS NetApiBufferReallocate(            LPVOID OldBuffer, DWORD NewByteCount, LPVOID* NewBuffer);
  NET_API_STATUS NetApiBufferSize(                  LPVOID Buffer, LPDWORD ByteCount);
  NET_API_STATUS NetAddAlternateComputerName(       LPCWSTR Server, LPCWSTR AlternateName, LPCWSTR DomainAccount, LPCWSTR DomainAccountPassword, ULONG Reserved);
  NET_API_STATUS NetEnumerateComputerNames(         LPCWSTR Server, NET_COMPUTER_NAME_TYPE NameType, ULONG Reserved, PDWORD EntryCount, LPWSTR** ComputerNames);
  NET_API_STATUS NetGetJoinableOUs(                 LPCWSTR lpServer, LPCWSTR lpDomain, LPCWSTR lpAccount, LPCWSTR lpPassword, DWORD* OUCount, LPWSTR** OUs);
  NET_API_STATUS NetGetJoinInformation(             LPCWSTR lpServer, LPWSTR* lpNameBuffer, PNETSETUP_JOIN_STATUS BufferType);
  NET_API_STATUS NetJoinDomain(                     LPCWSTR lpServer, LPCWSTR lpDomain, LPCWSTR lpAccountOU, LPCWSTR lpAccount, LPCWSTR lpPassword, DWORD fJoinOptions);
  NET_API_STATUS NetLogonSetServiceBits(            LPWSTR ServerName, DWORD ServiceBitsOfInterest, DWORD ServiceBits);
  NET_API_STATUS NetProvisionComputerAccount(       LPCWSTR lpDomain, LPCWSTR lpMachineName, LPCWSTR lpMachineAccountOU, LPCWSTR lpDcName, DWORD dwOptions, PBYTE pProvisionBinData, DWORD pdwProvisionBinDataSize, LPWSTR pProvisionTextData);
  NET_API_STATUS NetRemoveAlternateComputerName(    LPCWSTR Server, LPCWSTR AlternateName, LPCWSTR DomainAccount, LPCWSTR DomainAccountPassword, ULONG Reserved);
  NET_API_STATUS NetRenameMachineInDomain(          LPCWSTR lpServer, LPCWSTR lpNewMachineName, LPCWSTR lpAccount, LPCWSTR lpPassword, DWORD fRenameOptions);
  NET_API_STATUS NetRequestOfflineDomainJoin(       BYTE* pProvisionBinData, DWORD cbProvisionBinDataSize, DWORD dwOptions, LPCWSTR lpWindowsPath);
  NET_API_STATUS NetSetPrimaryComputerName(         LPCWSTR Server, LPCWSTR PrimaryName, LPCWSTR DomainAccount, LPCWSTR DomainAccountPassword, ULONG Reserved);
  NET_API_STATUS NetUnjoinDomain(                   LPCWSTR lpServer, LPCWSTR lpAccount, LPCWSTR lpPassword, DWORD fUnjoinOptions);
  NET_API_STATUS NetValidateName(                   LPCWSTR lpServer, LPCWSTR lpName, LPCWSTR lpAccount, LPCWSTR lpPassword, NETSETUP_NAME_TYPE NameType);
  NET_API_STATUS NetGetAnyDCName(                   LPCWSTR servername, LPCWSTR domainname, LPBYTE* bufptr);
  NET_API_STATUS NetGetDCName(                      LPCWSTR servername, LPCWSTR domainname, LPBYTE* bufptr);
  NET_API_STATUS NetGetDisplayInformationIndex(     LPCWSTR ServerName, DWORD Level, LPCWSTR Prefix, LPDWORD Index);
  NET_API_STATUS NetQueryDisplayInformation(        LPCWSTR ServerName, DWORD Level, DWORD Index, DWORD EntriesRequested, DWORD PreferredMaximumLength, LPDWORD ReturnedEntryCount, PVOID* SortedBuffer);
  NET_API_STATUS NetGroupAdd(                       LPCWSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetGroupAddUser(                   LPCWSTR servername, LPCWSTR GroupName, LPCWSTR username);
  NET_API_STATUS NetGroupDel(                       LPCWSTR servername, LPCWSTR groupname);
  NET_API_STATUS NetGroupDelUser(                   LPCWSTR servername, LPCWSTR GroupName, LPCWSTR Username);
  NET_API_STATUS NetGroupEnum(                      LPCWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD_PTR resume_handle);
  NET_API_STATUS NetGroupGetInfo(                   LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetGroupGetUsers(                  LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD_PTR ResumeHandle);
  NET_API_STATUS NetGroupSetInfo(                   LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetGroupSetUsers(                  LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, DWORD totalentries);
  NET_API_STATUS NetLocalGroupAdd(                  LPCWSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetLocalGroupAddMembers(           LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, DWORD totalentries);
  NET_API_STATUS NetLocalGroupDel(                  LPCWSTR servername, LPCWSTR groupname);
  NET_API_STATUS NetLocalGroupDelMembers(           LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, DWORD totalentries);
  NET_API_STATUS NetLocalGroupEnum(                 LPCWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD_PTR resumehandle);
  NET_API_STATUS NetLocalGroupGetInfo(              LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetLocalGroupGetMembers(           LPCWSTR servername, LPCWSTR localgroupname, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD_PTR resumehandle);
  NET_API_STATUS NetLocalGroupSetInfo(              LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetLocalGroupSetMembers(           LPCWSTR servername, LPCWSTR groupname, DWORD level, LPBYTE buf, DWORD totalentries);
  NET_API_STATUS NetMessageBufferSend(              LPCWSTR servername, LPCWSTR msgname, LPCWSTR fromname, LPBYTE buf, DWORD buflen);
  NET_API_STATUS NetMessageNameAdd(                 LPCWSTR servername, LPCWSTR msgname);
  NET_API_STATUS NetMessageNameDel(                 LPCWSTR servername, LPCWSTR msgname);
  NET_API_STATUS NetMessageNameEnum(                LPCWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle);
  NET_API_STATUS NetMessageNameGetInfo(             LPCWSTR servername, LPCWSTR msgname, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetRemoteComputerSupports(         LPCWSTR UncServerName, DWORD OptionsWanted, LPDWORD OptionsSupported);
  NET_API_STATUS NetRemoteTOD(                      LPCWSTR UncServerName, LPBYTE* BufferPtr);
  NET_API_STATUS NetScheduleJobAdd(                 LPCWSTR Servername, LPBYTE Buffer, LPDWORD JobId);
  NET_API_STATUS NetScheduleJobDel(                 LPCWSTR Servername, DWORD MinJobId, DWORD MaxJobId);
  NET_API_STATUS NetScheduleJobEnum(                LPCWSTR Servername, LPBYTE* PointerToBuffer, DWORD PreferredMaximumLength, LPDWORD EntriesRead, LPDWORD TotalEntries, LPDWORD ResumeHandle);
  NET_API_STATUS NetScheduleJobGetInfo(             LPCWSTR Servername, DWORD JobId, LPBYTE* PointerToBuffer);
  NET_API_STATUS NetServerDiskEnum(                 LPWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle);
  NET_API_STATUS NetServerEnum(                     LPCWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, WINAPI_ServerType servertype, LPCWSTR domain, LPDWORD resume_handle);
  NET_API_STATUS NetServerGetInfo(                  LPWSTR servername, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetServerSetInfo(                  LPWSTR servername, DWORD level, LPBYTE buf, LPDWORD ParmError);
  NET_API_STATUS NetServerComputerNameAdd(          LPWSTR ServerName, LPWSTR EmulatedDomainName, LPWSTR EmulatedServerName);
  NET_API_STATUS NetServerComputerNameDel(          LPWSTR ServerName, LPWSTR EmulatedServerName);
  NET_API_STATUS NetServerTransportAdd(             LPWSTR servername, DWORD level, LPBYTE bufptr);
  NET_API_STATUS NetServerTransportAddEx(           LPWSTR servername, DWORD level, LPBYTE bufptr);
  NET_API_STATUS NetServerTransportDel(             LPWSTR servername, DWORD level, LPBYTE bufptr);
  NET_API_STATUS NetServerTransportEnum(            LPWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resumehandle);
  NET_API_STATUS NetWkstaTransportEnum(             LPWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resumehandle);
  NET_API_STATUS NetUseAdd(                         LMSTR UncServerName, DWORD Level, LPBYTE Buf, LPDWORD ParmError);
  NET_API_STATUS NetUseDel(                         LMSTR UncServerName, LMSTR UseName, DWORD ForceCond);
  NET_API_STATUS NetUseEnum(                        LMSTR UncServerName, DWORD Level, LPBYTE* BufPtr, DWORD PreferedMaximumSize, LPDWORD EntriesRead, LPDWORD TotalEntries, LPDWORD ResumeHandle);
  NET_API_STATUS NetUseGetInfo(                     LMSTR UncServerName, LMSTR UseName, DWORD Level, LPBYTE* BufPtr);
  NET_API_STATUS NetUserAdd(                        LMSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetUserChangePassword(             LPCWSTR domainname, LPCWSTR username, LPCWSTR oldpassword, LPCWSTR newpassword);
  NET_API_STATUS NetUserDel(                        LPCWSTR servername, LPCWSTR username);
  NET_API_STATUS NetUserEnum(                       LPCWSTR servername, DWORD level, DWORD filter, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle);
  NET_API_STATUS NetUserGetGroups(                  LPCWSTR servername, LPCWSTR username, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries);
  NET_API_STATUS NetUserGetInfo(                    LPCWSTR servername, LPCWSTR username, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetUserGetLocalGroups(             LPCWSTR servername, LPCWSTR username, DWORD level, WINAPI_NetUserGetLocalGroupsFlags flags, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries);
  NET_API_STATUS NetUserSetGroups(                  LPCWSTR servername, LPCWSTR username, DWORD level, LPBYTE buf, DWORD num_entries);
  NET_API_STATUS NetUserSetInfo(                    LPCWSTR servername, LPCWSTR username, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetUserModalsGet(                  LPCWSTR servername, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetUserModalsSet(                  LPCWSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetValidatePasswordPolicyFree(     LPVOID* OutputArg);
  NET_API_STATUS NetValidatePasswordPolicy(         LPCWSTR ServerName, LPVOID Qualifier, NET_VALIDATE_PASSWORD_TYPE ValidationType, LPVOID InputArg, LPVOID OutputArg);
  NET_API_STATUS NetWkstaGetInfo(                   LPWSTR servername, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetWkstaSetInfo(                   LPWSTR servername, DWORD level, LPBYTE buffer, LPDWORD parm_err);
  NET_API_STATUS NetWkstaUserEnum(                  LPWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resumehandle);
  NET_API_STATUS NetWkstaUserGetInfo(               LPWSTR reserved, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetWkstaUserSetInfo(               LPWSTR reserved, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NTSTATUS       NetAddServiceAccount(              LPWSTR ServerName, LPWSTR AccountName, LPWSTR Reserved, DWORD Flags);
  NTSTATUS       NetEnumerateServiceAccounts(       LPWSTR ServerName, DWORD Flags, DWORD* AccountsCount, PZPWSTR* Accounts);
  NTSTATUS       NetIsServiceAccount(               LPWSTR ServerName, LPWSTR AccountName, BOOL* IsService);
  NTSTATUS       NetRemoveServiceAccount(           LPWSTR ServerName, LPWSTR AccountName, DWORD Flags);
  DWORD          DavAddConnection(                  HANDLE* ConnectionHandle, LPCWSTR RemoteName, LPCWSTR UserName, LPCWSTR Password, PBYTE ClientCert, DWORD CertSize);
  DWORD          DavDeleteConnection(               HANDLE ConnectionHandle);
  DWORD          DavFlushFile(                      HANDLE hFile);
  DWORD          DavGetExtendedError(               HANDLE hFile, DWORD* ExtError, LPWSTR ExtErrorString, DWORD* cChSize);
  DWORD          DavGetHTTPFromUNCPath(             LPCWSTR UncPath, LPWSTR HttpPath, LPDWORD lpSize);
  DWORD          DavGetUNCFromHTTPPath(             LPCWSTR HttpPath, LPWSTR UncPath, LPDWORD lpSize);
  NET_API_STATUS NetFileClose(                      LMSTR servername, DWORD fileid);
  NET_API_STATUS NetFileEnum(                       LMSTR servername, LMSTR basepath, LMSTR username, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, PDWORD_PTR resume_handle);
  NET_API_STATUS NetFileGetInfo(                    LMSTR servername, DWORD fileid, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetSessionDel(                     LPWSTR servername, LPWSTR UncClientName, LPWSTR username);
  NET_API_STATUS NetSessionEnum(                    LPWSTR servername, LPWSTR UncClientName, LPWSTR username, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle);
  NET_API_STATUS NetSessionGetInfo(                 LPWSTR servername, LPWSTR UncClientName, LPWSTR username, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetConnectionEnum(                 LMSTR servername, LMSTR qualifier, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle);
  NET_API_STATUS NetShareAdd(                       LPWSTR servername, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetShareCheck(                     LPWSTR servername, LPWSTR device, LPDWORD type);
  NET_API_STATUS NetShareDel(                       LMSTR servername, LMSTR netname, DWORD reserved);
  NET_API_STATUS NetShareDelEx(                     LMSTR servername, DWORD level, LPBYTE buf);
  NET_API_STATUS NetShareEnum(                      LPWSTR servername, DWORD level, LPBYTE* bufptr, DWORD prefmaxlen, LPDWORD entriesread, LPDWORD totalentries, LPDWORD resume_handle);
  NET_API_STATUS NetShareGetInfo(                   LPWSTR servername, LPWSTR netname, DWORD level, LPBYTE* bufptr);
  NET_API_STATUS NetShareSetInfo(                   LPWSTR servername, LPWSTR netname, DWORD level, LPBYTE buf, LPDWORD parm_err);
  NET_API_STATUS NetStatisticsGet(                  LPWSTR server, LPWSTR service, DWORD level, DWORD options, LPBYTE* bufptr);
]]
return ffi.load( 'Netapi32.dll' )
