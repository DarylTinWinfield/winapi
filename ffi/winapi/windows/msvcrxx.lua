require( 'ffi/winapi/headers/windows' )
local ffi = require( 'ffi' )
ffi.cdef [[
  typedef LPVOID _locale_t; //Alias
  typedef unsigned int unsigned; //Alias
  typedef long long int; //Alias
  typedef unsigned short wint_t; //Alias
  typedef LPVOID _CRT_ALLOC_HOOK; //Alias
  typedef LPVOID _CRT_DUMP_CLIENT; //Alias
  typedef LPVOID _CRT_REPORT_HOOK; //Alias
  typedef LPVOID _CRT_REPORT_HOOKW; //Alias
  typedef LPVOID _se_translator_function; //Alias
  typedef LPVOID terminate_function; //Alias
  typedef LPVOID unexpected_function; //Alias
  typedef INT_PTR intptr_t; //Alias
  typedef long __time32_t; //Alias
  typedef __int64 __time64_t; //Alias
  typedef WCHAR wchar; //Alias
  typedef LPVOID _PNH; //Alias
  typedef UINT_PTR uintptr_t; //Alias
  typedef LPVOID _onexit_t; //Alias
  typedef long clock_t; //Alias
  typedef LPVOID _PVFV; //Alias
  typedef int mbstate_t; //Alias
  typedef LPVOID _HANDLE_MATH_ERROR; //Alias
  typedef LPVOID _invalid_parameter_handler; //Alias
  typedef LPVOID PEXCEPTION_REGISTRATION; //Alias
  typedef unsigned int _dev_t; //Alias
  typedef unsigned short _ino_t; //Alias
  typedef long _off_t; //Alias
  typedef unsigned long _fsize_t; //Alias
  typedef __int64 fpos_t; //Alias
  typedef LPVOID _purecall_handler; //Alias
  typedef void* _HFILE; //Alias
  static const _HFILE _CRTDBG_INVALID_HFILE = -1;
  static const _HFILE _CRTDBG_HFILE_ERROR = -2;
  static const _HFILE _CRTDBG_FILE_STDOUT = -4;
  static const _HFILE _CRTDBG_FILE_STDERR = -5;
  static const _HFILE _CRTDBG_REPORT_FILE = -6;
  typedef int errno_t; //Alias
  static const errno_t EPERM = 1;
  static const errno_t ENOENT = 2;
  static const errno_t ESRCH = 3;
  static const errno_t EINTR = 4;
  static const errno_t EIO = 5;
  static const errno_t ENXIO = 6;
  static const errno_t E2BIG = 7;
  static const errno_t ENOEXEC = 8;
  static const errno_t EBADF = 9;
  static const errno_t ECHILD = 10;
  static const errno_t EAGAIN = 11;
  static const errno_t ENOMEM = 12;
  static const errno_t EACCES = 13;
  static const errno_t EFAULT = 14;
  static const errno_t EBUSY = 16;
  static const errno_t EEXIST = 17;
  static const errno_t EXDEV = 18;
  static const errno_t ENODEV = 19;
  static const errno_t ENOTDIR = 20;
  static const errno_t EISDIR = 21;
  static const errno_t EINVAL = 22;
  static const errno_t ENFILE = 23;
  static const errno_t EMFILE = 24;
  static const errno_t ENOTTY = 25;
  static const errno_t EFBIG = 27;
  static const errno_t ENOSPC = 28;
  static const errno_t ESPIPE = 29;
  static const errno_t EROFS = 30;
  static const errno_t EMLINK = 31;
  static const errno_t EPIPE = 32;
  static const errno_t EDOM = 33;
  static const errno_t ERANGE = 34;
  static const errno_t EDEADLK = 36;
  static const errno_t ENAMETOOLONG = 38;
  static const errno_t ENOLCK = 39;
  static const errno_t ENOSYS = 40;
  static const errno_t ENOTEMPTY = 41;
  static const errno_t EILSEQ = 42;
  static const errno_t STRUNCATE = 80;
  static const errno_t EADDRINUSE = 100;
  static const errno_t EADDRNOTAVAIL = 101;
  static const errno_t EAFNOSUPPORT = 102;
  static const errno_t EALREADY = 103;
  static const errno_t EBADMSG = 104;
  static const errno_t ECANCELED = 105;
  static const errno_t ECONNABORTED = 106;
  static const errno_t ECONNREFUSED = 107;
  static const errno_t ECONNRESET = 108;
  static const errno_t EDESTADDRREQ = 109;
  static const errno_t EHOSTUNREACH = 110;
  static const errno_t EIDRM = 111;
  static const errno_t EINPROGRESS = 112;
  static const errno_t EISCONN = 113;
  static const errno_t ELOOP = 114;
  static const errno_t EMSGSIZE = 115;
  static const errno_t ENETDOWN = 116;
  static const errno_t ENETRESET = 117;
  static const errno_t ENETUNREACH = 118;
  static const errno_t ENOBUFS = 119;
  static const errno_t ENODATA = 120;
  static const errno_t ENOLINK = 121;
  static const errno_t ENOMSG = 122;
  static const errno_t ENOPROTOOPT = 123;
  static const errno_t ENOSR = 124;
  static const errno_t ENOSTR = 125;
  static const errno_t ENOTCONN = 126;
  static const errno_t ENOTRECOVERABLE = 127;
  static const errno_t ENOTSOCK = 128;
  static const errno_t ENOTSUP = 129;
  static const errno_t EOPNOTSUPP = 130;
  static const errno_t EOTHER = 131;
  static const errno_t EOVERFLOW = 132;
  static const errno_t EOWNERDEAD = 133;
  static const errno_t EPROTO = 134;
  static const errno_t EPROTONOSUPPORT = 135;
  static const errno_t EPROTOTYPE = 136;
  static const errno_t ETIME = 137;
  static const errno_t ETIMEDOUT = 138;
  static const errno_t ETXTBSY = 139;
  static const errno_t EWOULDBLOCK = 140;
  typedef struct struct _diskfree_t {
    unsigned total_clusters;
    unsigned avail_clusters;
    unsigned sectors_per_cluster;
    unsigned bytes_per_sector;
  } struct _diskfree_t;
  typedef struct _startupinfo {
    int newmode;
  } _startupinfo;
  typedef UINT EXCEPTION_DISPOSITION; //Alias
  static const EXCEPTION_DISPOSITION ExceptionContinueExecution = 0;
  static const EXCEPTION_DISPOSITION ExceptionContinueSearch = 1;
  static const EXCEPTION_DISPOSITION ExceptionNestedException = 2;
  static const EXCEPTION_DISPOSITION ExceptionCollidedUnwind = 3;
  typedef int SIGNAL; //Alias
  static const SIGNAL SIGINT = 2;
  static const SIGNAL SIGILL = 4;
  static const SIGNAL SIGABRT_COMPAT = 6;
  static const SIGNAL SIGFPE = 8;
  static const SIGNAL SIGSEGV = 11;
  static const SIGNAL SIGTERM = 15;
  static const SIGNAL SIGBREAK = 21;
  static const SIGNAL SIGABRT = 22;
  typedef LPVOID SIGNAL_FUNC; //Alias
  static const SIGNAL_FUNC SIG_DFL = 0;
  static const SIGNAL_FUNC SIG_IGN = 1;
  static const SIGNAL_FUNC SIG_GET = 2;
  static const SIGNAL_FUNC SIG_SGE = 3;
  static const SIGNAL_FUNC SIG_ACK = 4;
  static const SIGNAL_FUNC SIG_DIE = 5;
  static const SIGNAL_FUNC SIG_ERR = -1;
  typedef int C_APP_TYPE; //Alias
  static const C_APP_TYPE _UNKNOWN_APP = 0;
  static const C_APP_TYPE _CONSOLE_APP = 1;
  static const C_APP_TYPE _GUI_APP = 2;
  typedef unsigned short ST_MODE; //Alias
  typedef struct struct _stat {
    _dev_t st_dev;
    _ino_t st_ino;
    ST_MODE st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    time_t st_atime;
    time_t st_mtime;
    time_t st_ctime;
  } struct _stat;
  typedef struct struct _stat32 {
    _dev_t st_dev;
    _ino_t st_ino;
    ST_MODE st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  } struct _stat32;
  typedef struct struct _stat64 {
    _dev_t st_dev;
    _ino_t st_ino;
    ST_MODE st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  } struct _stat64;
  typedef struct struct _stat32i64 {
    _dev_t st_dev;
    _ino_t st_ino;
    ST_MODE st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    __int64 st_size;
    __time32_t st_atime;
    __time32_t st_mtime;
    __time32_t st_ctime;
  } struct _stat32i64;
  typedef struct struct _stat64i32 {
    _dev_t st_dev;
    _ino_t st_ino;
    ST_MODE st_mode;
    short st_nlink;
    short st_uid;
    short st_gid;
    _dev_t st_rdev;
    _off_t st_size;
    __time64_t st_atime;
    __time64_t st_mtime;
    __time64_t st_ctime;
  } struct _stat64i32;
  typedef struct struct _complex {
    double x;
    double y;
  } struct _complex;
  typedef struct _CRT_DOUBLE {
    double x;
  } _CRT_DOUBLE;
  typedef struct _CRT_FLOAT {
    float f;
  } _CRT_FLOAT;
  typedef struct struct tm {
    int tm_sec;
    int tm_min;
    int tm_hour;
    int tm_mday;
    int tm_mon;
    int tm_year;
    int tm_wday;
    int tm_yday;
    int tm_isdst;
  } struct tm;
  typedef int HEAP_RESULT; //Alias
  static const HEAP_RESULT _HEAPEMPTY = -1;
  static const HEAP_RESULT _HEAPOK = -2;
  static const HEAP_RESULT _HEAPBADBEGIN = -3;
  static const HEAP_RESULT _HEAPBADNODE = -4;
  static const HEAP_RESULT _HEAPEND = -5;
  static const HEAP_RESULT _HEAPBADPTR = -6;
  typedef int HEAP_USE_FLAG; //Alias
  static const HEAP_USE_FLAG _FREEENTRY = 0;
  static const HEAP_USE_FLAG _USEDENTRY = 1;
  typedef struct _HEAPINFO {
    int* _pentry;
    size_t _size;
    HEAP_USE_FLAG _useflag;
  } _HEAPINFO;
  typedef struct struct _timeb {
    time_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  } struct _timeb;
  typedef struct struct __timeb32 {
    __time32_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  } struct __timeb32;
  typedef struct struct __timeb64 {
    __time64_t time;
    unsigned short millitm;
    short timezone;
    short dstflag;
  } struct __timeb64;
  typedef struct struct _utimbuf {
    time_t actime;
    time_t modtime;
  } struct _utimbuf;
  typedef struct struct __utimbuf32 {
    __time32_t actime;
    __time32_t modtime;
  } struct __utimbuf32;
  typedef struct struct __utimbuf64 {
    __time64_t actime;
    __time64_t modtime;
  } struct __utimbuf64;
  typedef unsigned FINDDATA_ATTRIB; //Alias
  typedef struct struct _finddata32_t {
    FINDDATA_ATTRIB attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    char name[260];
  } struct _finddata32_t;
  typedef struct struct _finddata32i64_t {
    FINDDATA_ATTRIB attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    __int64 size;
    char name[260];
  } struct _finddata32i64_t;
  typedef struct struct _finddata64i32_t {
    FINDDATA_ATTRIB attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    char name[260];
  } struct _finddata64i32_t;
  typedef struct struct __finddata64_t {
    FINDDATA_ATTRIB attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    __int64 size;
    char name[260];
  } struct __finddata64_t;
  typedef struct struct _wfinddata32_t {
    FINDDATA_ATTRIB attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    _fsize_t size;
    wchar_t name[260];
  } struct _wfinddata32_t;
  typedef struct struct _wfinddata32i64_t {
    FINDDATA_ATTRIB attrib;
    __time32_t time_create;
    __time32_t time_access;
    __time32_t time_write;
    __int64 size;
    wchar_t name[260];
  } struct _wfinddata32i64_t;
  typedef struct struct _wfinddata64i32_t {
    FINDDATA_ATTRIB attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    _fsize_t size;
    wchar_t name[260];
  } struct _wfinddata64i32_t;
  typedef struct struct _wfinddata64_t {
    FINDDATA_ATTRIB attrib;
    __time64_t time_create;
    __time64_t time_access;
    __time64_t time_write;
    __int64 size;
    wchar_t name[260];
  } struct _wfinddata64_t;
  typedef unsigned short wctype_t; //Alias
  typedef wctype_t _ctype_t; //Alias
  typedef int exception_type; //Alias
  static const exception_type _DOMAIN = 1;
  static const exception_type _SING = 2;
  static const exception_type _OVERFLOW = 3;
  static const exception_type _UNDERFLOW = 4;
  static const exception_type _TLOSS = 5;
  static const exception_type _PLOSS = 6;
  typedef struct struct _exception {
    exception_type type;
    char* name;
    double arg1;
    double arg2;
    double retval;
  } struct _exception;
  typedef struct div_t {
    int quot;
    int rem;
  } div_t;
  typedef struct ldiv_t {
    long quot;
    long rem;
  } ldiv_t;
# pragma pack( push, 4 )
  typedef struct _LDOUBLE {
    unsigned char[10] ld;
  } _LDOUBLE;
# pragma pack( pop )
  typedef UINT8 lconv_val; //Alias
  static const lconv_val CHAR_MAX = 127;
  typedef struct struct lconv {
    char* decimal_point;
    char* thousands_sep;
    char* grouping;
    char* int_curr_symbol;
    char* currency_symbol;
    char* mon_decimal_point;
    char* mon_thousands_sep;
    char* mon_grouping;
    char* positive_sign;
    char* negative_sign;
    lconv_val int_frac_digits;
    lconv_val frac_digits;
    lconv_val p_cs_precedes;
    lconv_val p_sep_by_space;
    lconv_val n_cs_precedes;
    lconv_val n_sep_by_space;
    lconv_val p_sign_posn;
    lconv_val n_sign_posn;
    wchar_t* _W_decimal_point;
    wchar_t* _W_thousands_sep;
    wchar_t* _W_int_curr_symbol;
    wchar_t* _W_currency_symbol;
    wchar_t* _W_mon_decimal_point;
    wchar_t* _W_mon_thousands_sep;
    wchar_t* _W_positive_sign;
    wchar_t* _W_negative_sign;
  } struct lconv;
  typedef int LOCK_NUM; //Alias
  static const LOCK_NUM _SIGNAL_LOCK = 0;
  static const LOCK_NUM _IOB_SCAN_LOCK = 1;
  static const LOCK_NUM _TMPNAM_LOCK = 2;
  static const LOCK_NUM _CONIO_LOCK = 3;
  static const LOCK_NUM _HEAP_LOCK = 4;
  static const LOCK_NUM _UNDNAME_LOCK = 5;
  static const LOCK_NUM _TIME_LOCK = 6;
  static const LOCK_NUM _ENV_LOCK = 7;
  static const LOCK_NUM _EXIT_LOCK1 = 8;
  static const LOCK_NUM _POPEN_LOCK = 9;
  static const LOCK_NUM _LOCKTAB_LOCK = 10;
  static const LOCK_NUM _OSFHND_LOCK = 11;
  static const LOCK_NUM _SETLOCALE_LOCK = 12;
  static const LOCK_NUM _MB_CP_LOCK = 13;
  static const LOCK_NUM _TYPEINFO_LOCK = 14;
  static const LOCK_NUM _DEBUG_LOCK = 15;
  static const LOCK_NUM _STREAM_LOCKS = 16;
  typedef unsigned int output_format; //Alias
  static const output_format _TWO_DIGIT_EXPONENT = 0x1;
  typedef LPVOID compare_function; //Alias
  typedef LPVOID compare_s_function; //Alias
  typedef unsigned int open_flag; //Alias
  typedef unsigned int share_flag; //Alias
  typedef unsigned int perm_mode; //Alias
  typedef int byte_type; //Alias
  static const byte_type _MBC_SINGLE = 0;
  static const byte_type _MBC_LEAD = 1;
  static const byte_type _MBC_TRAIL = 2;
  static const byte_type _MBC_ILLEGAL = -1;
  typedef int CRT_REPORT_TYPE; //Alias
  static const CRT_REPORT_TYPE _CRT_WARN = 0;
  static const CRT_REPORT_TYPE _CRT_ERROR = 1;
  static const CRT_REPORT_TYPE _CRT_ASSERT = 2;
  static const CRT_REPORT_TYPE _CRT_ERRCNT = 3;
  typedef unsigned int CRTDBG_FLAG; //Alias
  typedef int CRT_RPTHOOK_MODE; //Alias
  static const CRT_RPTHOOK_MODE _CRT_RPTHOOK_INSTALL = 0;
  static const CRT_RPTHOOK_MODE _CRT_RPTHOOK_REMOVE = 1;
  typedef unsigned int CRTDBG_MODE; //Alias
  typedef int DBG_BLOCK_TYPE; //Alias
  static const DBG_BLOCK_TYPE _FREE_BLOCK = 0;
  static const DBG_BLOCK_TYPE _NORMAL_BLOCK = 1;
  static const DBG_BLOCK_TYPE _CRT_BLOCK = 2;
  static const DBG_BLOCK_TYPE _IGNORE_BLOCK = 3;
  static const DBG_BLOCK_TYPE _CLIENT_BLOCK = 4;
  static const DBG_BLOCK_TYPE _MAX_BLOCKS = 5;
  typedef int set_error_mode; //Alias
  static const set_error_mode _OUT_TO_DEFAULT = 0;
  static const set_error_mode _OUT_TO_STDERR = 1;
  static const set_error_mode _OUT_TO_MSGBOX = 2;
  static const set_error_mode _REPORT_ERRMODE = 3;
  typedef int disposition_type; //Alias
  static const disposition_type DISPOSITION_DISMISS = 0;
  static const disposition_type DISPOSITION_CONTINUE_SEARCH = 1;
  static const disposition_type DISPOSITION_NESTED_EXCEPTION = 2;
  static const disposition_type DISPOSITION_COLLIDED_UNWIND = 3;
  typedef unsigned long xcpt_num; //Alias
  typedef int xcpt_action; //Alias
  static const xcpt_action EXCEPTION_EXECUTE_HANDLER = 1;
  static const xcpt_action EXCEPTION_CONTINUE_SEARCH = 0;
  static const xcpt_action EXCEPTION_CONTINUE_EXECUTION = -1;
  typedef int _LK_MODE; //Alias
  static const _LK_MODE _LK_UNLCK = 0;
  static const _LK_MODE _LK_LOCK = 1;
  static const _LK_MODE _LK_NBLCK = 2;
  static const _LK_MODE _LK_RLCK = 3;
  static const _LK_MODE _LK_NBRLCK = 4;
  typedef unsigned int _SW_FLOAT; //Alias
  typedef unsigned int control_bits; //Alias
  typedef unsigned int control_mask; //Alias
  static const control_mask _MCW_DN = 0x03000000;
  static const control_mask _MCW_EM = 0x0008001f;
  static const control_mask _MCW_RC = 0x00000300;
  static const control_mask _MCW_IC = 0x00040000;
  static const control_mask _MCW_PC = 0x00030000;
  typedef unsigned int _FPCLASS; //Alias
  typedef int file_translation_mode; //Alias
  static const file_translation_mode _O_TEXT = 0x4000;
  static const file_translation_mode _O_BINARY = 0x8000;
  static const file_translation_mode _O_WTEXT = 0x10000;
  static const file_translation_mode _O_U16TEXT = 0x20000;
  static const file_translation_mode _O_U8TEXT = 0x40000;
  typedef int RET_EOF; //Alias
  static const RET_EOF EOF = -1;
  typedef wint_t RET_WEOF; //Alias
  static const RET_WEOF WEOF = -1;
  typedef int RET_WEOF_INT; //Alias
  typedef int buffer_mode; //Alias
  static const buffer_mode _IOFBF = 0x0000;
  static const buffer_mode _IOLBF = 0x0040;
  static const buffer_mode _IONBF = 0x0004;
  typedef int locale_category; //Alias
  static const locale_category LC_ALL = 0;
  static const locale_category LC_COLLATE = 1;
  static const locale_category LC_CTYPE = 2;
  static const locale_category LC_MONETARY = 3;
  static const locale_category LC_NUMERIC = 4;
  static const locale_category LC_TIME = 5;
  typedef int thread_locale_type; //Alias
  static const thread_locale_type _ENABLE_PER_THREAD_LOCALE = 0x1;
  static const thread_locale_type _DISABLE_PER_THREAD_LOCALE = 0x2;
  typedef int _MB_CP_TYPE; //Alias
  static const _MB_CP_TYPE _MB_CP_SBCS = 0;
  static const _MB_CP_TYPE _MB_CP_OEM = -2;
  static const _MB_CP_TYPE _MB_CP_ANSI = -3;
  static const _MB_CP_TYPE _MB_CP_LOCALE = -4;
  typedef unsigned thread_initflag; //Alias
  static const thread_initflag CREATE_SUSPENDED = 0x00000004;
  typedef int spawn_mode; //Alias
  static const spawn_mode _P_WAIT = 0;
  static const spawn_mode _P_NOWAIT = 1;
  static const spawn_mode _P_OVERLAY = 2;
  static const spawn_mode _P_NOWAITO = 3;
  static const spawn_mode _P_DETACH = 4;
  typedef int _NLSCMPERROR; //Alias
  typedef size_t size_t_INT_MAX; //Alias
  static const size_t_INT_MAX INT_MAX = 0x7FFFFFFF;
  typedef unsigned int abort_flag; //Alias
  void*                      _memccpy(                                                         void* dest, void* src, int c, size_t count);
  void*                      memchr(                                                           void* buf, int c, size_t count);
  int                        memcmp(                                                           void* buf1, void* buf2, size_t count);
  void*                      memcpy(                                                           void* dest, void* src, size_t count);
  errno_t                    memcpy_s(                                                         void* dest, size_t numberOfElements, void* src, size_t count);
  errno_t                    wmemcpy_s(                                                        wchar_t* dest, size_t numberOfElements, wchar_t* src, size_t count);
  int                        _memicmp(                                                         void* buf1, void* buf2, size_t count);
  int                        _memicmp_l(                                                       void* buf1, void* buf2, size_t count, _locale_t locale);
  void*                      memmove(                                                          void* dest, void* src, size_t count);
  errno_t                    memmove_s(                                                        void* dest, size_t numberOfElements, void* src, size_t count);
  errno_t                    wmemmove_s(                                                       wchar_t* dest, size_t numberOfElements, wchar_t* src, size_t count);
  void*                      memset(                                                           void* dest, int c, size_t count);
  void                       _swab(                                                            char* src, char* dest, int n);
  int                        isleadbyte(                                                       int c);
  int                        _isleadbyte_l(                                                    int c, _locale_t locale);
  int                        _ismbbalnum(                                                      unsigned int c);
  int                        _ismbbalnum_l(                                                    unsigned int c);
  int                        _ismbbalpha(                                                      unsigned int c);
  int                        _ismbbalpha_l(                                                    unsigned int c);
  int                        _ismbbgraph(                                                      unsigned int c);
  int                        _ismbbgraph_l(                                                    unsigned int c, _locale_t locale);
  int                        _ismbbkalnum(                                                     unsigned int c);
  int                        _ismbbkalnum_l(                                                   unsigned int c, _locale_t locale);
  int                        _ismbbkana(                                                       unsigned int c);
  int                        _ismbbkana_l(                                                     unsigned int c, _locale_t locale);
  int                        _ismbbkprint(                                                     unsigned int c);
  int                        _ismbbkprint_l(                                                   unsigned int c, _locale_t locale);
  int                        _ismbbkpunct(                                                     unsigned int c);
  int                        _ismbbkpunct_l(                                                   unsigned int c, _locale_t locale);
  int                        _ismbblead(                                                       unsigned int c);
  int                        _ismbblead_l(                                                     unsigned int c, _locale_t locale);
  int                        _ismbbprint(                                                      unsigned int c);
  int                        _ismbbprint_l(                                                    unsigned int c, _locale_t locale);
  int                        _ismbbpunct(                                                      unsigned int c);
  int                        _ismbbpunct_l(                                                    unsigned int c, _locale_t locale);
  int                        _ismbbtrail(                                                      unsigned int c);
  int                        _ismbbtrail_l(                                                    unsigned int c, _locale_t locale);
  int                        _ismbslead(                                                       unsigned char* str, unsigned char* current);
  int                        _ismbstrail(                                                      unsigned char* str, unsigned char* current);
  int                        _ismbslead_l(                                                     unsigned char* str, unsigned char* current, _locale_t locale);
  int                        _ismbstrail_l(                                                    unsigned char* str, unsigned char* current, _locale_t locale);
  byte_type                  _mbbtype(                                                         unsigned char c, int type);
  byte_type                  _mbbtype_l(                                                       unsigned char c, int type, _locale_t locale);
  byte_type                  _mbsbtype(                                                        unsigned char* mbstr, size_t count);
  byte_type                  _mbsbtype_l(                                                      unsigned char* mbstr, size_t count, _locale_t locale);
  int                        isalnum(                                                          int c);
  int                        iswalnum(                                                         wint_t c);
  int                        _isalnum_l(                                                       int c, _locale_t locale);
  int                        _iswalnum_l(                                                      wint_t c, _locale_t locale);
  int                        _ismbcalnum(                                                      unsigned int c);
  int                        _ismbcalnum_l(                                                    unsigned int c, _locale_t locale);
  int                        _ismbcalpha(                                                      unsigned int c);
  int                        _ismbcalpha_l(                                                    unsigned int c, _locale_t locale);
  int                        _ismbcdigit(                                                      unsigned int c);
  int                        _ismbcdigit_l(                                                    unsigned int c, _locale_t locale);
  int                        isalpha(                                                          int c);
  int                        iswalpha(                                                         wint_t c);
  int                        _isalpha_l(                                                       int c, _locale_t locale);
  int                        _iswalpha_l(                                                      wint_t c, _locale_t locale);
  int                        __isascii(                                                        int c);
  int                        iswascii(                                                         wint_t c);
  int                        iscntrl(                                                          int c);
  int                        iswcntrl(                                                         wint_t c);
  int                        _iscntrl_l(                                                       int c, _locale_t locale);
  int                        _iswcntrl_l(                                                      wint_t c, _locale_t locale);
  int                        __iscsym(                                                         int c);
  int                        __iswcsym(                                                        wint_t c);
  int                        __iscsymf(                                                        int c);
  int                        __iswcsymf(                                                       wint_t c);
  int                        _iswcsym_l(                                                       wint_t c, _locale_t locale);
  int                        _iswcsymf_l(                                                      wint_t c, _locale_t locale);
  int                        isdigit(                                                          int c);
  int                        iswdigit(                                                         wint_t c);
  int                        _isdigit_l(                                                       int c, _locale_t locale);
  int                        _iswdigit_l(                                                      wint_t c, _locale_t locale);
  int                        isgraph(                                                          int c);
  int                        iswgraph(                                                         wint_t c);
  int                        _isgraph_l(                                                       int c, _locale_t locale);
  int                        _iswgraph_l(                                                      wint_t c, _locale_t locale);
  int                        _ismbcgraph(                                                      unsigned int c);
  int                        _ismbcgraph_l(                                                    unsigned int c, _locale_t locale);
  int                        _ismbcprint(                                                      unsigned int c);
  int                        _ismbcprint_l(                                                    unsigned int c, _locale_t locale);
  int                        _ismbcpunct(                                                      unsigned int c);
  int                        _ismbcpunct_l(                                                    unsigned int c, _locale_t locale);
  int                        _ismbcspace(                                                      unsigned int c);
  int                        _ismbcspace_l(                                                    unsigned int c, _locale_t locale);
  int                        islower(                                                          int c);
  int                        iswlower(                                                         wint_t c);
  int                        _islower_l(                                                       int c, _locale_t locale);
  int                        _iswlower_l(                                                      wint_t c, _locale_t locale);
  int                        _ismbclower(                                                      unsigned int c);
  int                        _ismbclower_l(                                                    unsigned int c, _locale_t locale);
  int                        _ismbcupper(                                                      unsigned int c);
  int                        _ismbcupper_l(                                                    unsigned int c, _locale_t locale);
  int                        _ismbchira(                                                       unsigned int c);
  int                        _ismbchira_l(                                                     unsigned int c, _locale_t locale);
  int                        _ismbckata(                                                       unsigned int c);
  int                        _ismbckata_l(                                                     unsigned int c, _locale_t locale);
  int                        _ismbclegal(                                                      unsigned int c);
  int                        _ismbclegal_l(                                                    unsigned int c, _locale_t locale);
  int                        _ismbcsymbol(                                                     unsigned int c);
  int                        _ismbcsymbol_l(                                                   unsigned int c, _locale_t locale);
  int                        _ismbcl0(                                                         unsigned int c);
  int                        _ismbcl0_l(                                                       unsigned int c, _locale_t locale);
  int                        _ismbcl1(                                                         unsigned int c);
  int                        _ismbcl1_l(                                                       unsigned int c, _locale_t locale);
  int                        _ismbcl2(                                                         unsigned int c);
  int                        _ismbcl2_l(                                                       unsigned int c, _locale_t locale);
  int                        isprint(                                                          int c);
  int                        iswprint(                                                         wint_t c);
  int                        _isprint_l(                                                       int c, _locale_t locale);
  int                        _iswprint_l(                                                      wint_t c, _locale_t locale);
  int                        ispunct(                                                          int c);
  int                        iswpunct(                                                         wint_t c);
  int                        _ispunct_l(                                                       int c, _locale_t locale);
  int                        _iswpunct_l(                                                      wint_t c, _locale_t locale);
  int                        isspace(                                                          int c);
  int                        iswspace(                                                         wint_t c);
  int                        _isspace_l(                                                       int c, _locale_t locale);
  int                        _iswspace_l(                                                      wint_t c, _locale_t locale);
  int                        isupper(                                                          int c);
  int                        _isupper_l(                                                       int c, _locale_t locale);
  int                        iswupper(                                                         wint_t c);
  int                        _iswupper_l(                                                      wint_t c, _locale_t locale);
  int                        _isctype(                                                         int c, _ctype_t mask);
  int                        _isctype_l(                                                       int c, _ctype_t mask, _locale_t locale);
  int                        iswctype(                                                         wint_t c, wctype_t mask);
  int                        is_wctype(                                                        wint_t c, wctype_t mask);
  int                        _iswctype_l(                                                      wint_t c, wctype_t mask, _locale_t locale);
  int                        isxdigit(                                                         int c);
  int                        iswxdigit(                                                        wint_t c);
  int                        _isxdigit_l(                                                      int c, _locale_t locale);
  int                        _iswxdigit_l(                                                     wint_t c, _locale_t locale);
  wctype_t                   _wctype(                                                          char* property);
  unsigned short*            __pctype_func(                                                    );
  void                       _aligned_free(                                                    void* memblock);
  void                       _aligned_free_dbg(                                                void* memblock);
  void*                      _aligned_malloc(                                                  size_t size, size_t alignment);
  void*                      _aligned_malloc_dbg(                                              size_t size, size_t alignment, char* filename, int linenumber);
  size_t                     _aligned_msize(                                                   void* memblock, size_t alignment, size_t offset);
  size_t                     _aligned_msize_dbg(                                               void* memblock, size_t alignment, size_t offset);
  void*                      _aligned_offset_malloc(                                           size_t size, size_t alignment, size_t offset);
  void*                      _aligned_offset_malloc_dbg(                                       size_t size, size_t alignment, size_t offset, char* filename, int linenumber);
  void*                      _aligned_offset_realloc(                                          void* memblock, size_t size, size_t alignment, size_t offset);
  void*                      _aligned_offset_realloc_dbg(                                      void* memblock, size_t size, size_t alignment, size_t offset, char* filename, int linenumber);
  void*                      _aligned_offset_recalloc(                                         void* memblock, size_t num, size_t size, size_t alignment, size_t offset);
  void*                      _aligned_offset_recalloc_dbg(                                     void* memblock, size_t num, size_t size, size_t alignment, size_t offset, char* filename, int linenumber);
  void*                      _aligned_realloc(                                                 void* memblock, size_t size, size_t alignment);
  void*                      _aligned_realloc_dbg(                                             void* memblock, size_t size, size_t alignment, char* filename, int linenumber);
  void*                      _aligned_recalloc(                                                void* memblock, size_t num, size_t size, size_t alignment);
  void*                      _aligned_recalloc_dbg(                                            void* memblock, size_t num, size_t size, size_t alignment, char* filename, int linenumber);
  int                        abs(                                                              int n);
  __int64                    _abs64(                                                           __int64 n);
  double                     _wtof(                                                            wchar_t* str);
  double                     _wtof_l(                                                          wchar_t* str, _locale_t locale);
  int                        _wtoi(                                                            wchar_t* str);
  int                        _wtoi_l(                                                          wchar_t* str, _locale_t locale);
  long                       _wtol(                                                            wchar_t* str);
  long                       _wtol_l(                                                          wchar_t* str, _locale_t locale);
  char*                      _itoa(                                                            int value, char* str, int radix);
  char*                      _i64toa(                                                          __int64 value, char* str, int radix);
  char*                      _ui64toa(                                                         unsigned __int64 value, char* str, int radix);
  wchar_t*                   _itow(                                                            int value, wchar_t* str, int radix);
  wchar_t*                   _i64tow(                                                          __int64 value, wchar_t* str, int radix);
  wchar_t*                   _ui64tow(                                                         unsigned __int64 value, wchar_t* str, int radix);
  errno_t                    _itoa_s(                                                          int value, char* buffer, size_t sizeInCharacters, int radix);
  errno_t                    _i64toa_s(                                                        __int64 value, char* buffer, size_t sizeInCharacters, int radix);
  errno_t                    _ui64toa_s(                                                       unsigned __int64 value, char* buffer, size_t sizeInCharacters, int radix);
  errno_t                    _itow_s(                                                          int value, wchar_t* buffer, size_t sizeInCharacters, int radix);
  errno_t                    _i64tow_s(                                                        __int64 value, wchar_t* buffer, size_t sizeInCharacters, int radix);
  errno_t                    _ui64tow_s(                                                       unsigned __int64 value, wchar_t* buffer, size_t sizeInCharacters, int radix);
  long                       labs(                                                             long n);
  char*                      _ltoa(                                                            long value, char* str, int radix);
  wchar_t*                   _ltow(                                                            long value, wchar_t* str, int radix);
  errno_t                    _ltoa_s(                                                          long value, char* str, size_t sizeOfstr, int radix);
  errno_t                    _ltow_s(                                                          long value, wchar_t* str, size_t sizeOfstr, int radix);
  unsigned int               _mbbtombc(                                                        unsigned int c);
  unsigned int               _mbbtombc_l(                                                      unsigned int c, _locale_t locale);
  unsigned int               _mbcjistojms(                                                     unsigned int c);
  unsigned int               _mbcjistojms_l(                                                   unsigned int c, _locale_t locale);
  unsigned int               _mbcjmstojis(                                                     unsigned int c);
  unsigned int               _mbcjmstojis_l(                                                   unsigned int c, _locale_t locale);
  unsigned int               _mbctohira(                                                       unsigned int c);
  unsigned int               _mbctohira_l(                                                     unsigned int c, _locale_t locale);
  unsigned int               _mbctokata(                                                       unsigned int c);
  unsigned int               _mbctokata_l(                                                     unsigned int c, _locale_t locale);
  unsigned int               _mbctombb(                                                        unsigned int c);
  unsigned int               _mbctombb_l(                                                      unsigned int c, _locale_t locale);
  int                        __toascii(                                                        int c);
  int                        tolower(                                                          int c);
  int                        _tolower(                                                         int c);
  int                        towlower(                                                         wint_t c);
  int                        _tolower_l(                                                       int c, _locale_t locale);
  int                        _towlower_l(                                                      wint_t c, _locale_t locale);
  int                        toupper(                                                          int c);
  int                        _toupper(                                                         int c);
  int                        towupper(                                                         wint_t c);
  int                        _toupper_l(                                                       int c, _locale_t locale);
  int                        _towupper_l(                                                      wint_t c, _locale_t locale);
  char*                      _ultoa(                                                           unsigned long value, char* str, int radix);
  wchar_t*                   _ultow(                                                           unsigned long value, wchar_t* str, int radix);
  errno_t                    _ultoa_s(                                                         unsigned long value, char* str, size_t sizeOfstr, int radix);
  errno_t                    _ultow_s(                                                         unsigned long value, wchar_t* str, size_t sizeOfstr, int radix);
  char*                      _fcvt(                                                            double value, int count, int* dec, int* sign);
  errno_t                    _fcvt_s(                                                          char* buffer, size_t sizeInBytes, double value, int count, int* dec, int* sign);
  char*                      _gcvt(                                                            double value, int digits, char* buffer);
  errno_t                    _gcvt_s(                                                          char* buffer, size_t sizeInBytes, double value, int digits);
  long                       _atol_l(                                                          char* str, _locale_t locale);
  int                        _atoi_l(                                                          char* str, _locale_t locale);
  double                     atof(                                                             char* str);
  double                     _atof_l(                                                          char* str, _locale_t locale);
  __int64                    _atoi64_l(                                                        char* str, _locale_t locale);
  int                        atoi(                                                             char* str);
  __int64                    _atoi64(                                                          char* str);
  long                       atol(                                                             char* str);
  int                        _atodbl(                                                          _CRT_DOUBLE* value, char* str);
  int                        _atodbl_l(                                                        _CRT_DOUBLE* value, char* str, _locale_t locale);
  int                        _atoldbl(                                                         _LDOUBLE* value, char* str);
  int                        _atoldbl_l(                                                       _LDOUBLE* value, char* str, _locale_t locale);
  int                        _atoflt(                                                          _CRT_FLOAT* value, char* str);
  int                        _atoflt_l(                                                        _CRT_FLOAT* value, char* str, _locale_t locale);
  __int64                    _wtoi64(                                                          wchar_t* str);
  __int64                    _wtoi64_l(                                                        wchar_t* str, _locale_t locale);
  unsigned long              strtoul(                                                          char* nptr, char** endptr, int base);
  unsigned long              _strtoul_l(                                                       char* nptr, char** endptr, int base, _locale_t locale);
  unsigned long              wcstoul(                                                          wchar_t* nptr, wchar_t** endptr, int base);
  unsigned long              _wcstoul_l(                                                       wchar_t* nptr, wchar_t** endptr, int base, _locale_t locale);
  double                     strtod(                                                           char* nptr, char** endptr);
  double                     _strtod_l(                                                        char* nptr, char** endptr, _locale_t locale);
  double                     wcstod(                                                           wchar_t* nptr, wchar_t** endptr);
  double                     _wcstod_l(                                                        wchar_t* nptr, wchar_t** endptr, _locale_t locale);
  long                       strtol(                                                           char* nptr, char** endptr, int base);
  long                       wcstol(                                                           wchar_t* nptr, wchar_t** endptr, int base);
  long                       _strtol_l(                                                        char* nptr, char** endptr, int base, _locale_t locale);
  long                       _wcstol_l(                                                        wchar_t* nptr, wchar_t** endptr, int base, _locale_t locale);
  int                        mbtowc(                                                           wchar_t* wchar, char* mbchar, size_t count);
  int                        _mbtowc_l(                                                        wchar_t* wchar, char* mbchar, size_t count, _locale_t locale);
  size_t                     mbstowcs(                                                         wchar_t* wcstr, char* mbstr, size_t count);
  size_t                     _mbstowcs_l(                                                      wchar_t* wcstr, char* mbstr, size_t count, _locale_t locale);
  errno_t                    mbstowcs_s(                                                       size_t* pReturnValue, wchar_t* wcstr, size_t sizeInWords, char* mbstr, size_t count);
  errno_t                    _mbstowcs_s_l(                                                    size_t* pReturnValue, wchar_t* wcstr, size_t sizeInWords, char* mbstr, size_t count, _locale_t locale);
  size_t                     wcstombs(                                                         char* mbstr, wchar_t* wcstr, size_t count);
  size_t                     _wcstombs_l(                                                      char* mbstr, wchar_t* wcstr, size_t count, _locale_t locale);
  errno_t                    wcstombs_s(                                                       size_t* pReturnValue, char* mbstr, size_t sizeInBytes, wchar_t* wcstr, size_t count);
  errno_t                    _wcstombs_s_l(                                                    size_t* pReturnValue, char* mbstr, size_t sizeInBytes, wchar_t* wcstr, size_t count, _locale_t locale);
  int                        wctomb(                                                           char* mbchar, wchar_t wchar);
  int                        _wctomb_l(                                                        char* mbchar, wchar_t wchar, _locale_t locale);
  errno_t                    wctomb_s(                                                         int* pRetValue, char* mbchar, size_t sizeInBytes, wchar_t wchar);
  errno_t                    _wctomb_s_l(                                                      int* pRetValue, char* mbchar, size_t sizeInBytes, wchar_t wchar, _locale_t locale);
  unsigned int               _mbctoupper_l(                                                    unsigned int c, _locale_t locale);
  unsigned int               _mbctoupper(                                                      unsigned int c);
  unsigned int               _mbctolower(                                                      unsigned int c);
  unsigned int               _mbctolower_l(                                                    unsigned int c, _locale_t locale);
  char*                      _ecvt(                                                            double value, int count, int* dec, int* sign);
  errno_t                    _ecvt_s(                                                          char* _Buffer, size_t _SizeInBytes, double _Value, int _Count, int* _Dec, int* _Sign);
  size_t                     mbrtowc(                                                          wchar_t* wchar, char* mbchar, size_t count, mbstate_t mbstate);
  size_t                     mbsrtowcs(                                                        wchar_t* wcstr, char** mbstr, size_t count, mbstate_t* mbstate);
  errno_t                    mbsrtowcs_s(                                                      size_t* pReturnValue, wchar_t* wcstr, size_t sizeInWords, char** mbstr, size_t count, mbstate_t* mbstate);
  __int64                    _strtoi64(                                                        char* nptr, char** endptr, int base);
  __int64                    _wcstoi64(                                                        wchar_t* nptr, wchar_t** endptr, int base);
  __int64                    _strtoi64_l(                                                      char* nptr, char** endptr, int base, _locale_t locale);
  __int64                    _wcstoi64_l(                                                      wchar_t* nptr, wchar_t** endptr, int base, _locale_t locale);
  unsigned __int64           _strtoui64(                                                       char* nptr, char** endptr, int base);
  unsigned __int64           _wcstoui64(                                                       wchar_t* nptr, wchar_t** endptr, int base);
  unsigned __int64           _strtoui64_l(                                                     char* nptr, char** endptr, int base, _locale_t locale);
  unsigned __int64           _wcstoui64_l(                                                     wchar_t* nptr, wchar_t** endptr, int base, _locale_t locale);
  size_t                     wcrtomb(                                                          char* mbchar, wchar_t wchar, mbstate_t* mbstate);
  errno_t                    wcrtomb_s(                                                        size_t* pReturnValue, char* mbchar, size_t sizeOfmbchar, wchar_t* wchar, mbstate_t* mbstate);
  size_t                     wcsrtombs(                                                        char* mbstr, wchar_t** wcstr, size_t count, mbstate_t* mbstate);
  errno_t                    wcsrtombs_s(                                                      size_t* pReturnValue, char* mbstr, size_t sizeInBytes, wchar_t** wcstr, size_t count, mbstate_t* mbstate);
  int                        wctob(                                                            wint_t wchar);
  unsigned short             _byteswap_ushort(                                                 unsigned short val);
  unsigned long              _byteswap_ulong(                                                  unsigned long val);
  unsigned __int64           _byteswap_uint64(                                                 unsigned __int64 val);
  wint_t                     btowc(                                                            int c);
  int                        _CrtCheckMemory(                                                  );
  void                       _CrtDbgBreak(                                                     );
  int                        _CrtDbgReport(                                                    CRT_REPORT_TYPE reportType, char* filename, int linenumber, char* moduleName, char* format);
  int                        _CrtDbgReportW(                                                   CRT_REPORT_TYPE reportType, wchar_t* filename, int linenumber, wchar_t* moduleName, wchar_t* format);
  void                       _CrtDoForAllClientObjects(                                        void* pfn, void* context);
  int                        _CrtDumpMemoryLeaks(                                              );
  int                        _CrtIsMemoryBlock(                                                void* userData, unsigned int size, long* requestNumber, char** filename, int* linenumber);
  int                        _CrtIsValidHeapPointer(                                           void* userData);
  int                        _CrtIsValidPointer(                                               void* address, unsigned int size, int access);
  void                       _CrtMemCheckpoint(                                                _CrtMemState* state);
  int                        _CrtMemDifference(                                                _CrtMemState* stateDiff, _CrtMemState* oldState, _CrtMemState* newState);
  void                       _CrtMemDumpAllObjectsSince(                                       _CrtMemState* state);
  void                       _CrtMemDumpStatistics(                                            _CrtMemState* state);
  int                        _CrtReportBlockType(                                              void* pBlock);
  _CRT_ALLOC_HOOK            _CrtSetAllocHook(                                                 _CRT_ALLOC_HOOK allocHook);
  long                       _CrtSetBreakAlloc(                                                long lBreakAlloc);
  int                        _CrtSetDbgFlag(                                                   CRTDBG_FLAG newFlag);
  _CRT_DUMP_CLIENT           _CrtSetDumpClient(                                                _CRT_DUMP_CLIENT dumpClient);
  _HFILE                     _CrtSetReportFile(                                                CRT_REPORT_TYPE reportType, _HFILE reportFile);
  _CRT_REPORT_HOOK           _CrtSetReportHook(                                                _CRT_REPORT_HOOK reportHook);
  int                        _CrtSetReportHook2(                                               CRT_RPTHOOK_MODE mode, _CRT_REPORT_HOOK pfnNewHook);
  int                        _CrtSetReportHookW2(                                              CRT_RPTHOOK_MODE mode, _CRT_REPORT_HOOKW pfnNewHook);
  CRTDBG_MODE                _CrtSetReportMode(                                                CRT_REPORT_TYPE reportType, CRTDBG_MODE reportMode);
  _CRT_ALLOC_HOOK            _CrtGetAllocHook(                                                 );
  _CRT_DUMP_CLIENT           _CrtGetDumpClient(                                                );
  _CRT_REPORT_HOOK           _CrtGetReportHook(                                                );
  size_t                     _CrtSetDebugFillThreshold(                                        size_t _NewThreshold);
  int                        _chdir(                                                           char* dirname);
  int                        _wchdir(                                                          wchar_t* dirname);
  int                        _chdrive(                                                         int drive);
  char*                      _getcwd(                                                          char* buffer, int maxlen);
  char*                      _getcwd_dbg(                                                      char* buffer, int maxlen, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  wchar_t*                   _wgetcwd(                                                         wchar_t* buffer, int maxlen);
  wchar_t*                   _wgetcwd_dbg(                                                     wchar_t* buffer, int maxlen, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  char*                      _getdcwd(                                                         int drive, char* buffer, int maxlen);
  char*                      _getdcwd_dbg(                                                     int drive, char* buffer, int maxlen, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  wchar_t*                   _wgetdcwd(                                                        int drive, wchar_t* buffer, int maxlen);
  wchar_t*                   _wgetdcwd_dbg(                                                    int drive, wchar_t* buffer, int maxlen, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  errno_t                    _getdiskfree(                                                     unsigned drive, struct _diskfree_t* driveinfo);
  int                        _getdrive(                                                        );
  unsigned long              _getdrives(                                                       );
  int                        _mkdir(                                                           char* dirname);
  int                        _wmkdir(                                                          wchar_t* dirname);
  int                        _rmdir(                                                           char* dirname);
  int                        _wrmdir(                                                          wchar_t* dirname);
  void                       _searchenv(                                                       char* filename, char* varname, char* pathname);
  void                       _wsearchenv(                                                      wchar_t* filename, wchar_t* varname, wchar_t* pathname);
  errno_t                    _searchenv_s(                                                     char* filename, char* varname, char* pathname, size_t numberOfElements);
  errno_t                    _wsearchenv_s(                                                    wchar_t* filename, wchar_t* varname, wchar_t* pathname, size_t numberOfElements);
  set_error_mode             _set_error_mode(                                                  set_error_mode modeval);
  set_error_mode             _seterrormode(                                                    set_error_mode mode);
  void                       _purecall(                                                        );
  _purecall_handler          _set_purecall_handler(                                            _purecall_handler function);
  errno_t                    _get_doserrno(                                                    int* pValue);
  errno_t                    _get_errno(                                                       int* pValue);
  errno_t                    _set_doserrno(                                                    int value);
  errno_t                    _set_errno(                                                       int value);
  abort_flag                 _set_abort_behavior(                                              abort_flag flags, abort_flag mask);
  _invalid_parameter_handler _get_invalid_parameter_handler(                                   );
  _invalid_parameter_handler _set_invalid_parameter_handler(                                   _invalid_parameter_handler pNew);
  void                       _amsg_exit(                                                       int rterrnum);
  _se_translator_function    ?_set_se_translator@@YAP6AXIPAU_EXCEPTION_POINTERS@@@ZP6AXI0@Z@Z( _se_translator_function seTransFunction);
  terminate_function         _get_terminate(                                                   );
  terminate_function         ?set_terminate@@YAP6AXXZP6AXXZ@Z(                                 terminate_function termFunction);
  unexpected_function        _get_unexpected(                                                  );
  unexpected_function        ?set_unexpected@@YAP6AXXZP6AXXZ@Z(                                unexpected_function unexpFunction);
  void                       ?terminate@@YAXXZ(                                                );
  void                       ?unexpected@@YAXXZ(                                               );
  EXCEPTION_DISPOSITION      __CxxFrameHandler(                                                EHExceptionRecord* pExcept, EHRegistrationNode* pRN, void* pContext, DispatcherContext* pDC);
  disposition_type           _except_handler3(                                                 PEXCEPTION_RECORD exception_record, PEXCEPTION_REGISTRATION registration, PCONTEXT context, PEXCEPTION_REGISTRATION dispatcher);
  bool                       __uncaught_exception(                                             );
  xcpt_action                _XcptFilter(                                                      xcpt_num xcptnum, PEXCEPTION_POINTERS pxcptinfoptrs);
  int                        _resetstkoflw(                                                    );
  int                        _abnormal_termination(                                            );
  int                        _chsize(                                                          int fd, long size);
  errno_t                    _chsize_s(                                                        int fd, __int64 size);
  long                       _filelength(                                                      int fd);
  __int64                    _filelengthi64(                                                   int fd);
  int                        _fstat(                                                           int fd, struct _stat* buffer);
  int                        _fstat32(                                                         int fd, struct _stat32* buffer);
  int                        _fstat64(                                                         int fd, struct _stat64* buffer);
  int                        _fstati64(                                                        int fd, struct _stati64* buffer);
  int                        _fstat32i64(                                                      int fd, struct _stat32i64* buffer);
  int                        _fstat64i32(                                                      int fd, struct _stat64i32* buffer);
  intptr_t                   _get_osfhandle(                                                   int fd);
  int                        _isatty(                                                          int fd);
  int                        _locking(                                                         int fd, _LK_MODE mode, long nbytes);
  int                        _open_osfhandle(                                                  intptr_t osfhandle, int flags);
  int                        _access(                                                          char* path, int mode);
  int                        _waccess(                                                         wchar_t* path, int mode);
  errno_t                    _access_s(                                                        char* path, int mode);
  errno_t                    _waccess_s(                                                       wchar_t* path, int mode);
  int                        _chmod(                                                           char* filename, perm_mode pmode);
  int                        _wchmod(                                                          wchar_t* filename, perm_mode pmode);
  char*                      _fullpath(                                                        char* absPath, char* relPath, size_t maxLength);
  char*                      _fullpath_dbg(                                                    char* absPath, char* relPath, size_t maxLength, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  wchar_t*                   _wfullpath(                                                       wchar_t* absPath, wchar_t* relPath, size_t maxLength);
  wchar_t*                   _wfullpath_dbg(                                                   wchar_t* absPath, wchar_t* relPath, size_t maxLength, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  void                       _makepath(                                                        char* path, char* drive, char* dir, char* fname, char* ext);
  void                       _wmakepath(                                                       wchar_t* path, wchar_t* drive, wchar_t* dir, wchar_t* fname, wchar_t* ext);
  errno_t                    _makepath_s(                                                      char* path, size_t sizeInBytes, char* drive, char* dir, char* fname, char* ext);
  errno_t                    _wmakepath_s(                                                     wchar_t* path, size_t sizeInWords, wchar_t* drive, wchar_t* dir, wchar_t* fname, wchar_t* ext);
  char*                      _mktemp(                                                          char* template);
  wchar_t*                   _wmktemp(                                                         wchar_t* template);
  errno_t                    _mktemp_s(                                                        char* template, size_t sizeInChars);
  errno_t                    _wmktemp_s(                                                       wchar_t* template, size_t sizeInChars);
  int                        remove(                                                           char* path);
  int                        _wremove(                                                         wchar_t* path);
  int                        rename(                                                           char* oldname, char* newname);
  int                        _wrename(                                                         wchar_t* oldname, wchar_t* newname);
  void                       _splitpath(                                                       char* path, char* drive, char* dir, char* fname, char* ext);
  void                       _wsplitpath(                                                      wchar_t* path, wchar_t* drive, wchar_t* dir, wchar_t* fname, wchar_t* ext);
  errno_t                    _splitpath_s(                                                     char* path, char* drive, size_t driveNumberOfElements, char* dir, size_t dirNumberOfElements, char* fname, size_t nameNumberOfElements, char* ext, size_t extNumberOfElements);
  errno_t                    _wsplitpath_s(                                                    wchar_t* path, wchar_t* drive, size_t driveNumberOfElements, wchar_t* dir, size_t dirNumberOfElements, wchar_t* fname, size_t nameNumberOfElements, wchar_t* ext, size_t extNumberOfElements);
  int                        _stat(                                                            char* path, struct _stat* buffer);
  int                        _stat32(                                                          char* path, struct _stat32* buffer);
  int                        _stat64(                                                          char* path, struct _stat64* buffer);
  int                        _stati64(                                                         char* path, struct _stati64* buffer);
  int                        _stat32i64(                                                       char* path, struct _stat32i64* buffer);
  int                        _stat64i32(                                                       char* path, struct _stat64i32* buffer);
  int                        _wstat(                                                           wchar_t* path, struct _stat* buffer);
  int                        _wstat32(                                                         wchar_t* path, struct _stat32* buffer);
  int                        _wstat64(                                                         wchar_t* path, struct _stat64* buffer);
  int                        _wstati64(                                                        wchar_t* path, struct _stati64* buffer);
  int                        _wstat32i64(                                                      wchar_t* path, struct _stat32i64* buffer);
  int                        _wstat64i32(                                                      wchar_t* path, struct _stat64i32* buffer);
  int                        _unlink(                                                          char* filename);
  int                        _wunlink(                                                         wchar_t* filename);
  double                     acos(                                                             double x);
  float                      acosf(                                                            float x);
  double                     asin(                                                             double x);
  float                      asinf(                                                            float x);
  double                     atan(                                                             double x);
  double                     atan2(                                                            double y, double x);
  float                      atanf(                                                            float x);
  float                      atan2f(                                                           float y, float x);
  double                     _cabs(                                                            struct _complex z);
  double                     ceil(                                                             double x);
  float                      ceilf(                                                            float x);
  double                     _chgsign(                                                         double x);
  float                      _chgsignf(                                                        float x);
  _SW_FLOAT                  _clearfp(                                                         );
  unsigned int               _control87(                                                       control_bits new, control_mask mask);
  unsigned int               _controlfp(                                                       control_bits new, control_mask mask);
  int                        __control87_2(                                                    control_bits new, control_mask mask, unsigned int* x86_cw, unsigned int* sse2_cw);
  errno_t                    _controlfp_s(                                                     unsigned int* currentControl, control_bits newControl, control_mask mask);
  double                     _copysign(                                                        double x, double y);
  float                      _copysignf(                                                       float x, float y);
  double                     cos(                                                              double x);
  float                      cosf(                                                             float x);
  double                     cosh(                                                             double x);
  float                      coshf(                                                            float x);
  div_t                      div(                                                              int numer, int denom);
  double                     exp(                                                              double x);
  float                      expf(                                                             float x);
  double                     fabs(                                                             double x);
  int                        _finite(                                                          double x);
  double                     floor(                                                            double x);
  float                      floorf(                                                           float x);
  double                     fmod(                                                             double x, double y);
  float                      fmodf(                                                            float x, float y);
  _FPCLASS                   _fpclass(                                                         double x);
  int                        _fpieee_flt(                                                      unsigned long excCode, struct _EXCEPTION_POINTERS* excInfo, void* handler);
  void                       _fpreset(                                                         );
  double                     frexp(                                                            double x, int* expptr);
  double                     _hypot(                                                           double x, double y);
  float                      _hypotf(                                                          float x, float y);
  int                        _isnan(                                                           double x);
  double                     ldexp(                                                            double x, int exp);
  ldiv_t                     ldiv(                                                             long int numer, long int denom);
  double                     log(                                                              double x);
  float                      logf(                                                             float x);
  double                     log10(                                                            double x);
  float                      log10f(                                                           float x);
  double                     _logb(                                                            double x);
  unsigned long              _lrotl(                                                           unsigned long value, int shift);
  unsigned long              _lrotr(                                                           unsigned long value, int shift);
  int                        _matherr(                                                         struct _exception* except);
  void                       __setusermatherr(                                                 _HANDLE_MATH_ERROR pf);
  double                     modf(                                                             double x, double* intptr);
  float                      modff(                                                            float x, float* intptr);
  double                     _nextafter(                                                       double x, double y);
  double                     pow(                                                              double x, double y);
  float                      powf(                                                             float x, float y);
  int                        rand(                                                             );
  errno_t                    rand_s(                                                           unsigned int* randomValue);
  unsigned int               _rotl(                                                            unsigned int value, int shift);
  unsigned __int64           _rotl64(                                                          unsigned __int64 value, int shift);
  unsigned int               _rotr(                                                            unsigned int value, int shift);
  unsigned __int64           _rotr64(                                                          unsigned __int64 value, int shift);
  double                     _scalb(                                                           double x, long exp);
  void                       _set_controlfp(                                                   unsigned int newControl, unsigned int mask);
  double                     sin(                                                              double x);
  float                      sinf(                                                             float x);
  double                     sinh(                                                             double x);
  float                      sinhf(                                                            float x);
  double                     sqrt(                                                             double x);
  float                      sqrtf(                                                            float x);
  void                       srand(                                                            unsigned int seed);
  unsigned int               _statusfp(                                                        );
  double                     tan(                                                              double x);
  float                      tanf(                                                             float x);
  double                     tanh(                                                             double x);
  float                      tanhf(                                                            float x);
  double                     _y0(                                                              double x);
  double                     _y1(                                                              double x);
  double                     _yn(                                                              int n, double x);
  double                     _j0(                                                              double x);
  double                     _j1(                                                              double x);
  double                     _jn(                                                              int n, double x);
  int                        _set_SSE2_enable(                                                 int flag);
  errno_t                    _set_fmode(                                                       file_translation_mode mode);
  errno_t                    _get_fmode(                                                       file_translation_mode* pmode);
  file_translation_mode      _setmode(                                                         int fd, file_translation_mode mode);
  file_translation_mode*     __p__fmode(                                                       );
  void                       clearerr(                                                         FILE* stream);
  errno_t                    clearerr_s(                                                       FILE* stream);
  RET_EOF                    fclose(                                                           FILE* stream);
  RET_EOF                    _fcloseall(                                                       );
  FILE*                      _fdopen(                                                          int fd, char* mode);
  FILE*                      _wfdopen(                                                         int fd, wchar_t* mode);
  int                        feof(                                                             FILE* stream);
  int                        ferror(                                                           FILE* stream);
  RET_EOF                    fflush(                                                           FILE* stream);
  RET_EOF                    fgetc(                                                            FILE* stream);
  RET_WEOF                   fgetwc(                                                           FILE* stream);
  int                        fgetpos(                                                          FILE* stream, fpos_t* pos);
  char*                      fgets(                                                            char* str, int n, FILE* stream);
  wchar_t*                   fgetws(                                                           wchar_t* str, int n, FILE* stream);
  int                        _fileno(                                                          FILE* stream);
  int                        _flushall(                                                        );
  FILE*                      fopen(                                                            char* filename, char* mode);
  FILE*                      _wfopen(                                                          wchar_t* filename, wchar_t* mode);
  errno_t                    fopen_s(                                                          FILE** pFile, char* filename, char* mode);
  errno_t                    _wfopen_s(                                                        FILE** pFile, wchar_t* filename, wchar_t* mode);
  int                        fprintf(                                                          FILE* stream, char* format);
  int                        _fprintf_l(                                                       FILE* stream, char* format, _locale_t locale);
  int                        fwprintf(                                                         FILE* stream, wchar_t* format);
  int                        _fwprintf_l(                                                      FILE* stream, wchar_t* format, _locale_t locale);
  int                        fprintf_s(                                                        FILE* stream, char* format);
  int                        _fprintf_s_l(                                                     FILE* stream, char* format, _locale_t locale);
  int                        fwprintf_s(                                                       FILE* stream, wchar_t* format);
  int                        _fwprintf_s_l(                                                    FILE* stream, wchar_t* format, _locale_t locale);
  RET_EOF                    fputc(                                                            int c, FILE* stream);
  RET_WEOF                   fputwc(                                                           wchar_t c, FILE* stream);
  RET_EOF                    fputs(                                                            char* str, FILE* stream);
  RET_WEOF_INT               fputws(                                                           wchar_t* str, FILE* stream);
  size_t                     fread(                                                            void* buffer, size_t size, size_t count, FILE* stream);
  FILE*                      freopen(                                                          char* path, char* mode, FILE* stream);
  FILE*                      _wfreopen(                                                        wchar_t* path, wchar_t* mode, FILE* stream);
  errno_t                    freopen_s(                                                        FILE** pFile, char* path, char* mode, FILE* stream);
  errno_t                    _wfreopen_s(                                                      FILE** pFile, wchar_t* path, wchar_t* mode, FILE* stream);
  RET_EOF                    fscanf(                                                           FILE* stream, char* format);
  RET_EOF                    _fscanf_l(                                                        FILE* stream, char* format, _locale_t locale);
  RET_EOF                    fwscanf(                                                          FILE* stream, wchar_t* format);
  RET_EOF                    _fwscanf_l(                                                       FILE* stream, wchar_t* format, _locale_t locale);
  RET_EOF                    fscanf_s(                                                         FILE* stream, char* format);
  RET_EOF                    _fscanf_s_l(                                                      FILE* stream, char* format, _locale_t locale);
  RET_EOF                    fwscanf_s(                                                        FILE* stream, wchar_t* format);
  RET_EOF                    _fwscanf_s_l(                                                     FILE* stream, wchar_t* format, _locale_t locale);
  int                        fseek(                                                            FILE* stream, long offset, SEEK_TYPE origin);
  int                        _fseeki64(                                                        FILE* stream, __int64 offset, SEEK_TYPE origin);
  int                        fsetpos(                                                          FILE* stream, fpos_t* pos);
  FILE*                      _fsopen(                                                          char* filename, char* mode, share_flag shflag);
  FILE*                      _wfsopen(                                                         wchar_t* filename, wchar_t* mode, share_flag shflag);
  long                       ftell(                                                            FILE* stream);
  __int64                    _ftelli64(                                                        FILE* stream);
  size_t                     fwrite(                                                           void* buffer, size_t size, size_t count, FILE* stream);
  RET_EOF                    getc(                                                             FILE* stream);
  RET_WEOF                   getwc(                                                            FILE* stream);
  int                        _getmaxstdio(                                                     );
  char*                      gets(                                                             char* buffer);
  wchar_t*                   _getws(                                                           wchar_t* buffer);
  char*                      gets_s(                                                           char* buffer, size_t sizeInCharacters);
  wchar_t*                   _getws_s(                                                         wchar_t* buffer, size_t sizeInCharacters);
  RET_EOF                    _getw(                                                            FILE* stream);
  RET_EOF                    putc(                                                             int c, FILE* stream);
  RET_WEOF                   putwc(                                                            wchar_t c, FILE* stream);
  RET_EOF                    puts(                                                             char* str);
  RET_WEOF_INT               _putws(                                                           wchar_t* str);
  RET_EOF                    _putw(                                                            int binint, FILE* stream);
  void                       rewind(                                                           FILE* stream);
  int                        _rmtmp(                                                           );
  void                       setbuf(                                                           FILE* stream, char* buffer);
  int                        _setmaxstdio(                                                     int newmax);
  int                        setvbuf(                                                          FILE* stream, char* buffer, buffer_mode mode, size_t size);
  char*                      _tempnam(                                                         char* dir, char* prefix);
  char*                      _tempnam_dbg(                                                     char* dir, char* prefix, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  wchar_t*                   _wtempnam(                                                        wchar_t* dir, wchar_t* prefix);
  wchar_t*                   _wtempnam_dbg(                                                    wchar_t* dir, wchar_t* prefix, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  char*                      tmpnam(                                                           char* str);
  wchar_t*                   _wtmpnam(                                                         wchar_t* str);
  FILE*                      tmpfile(                                                          );
  errno_t                    tmpfile_s(                                                        FILE** pFilePtr);
  errno_t                    tmpnam_s(                                                         char* str, size_t sizeInChars);
  errno_t                    _wtmpnam_s(                                                       wchar_t* str, size_t sizeInChars);
  RET_EOF                    ungetc(                                                           int c, FILE* stream);
  RET_WEOF                   ungetwc(                                                          wint_t c, FILE* stream);
  int                        _vcprintf_s(                                                      char* format, va_list argptr);
  int                        _vcprintf_s_l(                                                    char* format, _locale_t locale, va_list argptr);
  int                        _vcwprintf_s(                                                     wchar_t* format, va_list argptr);
  int                        _vcwprintf_s_l(                                                   wchar_t* format, _locale_t locale, va_list argptr);
  int                        vfprintf_s(                                                       FILE* stream, char* format, va_list argptr);
  int                        _vfprintf_s_l(                                                    FILE* stream, char* format, _locale_t locale, va_list argptr);
  int                        vfwprintf_s(                                                      FILE* stream, wchar_t* format, va_list argptr);
  int                        _vfwprintf_s_l(                                                   FILE* stream, wchar_t* format, _locale_t locale, va_list argptr);
  int                        vprintf_s(                                                        char* format, va_list argptr);
  int                        _vprintf_s_l(                                                     char* format, _locale_t locale, va_list argptr);
  int                        vwprintf_s(                                                       wchar_t* format, va_list argptr);
  int                        _vwprintf_s_l(                                                    wchar_t* format, _locale_t locale, va_list argptr);
  int                        printf(                                                           char* format);
  int                        _printf_l(                                                        char* format, _locale_t locale);
  int                        wprintf(                                                          wchar_t* format);
  int                        _wprintf_l(                                                       wchar_t* format, _locale_t locale);
  int                        printf_s(                                                         char* format);
  int                        _printf_s_l(                                                      char* format, _locale_t locale);
  int                        wprintf_s(                                                        wchar_t* format);
  int                        _wprintf_s_l(                                                     wchar_t* format, _locale_t locale);
  RET_EOF                    scanf(                                                            char* format);
  RET_EOF                    _scanf_l(                                                         char* format, _locale_t locale);
  RET_EOF                    wscanf(                                                           wchar_t* format);
  RET_EOF                    _wscanf_l(                                                        wchar_t* format, _locale_t locale);
  RET_EOF                    scanf_s(                                                          char* format);
  RET_EOF                    _scanf_s_l(                                                       char* format, _locale_t locale);
  RET_EOF                    wscanf_s(                                                         wchar_t* format);
  RET_EOF                    _wscanf_s_l(                                                      wchar_t* format, _locale_t locale);
  int                        _vcprintf(                                                        char* format, va_list argptr);
  int                        _vcprintf_l(                                                      char* format, _locale_t locale, va_list argptr);
  int                        _vcwprintf(                                                       wchar_t* format, va_list argptr);
  int                        _vcwprintf_l(                                                     wchar_t* format, _locale_t locale, va_list argptr);
  int                        _vcprintf_p(                                                      char* format, va_list argptr);
  int                        _vcprintf_p_l(                                                    char* format, _locale_t locale, va_list argptr);
  int                        _vcwprintf_p(                                                     wchar_t* format, va_list argptr);
  int                        _vcwprintf_p_l(                                                   wchar_t* format, _locale_t locale, va_list argptr);
  int                        vfprintf(                                                         FILE* stream, char* format, va_list argptr);
  int                        _vfprintf_l(                                                      FILE* stream, char* format, _locale_t locale, va_list argptr);
  int                        vfwprintf(                                                        FILE* stream, wchar_t* format, va_list argptr);
  int                        _vfwprintf_l(                                                     FILE* stream, wchar_t* format, _locale_t locale, va_list argptr);
  int                        _vfprintf_p(                                                      FILE* stream, char* format, va_list argptr);
  int                        _vfprintf_p_l(                                                    FILE* stream, char* format, _locale_t locale, va_list argptr);
  int                        _vfwprintf_p(                                                     FILE* stream, wchar_t* format, va_list argptr);
  int                        _vfwprintf_p_l(                                                   FILE* stream, wchar_t* format, _locale_t locale, va_list argptr);
  int                        vprintf(                                                          char* format, va_list argptr);
  int                        _vprintf_l(                                                       char* format, _locale_t locale, va_list argptr);
  int                        vwprintf(                                                         wchar_t* format, va_list argptr);
  int                        _vwprintf_l(                                                      wchar_t* format, _locale_t locale, va_list argptr);
  int                        _vprintf_p(                                                       char* format, va_list argptr);
  int                        _vprintf_p_l(                                                     char* format, _locale_t locale, va_list argptr);
  int                        _vwprintf_p(                                                      wchar_t* format, va_list argptr);
  int                        _vwprintf_p_l(                                                    wchar_t* format, _locale_t locale, va_list argptr);
  int                        _vscprintf(                                                       char* format, va_list argptr);
  int                        _vscprintf_l(                                                     char* format, _locale_t locale, va_list argptr);
  int                        _vscwprintf(                                                      wchar_t* format, va_list argptr);
  int                        _vscwprintf_l(                                                    wchar_t* format, _locale_t locale, va_list argptr);
  int                        _vscprintf_p(                                                     char* format, va_list argptr);
  int                        _vscprintf_p_l(                                                   char* format, _locale_t locale, va_list argptr);
  int                        _vscwprintf_p(                                                    wchar_t* format, va_list argptr);
  int                        _vscwprintf_p_l(                                                  wchar_t* format, _locale_t locale, va_list argptr);
  int                        _wprintf_p(                                                       wchar_t* format);
  int                        _wprintf_p_l(                                                     wchar_t* format, _locale_t locale);
  int                        _fprintf_p(                                                       FILE* stream, char* format);
  int                        _fprintf_p_l(                                                     FILE* stream, char* format, _locale_t locale);
  int                        _fwprintf_p(                                                      FILE* stream, wchar_t* format);
  int                        _fwprintf_p_l(                                                    FILE* stream, wchar_t* format, _locale_t locale);
  int                        _printf_p(                                                        char* format);
  int                        _printf_p_l(                                                      char* format, _locale_t locale);
  RET_EOF                    putchar(                                                          int c);
  RET_WEOF                   putwchar(                                                         wchar_t c);
  RET_EOF                    getchar(                                                          );
  RET_WEOF                   getwchar(                                                         );
  RET_EOF                    _fgetchar(                                                        );
  RET_WEOF                   _fgetwchar(                                                       );
  RET_EOF                    _fputchar(                                                        int c);
  RET_WEOF                   _fputwchar(                                                       wchar_t c);
  void                       _lock_file(                                                       FILE* file);
  void                       _unlock_file(                                                     FILE* file);
  int                        _close(                                                           int fd);
  int                        _commit(                                                          int fd);
  int                        _creat(                                                           char* filename, perm_mode pmode);
  int                        _wcreat(                                                          wchar_t* filename, perm_mode pmode);
  int                        _dup(                                                             int fd);
  int                        _dup2(                                                            int fd1, int fd2);
  int                        _eof(                                                             int fd);
  long                       _lseek(                                                           int fd, long offset, SEEK_TYPE origin);
  __int64                    _lseeki64(                                                        int fd, __int64 offset, SEEK_TYPE origin);
  int                        _open(                                                            char* filename, open_flag oflag, perm_mode pmode);
  int                        _wopen(                                                           wchar_t* filename, open_flag oflag, perm_mode pmode);
  int                        _read(                                                            int fd, void* buffer, unsigned int count);
  int                        _sopen(                                                           char* filename, open_flag oflag, share_flag shflag, perm_mode pmode);
  int                        _wsopen(                                                          wchar_t* filename, open_flag oflag, share_flag shflag, perm_mode pmode);
  errno_t                    _sopen_s(                                                         int* pfh, char* filename, open_flag oflag, share_flag shflag, perm_mode pmode);
  errno_t                    _wsopen_s(                                                        int* pfh, wchar_t* filename, open_flag oflag, share_flag shflag, perm_mode pmode);
  long                       _tell(                                                            int handle);
  __int64                    _telli64(                                                         int handle);
  perm_mode                  _umask(                                                           perm_mode pmode);
  errno_t                    _umask_s(                                                         perm_mode mode, perm_mode* pOldMode);
  int                        _write(                                                           int fd, void* buffer, unsigned int count);
  char*                      _cgets(                                                           char* buffer);
  wchar_t*                   _cgetws(                                                          wchar_t* buffer);
  errno_t                    _cgets_s(                                                         char* buffer, size_t numberOfElements, size_t* pSizeRead);
  errno_t                    _cgetws_s(                                                        wchar_t* buffer, size_t* pSizeRead);
  int                        _cprintf(                                                         char* format);
  int                        _cprintf_l(                                                       char* format, _locale_t locale);
  int                        _cwprintf(                                                        wchar* format);
  int                        _cwprintf_l(                                                      wchar* format, _locale_t locale);
  int                        _cprintf_s(                                                       char* format);
  int                        _cprintf_s_l(                                                     char* format, _locale_t locale);
  int                        _cwprintf_s(                                                      wchar* format);
  int                        _cwprintf_s_l(                                                    wchar* format, _locale_t locale);
  int                        _cputs(                                                           char* str);
  int                        _cputws(                                                          wchar_t* str);
  RET_EOF                    _cscanf(                                                          char* format);
  RET_EOF                    _cscanf_l(                                                        char* format, _locale_t locale);
  RET_EOF                    _cwscanf(                                                         wchar_t* format);
  RET_EOF                    _cwscanf_l(                                                       wchar_t* format, _locale_t locale);
  RET_EOF                    _cscanf_s(                                                        char* format);
  RET_EOF                    _cscanf_s_l(                                                      char* format, _locale_t locale);
  RET_EOF                    _cwscanf_s(                                                       wchar_t* format);
  RET_EOF                    _cwscanf_s_l(                                                     wchar_t* format, _locale_t locale);
  int                        _getch(                                                           );
  wint_t                     _getwch(                                                          );
  int                        _getche(                                                          );
  wint_t                     _getwche(                                                         );
  int                        _inp(                                                             unsigned short port);
  unsigned short             _inpw(                                                            unsigned short port);
  unsigned long              _inpd(                                                            unsigned short port);
  int                        _kbhit(                                                           );
  int                        _outp(                                                            unsigned short port, int databyte);
  unsigned short             _outpw(                                                           unsigned short port, unsigned short dataword);
  unsigned long              _outpd(                                                           unsigned short port, unsigned long dataword);
  RET_EOF                    _putch(                                                           int c);
  RET_WEOF                   _putwch(                                                          wchar_t c);
  RET_EOF                    _ungetch(                                                         int c);
  RET_WEOF                   _ungetwch(                                                        wint_t c);
  int                        _cprintf_p(                                                       char* format);
  int                        _cprintf_p_l(                                                     char* format, _locale_t locale);
  int                        _cwprintf_p(                                                      wchar* format);
  int                        _cwprintf_p_l(                                                    wchar* format, _locale_t locale);
  RET_EOF                    _fclose_nolock(                                                   FILE* stream);
  RET_EOF                    _fflush_nolock(                                                   FILE* stream);
  RET_WEOF                   _fgetwc_nolock(                                                   FILE* stream);
  size_t                     _fread_nolock(                                                    void* buffer, size_t size, size_t count, FILE* stream);
  int                        _fseek_nolock(                                                    FILE* stream, long offset, SEEK_TYPE origin);
  int                        _fseeki64_nolock(                                                 FILE* stream, __int64 offset, SEEK_TYPE origin);
  long                       _ftell_nolock(                                                    FILE* stream);
  __int64                    _ftelli64_nolock(                                                 FILE* stream);
  size_t                     _fwrite_nolock(                                                   void* buffer, size_t size, size_t count, FILE* stream);
  RET_EOF                    _getc_nolock(                                                     FILE* stream);
  int                        _getch_nolock(                                                    );
  wint_t                     _getwch_nolock(                                                   );
  int                        _getche_nolock(                                                   );
  wint_t                     _getwche_nolock(                                                  );
  char*                      _getdcwd_nolock(                                                  int drive, char* buffer, int maxlen);
  wchar_t*                   _wgetdcwd_nolock(                                                 int drive, wchar_t* buffer, int maxlen);
  RET_EOF                    _putch_nolock(                                                    int c);
  RET_WEOF                   _putwch_nolock(                                                   wchar_t c);
  RET_EOF                    _ungetc_nolock(                                                   int c, FILE* stream);
  RET_WEOF                   _ungetwc_nolock(                                                  wint_t c, FILE* stream);
  RET_EOF                    _ungetch_nolock(                                                  int c);
  RET_WEOF                   _ungetwch_nolock(                                                 wint_t c);
  RET_WEOF                   _fputwc_nolock(                                                   wchar_t c, FILE* stream);
  char*                      setlocale(                                                        locale_category category, char* locale);
  wchar_t*                   _wsetlocale(                                                      locale_category category, wchar_t* locale);
  _locale_t                  _create_locale(                                                   locale_category category, char* locale);
  _locale_t                  __create_locale(                                                  locale_category category, char* locale);
  void                       _free_locale(                                                     _locale_t locale);
  void                       __free_locale(                                                    _locale_t locale);
  _locale_t                  _get_current_locale(                                              );
  _locale_t                  __get_current_locale(                                             );
  thread_locale_type         _configthreadlocale(                                              thread_locale_type type);
  struct lconv*              localeconv(                                                       );
  void                       _mbccpy(                                                          unsigned char* dest, unsigned char* src);
  void                       _mbccpy_l(                                                        unsigned char* dest, unsigned char* src, _locale_t locale);
  errno_t                    _mbccpy_s(                                                        unsigned char* dest, size_t buffSizeInBytes, int* pCopied, unsigned char* src);
  errno_t                    _mbccpy_s_l(                                                      unsigned char* dest, size_t buffSizeInBytes, int* pCopied, unsigned char* src, _locale_t locale);
  int                        _getmbcp(                                                         );
  int                        _setmbcp(                                                         _MB_CP_TYPE codepage);
  int                        ___mb_cur_max_func(                                               );
  int                        __mb_cur_max(                                                     );
  UINT                       ___lc_codepage_func(                                              );
  LCID*                      ___lc_handle_func(                                                );
  int                        __crtLCMapStringW(                                                LCID Locale, LocaleMappingFlags dwMapFlags, LPCWSTR lpSrcStr, int cchSrc, LPWSTR lpDestStr, int cchDest);
  void*                      calloc(                                                           size_t num, size_t size);
  void                       ??3@YAXPAX@Z(                                                     void* object);
  void                       ??3@YAXPEAX@Z(                                                    void* object);
  void                       ??_V@YAXPAX@Z(                                                    void* object);
  void                       ??_V@YAXPEAX@Z(                                                   void* object);
  void*                      _expand(                                                          void* memblock, size_t size);
  void                       free(                                                             void* memblock);
  void                       _freea(                                                           void* memblock);
  intptr_t                   _get_heap_handle(                                                 );
  size_t                     _get_sbh_threshold(                                               );
  int                        _heapadd(                                                         void* memblock, size_t size);
  HEAP_RESULT                _heapchk(                                                         );
  int                        _heapmin(                                                         );
  HEAP_RESULT                _heapset(                                                         unsigned int fill);
  HEAP_RESULT                _heapwalk(                                                        _HEAPINFO* entryinfo);
  void*                      malloc(                                                           size_t size);
  size_t                     _msize(                                                           void* memblock);
  void*                      ??2@YAPAXI@Z(                                                     size_t count);
  void*                      ??2@YAPEAX_K@Z(                                                   size_t count);
  void*                      ??_U@YAPAXI@Z(                                                    size_t count);
  void*                      ??_U@YAPEAX_K@Z(                                                  size_t count);
  _PNH                       ?_query_new_handler@@YAP6AHI@ZXZ(                                 );
  int                        ?_query_new_mode@@YAHXZ(                                          );
  void*                      realloc(                                                          void* memblock, size_t size);
  int                        _callnewh(                                                        size_t size);
  _PNH                       ?_set_new_handler@@YAP6AHI@ZP6AHI@Z@Z(                            _PNH pNewHandler);
  int                        ?_set_new_mode@@YAHH@Z(                                           int newhandlermode);
  void*                      _expand_dbg(                                                      void* userData, size_t newSize, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  void*                      _calloc_dbg(                                                      size_t num, size_t size, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  void                       _free_dbg(                                                        void* userData, DBG_BLOCK_TYPE blockType);
  void*                      _malloc_dbg(                                                      size_t size, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  size_t                     _msize_dbg(                                                       void* userData, DBG_BLOCK_TYPE blockType);
  void*                      _realloc_dbg(                                                     void* userData, size_t newSize, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  void*                      _recalloc(                                                        void* memblock, size_t size);
  void*                      _recalloc_dbg(                                                    void* userData, size_t num, size_t size, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  errno_t                    _get_amblksiz(                                                    size_t* blockSize);
  errno_t                    _set_amblksiz(                                                    size_t blockSize);
  int                        _set_sbh_threshold(                                               size_t size);
  void                       abort(                                                            );
  int                        atexit(                                                           void* func);
  uintptr_t                  _beginthread(                                                     void* start_address, unsigned stack_size, void* arglist);
  uintptr_t                  _beginthreadex(                                                   void* security, unsigned stack_size, void* start_address, void* arglist, thread_initflag initflag, unsigned* thrdaddr);
  void                       _cexit(                                                           );
  void                       _c_exit(                                                          );
  intptr_t                   _cwait(                                                           int* termstat, intptr_t procHandle, int action);
  void                       _endthread(                                                       );
  void                       _endthreadex(                                                     unsigned retval);
  intptr_t                   _execl(                                                           char* cmdname, char* args);
  intptr_t                   _wexecl(                                                          wchar_t* cmdname, wchar_t* args);
  intptr_t                   _execle(                                                          char* cmdname, char* args);
  intptr_t                   _wexecle(                                                         wchar_t* cmdname, wchar_t* args);
  intptr_t                   _execlp(                                                          char* cmdname, char* args);
  intptr_t                   _wexeclp(                                                         wchar_t* cmdname, wchar_t* args);
  intptr_t                   _execlpe(                                                         char* cmdname, char* args);
  intptr_t                   _wexeclpe(                                                        wchar_t* cmdname, wchar_t* args);
  intptr_t                   _execv(                                                           char* cmdname, char** argv);
  intptr_t                   _wexecv(                                                          wchar_t* cmdname, wchar_t** argv);
  intptr_t                   _execve(                                                          char* cmdname, char** argv, char** envp);
  intptr_t                   _wexecve(                                                         wchar_t* cmdname, wchar_t** argv, wchar_t** envp);
  intptr_t                   _execvp(                                                          char* cmdname, char** argv);
  intptr_t                   _wexecvp(                                                         wchar_t* cmdname, wchar_t** argv);
  intptr_t                   _execvpe(                                                         char* cmdname, char** argv, char** envp);
  intptr_t                   _wexecvpe(                                                        wchar_t* cmdname, wchar_t** argv, wchar_t** envp);
  void                       exit(                                                             int status);
  void                       _exit(                                                            int status);
  char*                      getenv(                                                           char* varname);
  wchar_t*                   _wgetenv(                                                         wchar_t* varname);
  errno_t                    getenv_s(                                                         size_t* pReturnValue, char* buffer, size_t numberOfElements, char* varname);
  errno_t                    _wgetenv_s(                                                       size_t* pReturnValue, wchar_t* buffer, size_t numberOfElements, wchar_t* varname);
  int                        _getpid(                                                          );
  _onexit_t                  _onexit(                                                          _onexit_t function);
  int                        _pclose(                                                          FILE* stream);
  void                       perror(                                                           char* string);
  void                       _wperror(                                                         wchar_t* string);
  int                        _pipe(                                                            int* pfds, unsigned int psize, open_flag textmode);
  FILE*                      _popen(                                                           char* command, char* mode);
  FILE*                      _wpopen(                                                          wchar_t* command, wchar_t* mode);
  int                        _putenv(                                                          char* envstring);
  int                        _wputenv(                                                         wchar_t* envstring);
  errno_t                    _putenv_s(                                                        char* name, char* value);
  errno_t                    _wputenv_s(                                                       wchar_t* name, wchar_t* value);
  int                        raise(                                                            SIGNAL sig);
  SIGNAL_FUNC                signal(                                                           SIGNAL sig, SIGNAL_FUNC func);
  intptr_t                   _spawnl(                                                          spawn_mode mode, char* cmdname, char* args);
  intptr_t                   _wspawnl(                                                         spawn_mode mode, wchar_t* cmdname, wchar_t* args);
  intptr_t                   _spawnle(                                                         spawn_mode mode, char* cmdname, char* args);
  intptr_t                   _wspawnle(                                                        spawn_mode mode, wchar_t* cmdname, wchar_t* args);
  intptr_t                   _spawnlp(                                                         spawn_mode mode, char* cmdname, char* args);
  intptr_t                   _wspawnlp(                                                        spawn_mode mode, wchar_t* cmdname, wchar_t* args);
  intptr_t                   _spawnlpe(                                                        spawn_mode mode, char* cmdname, char* args);
  intptr_t                   _wspawnlpe(                                                       spawn_mode mode, wchar_t* cmdname, wchar_t* args);
  intptr_t                   _spawnv(                                                          spawn_mode mode, char* cmdname, char** argv);
  intptr_t                   _wspawnv(                                                         spawn_mode mode, wchar_t* cmdname, wchar_t** argv);
  intptr_t                   _spawnve(                                                         spawn_mode mode, char* cmdname, char** argv, char** envp);
  intptr_t                   _wspawnve(                                                        spawn_mode mode, wchar_t* cmdname, wchar_t** argv, wchar_t** envp);
  intptr_t                   _spawnvp(                                                         spawn_mode mode, char* cmdname, char** argv);
  intptr_t                   _wspawnvp(                                                        spawn_mode mode, wchar_t* cmdname, wchar_t** argv);
  intptr_t                   _spawnvpe(                                                        spawn_mode mode, char* cmdname, char** argv, char** envp);
  intptr_t                   _wspawnvpe(                                                       spawn_mode mode, wchar_t* cmdname, wchar_t** argv, wchar_t** envp);
  int                        system(                                                           char* command);
  int                        _wsystem(                                                         wchar_t* command);
  errno_t                    _dupenv_s(                                                        char** buffer, size_t* numberOfElements, char* varname);
  errno_t                    _wdupenv_s(                                                       wchar_t** buffer, size_t* numberOfElements, wchar_t* varname);
  errno_t                    _dupenv_s_dbg(                                                    char** buffer, size_t* numberOfElements, char* varname, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  errno_t                    _wdupenv_s_dbg(                                                   wchar_t** buffer, size_t* numberOfElements, wchar_t* varname, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  int                        __getmainargs(                                                    int* _Argc, char*** _Argv, char*** _Env, int _DoWildCard, _startupinfo* _StartInfo);
  int                        __wgetmainargs(                                                   int* _Argc, wchar_t*** _Argv, wchar_t*** _Env, int _DoWildCard, _startupinfo* _StartInfo);
  errno_t                    _get_pgmptr(                                                      char** pValue);
  errno_t                    _get_wpgmptr(                                                     wchar_t** pValue);
  errno_t                    _get_fileinfo(                                                    int* pFileInfo);
  errno_t                    _set_fileinfo(                                                    int value);
  void                       __set_app_type(                                                   C_APP_TYPE at);
  _onexit_t                  __dllonexit(                                                      _onexit_t func, _PVFV** pbegin, _PVFV** pend);
  void                       _sleep(                                                           unsigned long duration);
  intptr_t                   _loaddll(                                                         char* filename);
  int                        _unloaddll(                                                       intptr_t handle);
  void*                      _getdllprocaddr(                                                  intptr_t handle, char* procedureName, intptr_t ordinal);
  void*                      bsearch(                                                          void* key, void* base, size_t num, size_t width, compare_function compare);
  void*                      bsearch_s(                                                        void* key, void* base, size_t num, size_t width, compare_s_function compare, void* context);
  void*                      _lfind(                                                           void* key, void* base, unsigned int* num, unsigned int width, compare_function compare);
  void*                      _lfind_s(                                                         void* key, void* base, unsigned int* num, size_t size, compare_s_function compare, void* context);
  void*                      _lsearch(                                                         void* key, void* base, unsigned int* num, unsigned int width, compare_function compare);
  void*                      _lsearch_s(                                                       void* key, void* base, unsigned int* num, size_t size, compare_s_function compare, void* context);
  void                       qsort(                                                            void* base, size_t num, size_t width, compare_s_function compare);
  void                       qsort_s(                                                          void* base, size_t num, size_t width, compare_s_function compare, void* context);
  unsigned char*             _mbsdec(                                                          unsigned char* start, unsigned char* current);
  unsigned char*             _mbsdec_l(                                                        unsigned char* start, unsigned char* current, _locale_t locale);
  unsigned char*             _mbsinc(                                                          unsigned char* current);
  unsigned char*             _mbsinc_l(                                                        unsigned char* current, _locale_t locale);
  unsigned char*             _mbsnbcat(                                                        unsigned char* dest, unsigned char* src, size_t count);
  unsigned char*             _mbsnbcat_l(                                                      unsigned char* dest, unsigned char* src, size_t count, _locale_t locale);
  errno_t                    _mbsnbcat_s(                                                      unsigned char* dest, size_t sizeInBytes, unsigned char* src, size_t count);
  errno_t                    _mbsnbcat_s_l(                                                    unsigned char* dest, size_t sizeInBytes, unsigned char* src, size_t count, _locale_t locale);
  _NLSCMPERROR               _mbsnbcmp(                                                        unsigned char* string1, unsigned char* string2, size_t count);
  _NLSCMPERROR               _mbsnbcmp_l(                                                      unsigned char* string1, unsigned char* string2, size_t count, _locale_t locale);
  size_t                     _mbsnbcnt(                                                        unsigned char* str, size_t count);
  size_t                     _mbsnbcnt_l(                                                      unsigned char* str, size_t count, _locale_t locale);
  size_t                     _mbsnccnt(                                                        unsigned char* str, size_t count);
  size_t                     _mbsnccnt_l(                                                      unsigned char* str, size_t count, _locale_t locale);
  size_t                     __strncnt(                                                        char* str, size_t count);
  size_t                     __wcsncnt(                                                        wchar_t* str, size_t count);
  unsigned char*             _mbsnbcpy(                                                        unsigned char* strDest, unsigned char* strSource, size_t count);
  unsigned char*             _mbsnbcpy_l(                                                      unsigned char* strDest, unsigned char* strSource, size_t count, _locale_t locale);
  errno_t                    _mbsnbcpy_s(                                                      unsigned char* strDest, size_t sizeInBytes, unsigned char* strSource, size_t count);
  errno_t                    _mbsnbcpy_s_l(                                                    unsigned char* strDest, size_t sizeInBytes, unsigned char* strSource, size_t count, _locale_t locale);
  _NLSCMPERROR               _mbsnbicmp(                                                       unsigned char* string1, unsigned char* string2, size_t count);
  unsigned char*             _mbsnbset(                                                        unsigned char* str, unsigned int c, size_t count);
  unsigned char*             _mbsnbset_l(                                                      unsigned char* str, unsigned int c, size_t count, _locale_t locale);
  unsigned int               _mbsnextc(                                                        unsigned char* str);
  unsigned int               _mbsnextc_l(                                                      unsigned char* str, _locale_t locale);
  unsigned char*             _mbsninc(                                                         unsigned char* str, size_t count);
  unsigned char*             _mbsninc_l(                                                       unsigned char* str, size_t count, _locale_t locale);
  unsigned char*             _mbsspnp(                                                         unsigned char* str, unsigned char* charset);
  unsigned char*             _mbsspnp_l(                                                       unsigned char* str, unsigned char* charset, _locale_t locale);
  int                        _scprintf(                                                        char* format);
  int                        _scprintf_l(                                                      char* format, _locale_t locale);
  int                        _scwprintf(                                                       wchar_t* format);
  int                        _scwprintf_l(                                                     wchar_t* format, _locale_t locale);
  RET_EOF                    _snscanf(                                                         char* input, size_t length, char* format);
  RET_EOF                    _snscanf_l(                                                       char* input, size_t length, char* format, _locale_t locale);
  RET_EOF                    _snwscanf(                                                        wchar_t* input, size_t length, wchar_t* format);
  RET_EOF                    _snwscanf_l(                                                      wchar_t* input, size_t length, wchar_t* format, _locale_t locale);
  RET_EOF                    sscanf(                                                           char* buffer, char* format);
  RET_EOF                    _sscanf_l(                                                        char* buffer, char* format, _locale_t locale);
  RET_EOF                    swscanf(                                                          wchar_t* buffer, wchar_t* format);
  RET_EOF                    _swscanf_l(                                                       wchar_t* buffer, wchar_t* format, _locale_t locale);
  int                        sprintf(                                                          char* buffer, char* format);
  int                        _sprintf_l(                                                       char* buffer, char* format, _locale_t locale);
  int                        swprintf(                                                         wchar_t* buffer, size_t count, wchar_t* format);
  int                        _swprintf(                                                        wchar_t* buffer, wchar_t* format);
  int                        __swprintf_l(                                                     wchar_t* buffer, wchar_t* format, _locale_t locale);
  int                        _sprintf_p(                                                       char* buffer, size_t sizeOfBuffer, char* format);
  int                        _sprintf_p_l(                                                     char* buffer, size_t sizeOfBuffer, char* format, _locale_t locale);
  int                        _swprintf_p(                                                      wchar_t* buffer, size_t sizeOfBuffer, wchar_t* format);
  int                        _swprintf_p_l(                                                    wchar_t* buffer, size_t sizeOfBuffer, wchar_t* format, _locale_t locale);
  char*                      strcat(                                                           char* strDestination, char* strSource);
  wchar_t*                   wcscat(                                                           wchar_t* strDestination, wchar_t* strSource);
  unsigned char*             _mbscat(                                                          unsigned char* strDestination, unsigned char* strSource);
  errno_t                    strcat_s(                                                         char* strDestination, size_t numberOfElements, char* strSource);
  errno_t                    wcscat_s(                                                         wchar_t* strDestination, size_t numberOfElements, wchar_t* strSource);
  errno_t                    _mbscat_s(                                                        unsigned char* strDestination, size_t numberOfElements, unsigned char* strSource);
  char*                      strchr(                                                           char* str, int c);
  wchar_t*                   wcschr(                                                           wchar_t* str, wchar_t c);
  unsigned char*             _mbschr(                                                          unsigned char* str, unsigned int c);
  unsigned char*             _mbschr_l(                                                        unsigned char* str, unsigned int c, _locale_t locale);
  int                        strcmp(                                                           char* string1, char* string2);
  int                        wcscmp(                                                           wchar_t* string1, wchar_t* string2);
  _NLSCMPERROR               _mbscmp(                                                          unsigned char* string1, unsigned char* string2);
  char*                      strcpy(                                                           char* strDestination, char* strSource);
  wchar_t*                   wcscpy(                                                           wchar_t* strDestination, wchar_t* strSource);
  unsigned char*             _mbscpy(                                                          unsigned char* strDestination, unsigned char* strSource);
  errno_t                    strcpy_s(                                                         char* strDestination, size_t numberOfElements, char* strSource);
  errno_t                    wcscpy_s(                                                         wchar_t* strDestination, size_t numberOfElements, wchar_t* strSource);
  errno_t                    _mbscpy_s(                                                        unsigned char* strDestination, size_t numberOfElements, unsigned char* strSource);
  size_t                     strcspn(                                                          char* str, char* strCharSet);
  size_t                     wcscspn(                                                          wchar_t* str, wchar_t* strCharSet);
  size_t                     _mbscspn(                                                         unsigned char* str, unsigned char* strCharSet);
  size_t                     _mbscspn_l(                                                       unsigned char* str, unsigned char* strCharSet, _locale_t locale);
  char*                      _strdup(                                                          char* strSource);
  wchar_t*                   _wcsdup(                                                          wchar_t* strSource);
  unsigned char*             _mbsdup(                                                          unsigned char* strSource);
  char*                      strerror(                                                         int errnum);
  char*                      _strerror(                                                        char* strErrMsg);
  wchar_t*                   _wcserror(                                                        int errnum);
  wchar_t*                   __wcserror(                                                       wchar_t* strErrMsg);
  errno_t                    strerror_s(                                                       char* buffer, size_t numberOfElements, int errnum);
  errno_t                    _strerror_s(                                                      char* buffer, size_t numberOfElements, char* strErrMsg);
  errno_t                    _wcserror_s(                                                      wchar_t* buffer, size_t numberOfElements, int errnum);
  errno_t                    __wcserror_s(                                                     wchar_t* buffer, size_t numberOfElements, wchar_t* strErrMsg);
  size_t                     strnlen(                                                          char* str, size_t numberOfElements);
  size_t                     wcsnlen(                                                          wchar_t* str, size_t numberOfElements);
  size_t                     _mbsnlen(                                                         unsigned char* str, size_t numberOfElements);
  size_t                     _mbsnlen_l(                                                       unsigned char* str, size_t numberOfElements, _locale_t locale);
  size_t                     _mbstrnlen(                                                       char* str, size_t numberOfElements);
  size_t                     _mbstrnlen_l(                                                     char* str, size_t numberOfElements, _locale_t locale);
  char*                      _strlwr(                                                          char* str);
  wchar_t*                   _wcslwr(                                                          wchar_t* str);
  unsigned char*             _mbslwr(                                                          unsigned char* str);
  char*                      _strlwr_l(                                                        char* str, _locale_t locale);
  wchar_t*                   _wcslwr_l(                                                        wchar_t* str, _locale_t locale);
  unsigned char*             _mbslwr_l(                                                        unsigned char* str, _locale_t locale);
  char*                      strncat(                                                          char* strDest, char* strSource, size_t count);
  wchar_t*                   wcsncat(                                                          wchar_t* strDest, wchar_t* strSource, size_t count);
  unsigned char*             _mbsncat(                                                         unsigned char* strDest, unsigned char* strSource, size_t count);
  unsigned char*             _mbsncat_l(                                                       unsigned char* strDest, unsigned char* strSource, size_t count, _locale_t locale);
  errno_t                    strncat_s(                                                        char* strDest, size_t numberOfElements, char* strSource, size_t count);
  errno_t                    wcsncat_s(                                                        wchar_t* strDest, size_t numberOfElements, wchar_t* strSource, size_t count);
  errno_t                    _mbsncat_s(                                                       unsigned char* strDest, size_t numberOfElements, unsigned char* strSource, size_t count);
  errno_t                    _mbsncat_s_l(                                                     unsigned char* strDest, size_t numberOfElements, unsigned char* strSource, size_t count, _locale_t locale);
  int                        strncmp(                                                          char* string1, char* string2, size_t count);
  int                        wcsncmp(                                                          wchar_t* string1, wchar_t* string2, size_t count);
  _NLSCMPERROR               _mbsncmp(                                                         unsigned char* string1, unsigned char* string2, size_t count);
  _NLSCMPERROR               _mbsncmp_l(                                                       unsigned char* string1, unsigned char* string2, size_t count, _locale_t locale);
  char*                      strncpy(                                                          char* strDest, char* strSource, size_t count);
  wchar_t*                   wcsncpy(                                                          wchar_t* strDest, wchar_t* strSource, size_t count);
  unsigned char*             _mbsncpy(                                                         unsigned char* strDest, unsigned char* strSource, size_t count);
  unsigned char*             _mbsncpy_l(                                                       unsigned char* strDest, unsigned char* strSource, size_t count, _locale_t locale);
  errno_t                    strncpy_s(                                                        char* strDest, size_t numberOfElements, char* strSource, size_t count);
  errno_t                    wcsncpy_s(                                                        wchar_t* strDest, size_t numberOfElements, wchar_t* strSource, size_t count);
  errno_t                    _mbsncpy_s(                                                       unsigned char* strDest, size_t numberOfElements, unsigned char* strSource, size_t count);
  errno_t                    _mbsncpy_s_l(                                                     unsigned char* strDest, size_t numberOfElements, unsigned char* strSource, size_t count, _locale_t locale);
  char*                      _strnset(                                                         char* str, int c, size_t count);
  wchar_t*                   _wcsnset(                                                         wchar_t* str, wchar_t c, size_t count);
  unsigned char*             _mbsnset(                                                         unsigned char* str, unsigned int c, size_t count);
  unsigned char*             _mbsnset_l(                                                       unsigned char* str, unsigned int c, size_t count, _locale_t locale);
  char*                      strpbrk(                                                          char* str, char* strCharSet);
  wchar_t*                   wcspbrk(                                                          wchar_t* str, wchar_t* strCharSet);
  unsigned char*             _mbspbrk(                                                         unsigned char* str, unsigned char* strCharSet);
  unsigned char*             _mbspbrk_l(                                                       unsigned char* str, unsigned char* strCharSet, _locale_t locale);
  char*                      strrchr(                                                          char* str, int c);
  wchar_t*                   wcsrchr(                                                          wchar_t* str, wchar_t c);
  unsigned char*             _mbsrchr(                                                         unsigned char* str, unsigned int c);
  unsigned char*             _mbsrchr_l(                                                       unsigned char* str, unsigned int c, _locale_t locale);
  char*                      _strrev(                                                          char* str);
  wchar_t*                   _wcsrev(                                                          wchar_t* str);
  unsigned char*             _mbsrev(                                                          unsigned char* str);
  unsigned char*             _mbsrev_l(                                                        unsigned char* str, _locale_t locale);
  char*                      _strset(                                                          char* str, int c);
  wchar_t*                   _wcsset(                                                          wchar_t* str, wchar_t c);
  unsigned char*             _mbsset(                                                          unsigned char* str, unsigned int c);
  unsigned char*             _mbsset_l(                                                        unsigned char* str, unsigned int c, _locale_t locale);
  size_t                     strspn(                                                           char* str, char* strCharSet);
  size_t                     wcsspn(                                                           wchar_t* str, wchar_t* strCharSet);
  size_t                     _mbsspn(                                                          unsigned char* str, unsigned char* strCharSet);
  size_t                     _mbsspn_l(                                                        unsigned char* str, unsigned char* strCharSet, _locale_t locale);
  char*                      strstr(                                                           char* str, char* strSearch);
  wchar_t*                   wcsstr(                                                           wchar_t* str, wchar_t* strSearch);
  unsigned char*             _mbsstr(                                                          unsigned char* str, unsigned char* strSearch);
  unsigned char*             _mbsstr_l(                                                        unsigned char* str, unsigned char* strSearch, _locale_t locale);
  char*                      strtok(                                                           char* strToken, char* strDelimit);
  wchar_t*                   wcstok(                                                           wchar_t* strToken, wchar_t* strDelimit);
  unsigned char*             _mbstok(                                                          unsigned char* strToken, unsigned char* strDelimit);
  unsigned char*             _mbstok_l(                                                        unsigned char* strToken, unsigned char* strDelimit, _locale_t locale);
  char*                      strtok_s(                                                         char* strToken, char* strDelimit, char** context);
  wchar_t*                   wcstok_s(                                                         wchar_t* strToken, wchar_t* strDelimit, wchar_t** context);
  unsigned char*             _mbstok_s(                                                        unsigned char* strToken, unsigned char* strDelimit, char** context);
  unsigned char*             _mbstok_s_l(                                                      unsigned char* strToken, unsigned char* strDelimit, char** context, _locale_t locale);
  char*                      _strupr(                                                          char* str);
  wchar_t*                   _wcsupr(                                                          wchar_t* str);
  unsigned char*             _mbsupr(                                                          unsigned char* str);
  char*                      _strupr_l(                                                        char* str, _locale_t locale);
  wchar_t*                   _wcsupr_l(                                                        wchar_t* str, _locale_t locale);
  unsigned char*             _mbsupr_l(                                                        unsigned char* str, _locale_t locale);
  int                        vsprintf(                                                         char* buffer, char* format, va_list argptr);
  int                        _vsprintf_l(                                                      char* buffer, char* format, _locale_t locale, va_list argptr);
  int                        vswprintf(                                                        wchar_t* buffer, wchar_t* format, va_list argptr);
  int                        _vswprintf(                                                       wchar_t* buffer, wchar_t* format, va_list argptr);
  int                        _vswprintf_l(                                                     wchar_t* buffer, size_t count, wchar_t* format, _locale_t locale, va_list argptr);
  int                        __vswprintf_l(                                                    wchar_t* buffer, wchar_t* format, _locale_t locale, va_list argptr);
  int                        _vsprintf_p(                                                      char* buffer, size_t sizeInBytes, char* format, va_list argptr);
  int                        _vsprintf_p_l(                                                    char* buffer, size_t sizeInBytes, char* format, _locale_t locale, va_list argptr);
  int                        _vswprintf_p(                                                     wchar_t* buffer, size_t count, wchar_t* format, va_list argptr);
  int                        _vswprintf_p_l(                                                   wchar_t* buffer, size_t count, wchar_t* format, _locale_t locale, va_list argptr);
  int                        vsnprintf(                                                        char* buffer, size_t count, char* format, va_list argptr);
  int                        _vsnprintf(                                                       char* buffer, size_t count, char* format, va_list argptr);
  int                        _vsnprintf_l(                                                     char* buffer, size_t count, char* format, _locale_t locale, va_list argptr);
  int                        _vsnwprintf(                                                      wchar_t* buffer, size_t count, wchar_t* format, va_list argptr);
  int                        _vsnwprintf_l(                                                    wchar_t* buffer, size_t count, wchar_t* format, _locale_t locale, va_list argptr);
  size_t                     strlen(                                                           char* str);
  size_t                     _mbslen(                                                          unsigned char* str);
  size_t                     _mbslen_l(                                                        unsigned char* str, _locale_t locale);
  size_t                     _mbstrlen(                                                        char* str);
  size_t                     _mbstrlen_l(                                                      char* str, _locale_t locale);
  size_t                     wcslen(                                                           wchar_t* str);
  size_t                     _mbclen(                                                          unsigned char* c);
  int                        mblen(                                                            char* mbstr, size_t count);
  int                        _mblen_l(                                                         char* mbstr, size_t count, _locale_t locale);
  _NLSCMPERROR               strcoll(                                                          char* string1, char* string2);
  _NLSCMPERROR               wcscoll(                                                          wchar_t* string1, wchar_t* string2);
  _NLSCMPERROR               _mbscoll(                                                         unsigned char* string1, unsigned char* string2);
  _NLSCMPERROR               _strcoll_l(                                                       char* string1, char* string2, _locale_t locale);
  _NLSCMPERROR               _wcscoll_l(                                                       wchar_t* string1, wchar_t* string2, _locale_t locale);
  _NLSCMPERROR               _mbscoll_l(                                                       unsigned char* string1, unsigned char* string2, _locale_t locale);
  _NLSCMPERROR               _stricoll(                                                        char* string1, char* string2);
  _NLSCMPERROR               _wcsicoll(                                                        wchar_t* string1, wchar_t* string2);
  _NLSCMPERROR               _mbsicoll(                                                        unsigned char* string1, unsigned char* string2);
  _NLSCMPERROR               _stricoll_l(                                                      char* string1, char* string2, _locale_t locale);
  _NLSCMPERROR               _wcsicoll_l(                                                      wchar_t* string1, wchar_t* string2, _locale_t locale);
  _NLSCMPERROR               _mbsicoll_l(                                                      unsigned char* string1, unsigned char* string2, _locale_t locale);
  _NLSCMPERROR               _strncoll(                                                        char* string1, char* string2, size_t count);
  _NLSCMPERROR               _wcsncoll(                                                        wchar_t* string1, wchar_t* string2, size_t count);
  _NLSCMPERROR               _mbsncoll(                                                        unsigned char* string1, unsigned char* string2, size_t count);
  _NLSCMPERROR               _strncoll_l(                                                      char* string1, char* string2, size_t count, _locale_t locale);
  _NLSCMPERROR               _wcsncoll_l(                                                      wchar_t* string1, wchar_t* string2, size_t count, _locale_t locale);
  _NLSCMPERROR               _mbsncoll_l(                                                      unsigned char* string1, unsigned char* string2, size_t count, _locale_t locale);
  _NLSCMPERROR               _strnicoll(                                                       char* string1, char* string2, size_t count);
  _NLSCMPERROR               _wcsnicoll(                                                       wchar_t* string1, wchar_t* string2, size_t count);
  _NLSCMPERROR               _mbsnicoll(                                                       unsigned char* string1, unsigned char* string2, size_t count);
  _NLSCMPERROR               _strnicoll_l(                                                     char* string1, char* string2, size_t count, _locale_t locale);
  _NLSCMPERROR               _wcsnicoll_l(                                                     wchar_t* string1, wchar_t* string2, size_t count, _locale_t locale);
  _NLSCMPERROR               _mbsnicoll_l(                                                     unsigned char* string1, unsigned char* string2, size_t count, _locale_t locale);
  _NLSCMPERROR               _strcmpi(                                                         char* string1, char* string2);
  _NLSCMPERROR               _stricmp(                                                         char* string1, char* string2);
  _NLSCMPERROR               _wcsicmp(                                                         wchar_t* string1, wchar_t* string2);
  _NLSCMPERROR               _mbsicmp(                                                         unsigned char* string1, unsigned char* string2);
  _NLSCMPERROR               _stricmp_l(                                                       char* string1, char* string2, _locale_t locale);
  _NLSCMPERROR               _wcsicmp_l(                                                       wchar_t* string1, wchar_t* string2, _locale_t locale);
  _NLSCMPERROR               _mbsicmp_l(                                                       unsigned char* string1, unsigned char* string2, _locale_t locale);
  _NLSCMPERROR               _wcsnicmp_l(                                                      wchar_t* string1, wchar_t* string2, size_t count, _locale_t locale);
  _NLSCMPERROR               _mbsnicmp_l(                                                      unsigned char* string1, unsigned char* string2, size_t count, _locale_t locale);
  _NLSCMPERROR               _mbsnicmp(                                                        unsigned char* string1, unsigned char* string2, size_t count);
  _NLSCMPERROR               _strnicmp_l(                                                      char* string1, char* string2, size_t count, _locale_t locale);
  _NLSCMPERROR               _wcsnicmp(                                                        wchar_t* string1, wchar_t* string2, size_t count);
  _NLSCMPERROR               _strnicmp(                                                        char* string1, char* string2, size_t count);
  errno_t                    _strupr_s(                                                        char* str, size_t numberOfElements);
  errno_t                    _wcsupr_s(                                                        wchar_t* str, size_t numberOfElements);
  errno_t                    _strupr_s_l(                                                      char* str, size_t numberOfElements, _locale_t locale);
  errno_t                    _wcsupr_s_l(                                                      wchar_t* str, size_t numberOfElements, _locale_t locale);
  errno_t                    _mbsupr_s(                                                        unsigned char* str, size_t numberOfElements);
  errno_t                    _mbsupr_s_l(                                                      unsigned char* str, size_t numberOfElements, _locale_t locale);
  errno_t                    _strlwr_s(                                                        char* str, size_t numberOfElements);
  errno_t                    _strlwr_s_l(                                                      char* str, size_t numberOfElements, _locale_t locale);
  errno_t                    _mbslwr_s(                                                        unsigned char* str, size_t numberOfElements);
  errno_t                    _mbslwr_s_l(                                                      unsigned char* str, size_t numberOfElements, _locale_t locale);
  errno_t                    _wcslwr_s(                                                        wchar_t* str, size_t numberOfElements);
  errno_t                    _wcslwr_s_l(                                                      wchar_t* str, size_t numberOfElements, _locale_t locale);
  RET_EOF                    _snscanf_s(                                                       char* input, size_t length, char* format);
  RET_EOF                    _snscanf_s_l(                                                     char* input, size_t length, char* format, _locale_t locale);
  RET_EOF                    _snwscanf_s(                                                      wchar_t* input, size_t length, wchar_t* format);
  RET_EOF                    _snwscanf_s_l(                                                    wchar_t* input, size_t length, wchar_t* format, _locale_t locale);
  int                        _vsnprintf_s(                                                     char* buffer, size_t sizeOfBuffer, size_t count, char* format, va_list argptr);
  int                        _vsnprintf_s_l(                                                   char* buffer, size_t sizeOfBuffer, size_t count, char* format, _locale_t locale, va_list argptr);
  int                        _vsnwprintf_s(                                                    wchar_t* buffer, size_t sizeOfBuffer, size_t count, wchar_t* format, va_list argptr);
  int                        _vsnwprintf_s_l(                                                  wchar_t* buffer, size_t sizeOfBuffer, size_t count, wchar_t* format, _locale_t locale, va_list argptr);
  int                        swprintf_s(                                                       wchar_t* buffer, size_t sizeOfBuffer, wchar_t* format);
  int                        _swprintf_s_l(                                                    wchar_t* buffer, size_t sizeOfBuffer, wchar_t* format, _locale_t locale);
  int                        _sprintf_s_l(                                                     char* buffer, size_t sizeOfBuffer, char* format, _locale_t locale);
  int                        sprintf_s(                                                        char* buffer, size_t sizeOfBuffer, char* format);
  RET_EOF                    _swscanf_s_l(                                                     wchar_t* buffer, wchar_t* format, _locale_t locale);
  RET_EOF                    swscanf_s(                                                        wchar_t* buffer, wchar_t* format);
  RET_EOF                    _sscanf_s_l(                                                      char* buffer, char* format, _locale_t locale);
  RET_EOF                    sscanf_s(                                                         char* buffer, char* format);
  int                        vswprintf_s(                                                      wchar_t* buffer, size_t numberOfElements, wchar_t* format, va_list argptr);
  int                        _vswprintf_s_l(                                                   wchar_t* buffer, size_t numberOfElements, wchar_t* format, _locale_t locale, va_list argptr);
  int                        _vsprintf_s_l(                                                    char* buffer, size_t numberOfElements, char* format, _locale_t locale, va_list argptr);
  int                        vsprintf_s(                                                       char* buffer, size_t numberOfElements, char* format, va_list argptr);
  char*                      _strdup_dbg(                                                      char* strSource, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  wchar_t*                   _wcsdup_dbg(                                                      wchar_t* strSource, DBG_BLOCK_TYPE blockType, char* filename, int linenumber);
  size_t_INT_MAX             strxfrm(                                                          char* strDest, char* strSource, size_t count);
  size_t_INT_MAX             wcsxfrm(                                                          wchar_t* strDest, wchar_t* strSource, size_t count);
  size_t_INT_MAX             _strxfrm_l(                                                       char* strDest, char* strSource, size_t count, _locale_t locale);
  size_t_INT_MAX             _wcsxfrm_l(                                                       wchar_t* strDest, wchar_t* strSource, size_t count, _locale_t locale);
  size_t                     mbrlen(                                                           char* str, size_t maxSize, mbstate_t mbstate);
  _NLSCMPERROR               _mbsnbcoll(                                                       unsigned char* string1, unsigned char* string2, size_t count);
  _NLSCMPERROR               _mbsnbcoll_l(                                                     unsigned char* string1, unsigned char* string2, size_t count, _locale_t locale);
  _NLSCMPERROR               _mbsnbicoll(                                                      unsigned char* string1, unsigned char* string2, size_t count);
  _NLSCMPERROR               _mbsnbicoll_l(                                                    unsigned char* string1, unsigned char* string2, size_t count, _locale_t locale);
  errno_t                    _mbsnbset_s(                                                      unsigned char* str, size_t size, unsigned int c, size_t count);
  errno_t                    _mbsnbset_s_l(                                                    unsigned char* str, size_t size, unsigned int c, size_t count, _locale_t locale);
  int                        _scprintf_p(                                                      char* format);
  int                        _scprintf_p_l(                                                    char* format, _locale_t locale);
  int                        _scwprintf_p(                                                     wchar_t* format);
  int                        _scwprintf_p_l(                                                   wchar_t* format, _locale_t locale);
  int                        _snprintf_s(                                                      char* buffer, size_t sizeOfBuffer, size_t count, char* format);
  int                        _snprintf_s_l(                                                    char* buffer, size_t sizeOfBuffer, size_t count, char* format, _locale_t locale);
  int                        _snwprintf_s(                                                     wchar_t* buffer, size_t sizeOfBuffer, size_t count, wchar_t* format);
  int                        _snwprintf_s_l(                                                   wchar_t* buffer, size_t sizeOfBuffer, size_t count, wchar_t* format, _locale_t locale);
  int                        _snprintf(                                                        char* buffer, size_t count, char* format);
  int                        _snprintf_l(                                                      char* buffer, size_t count, char* format, _locale_t locale);
  int                        _snwprintf(                                                       wchar_t* buffer, size_t count, wchar_t* format);
  int                        _snwprintf_l(                                                     wchar_t* buffer, size_t count, wchar_t* format, _locale_t locale);
  errno_t                    _strnset_s(                                                       char* str, size_t numberOfElements, int c, size_t count);
  errno_t                    _wcsnset_s(                                                       wchar_t* str, size_t numberOfElements, wchar_t c, size_t count);
  errno_t                    _mbsnset_s(                                                       unsigned char* str, size_t numberOfElements, unsigned int c, size_t count);
  errno_t                    _mbsnset_s_l(                                                     unsigned char* str, size_t numberOfElements, unsigned int c, size_t count, _locale_t locale);
  errno_t                    _strset_s(                                                        char* str, size_t numberOfElements, int c);
  errno_t                    _wcsset_s(                                                        wchar_t* str, size_t numberOfElements, wchar_t c);
  errno_t                    _mbsset_s(                                                        unsigned char* str, size_t numberOfElements, unsigned int c);
  errno_t                    _mbsset_s_l(                                                      unsigned char* str, size_t numberOfElements, unsigned int c, _locale_t locale);
  int                        _findclose(                                                       intptr_t handle);
  intptr_t                   _findfirst(                                                       char* filespec, struct _finddata_t* fileinfo);
  intptr_t                   _findfirst32(                                                     char* filespec, struct _finddata32_t* fileinfo);
  intptr_t                   _findfirst64(                                                     char* filespec, struct __finddata64_t* fileinfo);
  intptr_t                   _findfirsti64(                                                    char* filespec, struct _finddatai64_t* fileinfo);
  intptr_t                   _findfirst32i64(                                                  char* filespec, struct _finddata32i64_t* fileinfo);
  intptr_t                   _findfirst64i32(                                                  char* filespec, struct _finddata64i32_t* fileinfo);
  intptr_t                   _wfindfirst(                                                      wchar_t* filespec, struct _wfinddata_t* fileinfo);
  intptr_t                   _wfindfirst32(                                                    wchar_t* filespec, struct _wfinddata32_t* fileinfo);
  intptr_t                   _wfindfirst64(                                                    wchar_t* filespec, struct _wfinddata64_t* fileinfo);
  intptr_t                   _wfindfirsti64(                                                   wchar_t* filespec, struct _wfinddatai64_t* fileinfo);
  intptr_t                   _wfindfirst32i64(                                                 wchar_t* filespec, struct _wfinddata32i64_t* fileinfo);
  intptr_t                   _wfindfirst64i32(                                                 wchar_t* filespec, struct _wfinddata64i32_t* fileinfo);
  int                        _findnext(                                                        intptr_t handle, struct _finddata_t* fileinfo);
  int                        _findnext32(                                                      intptr_t handle, struct _finddata32_t* fileinfo);
  int                        _findnext64(                                                      intptr_t handle, struct __finddata64_t* fileinfo);
  int                        _findnexti64(                                                     intptr_t handle, struct _finddatai64_t* fileinfo);
  int                        _findnext32i64(                                                   intptr_t handle, struct _finddata32i64_t* fileinfo);
  int                        _findnext64i32(                                                   intptr_t handle, struct _finddata64i32_t* fileinfo);
  int                        _wfindnext(                                                       intptr_t handle, struct _wfinddata_t* fileinfo);
  int                        _wfindnext32(                                                     intptr_t handle, struct _wfinddata32_t* fileinfo);
  int                        _wfindnext64(                                                     intptr_t handle, struct _wfinddata64_t* fileinfo);
  int                        _wfindnexti64(                                                    intptr_t handle, struct _wfinddatai64_t* fileinfo);
  int                        _wfindnext32i64(                                                  intptr_t handle, struct _wfinddatai64_t* fileinfo);
  int                        _wfindnext64i32(                                                  intptr_t handle, struct _wfinddata64i32_t* fileinfo);
  char*                      asctime(                                                          struct tm* timeptr);
  wchar_t*                   _wasctime(                                                        struct tm* timeptr);
  errno_t                    asctime_s(                                                        char* buffer, size_t numberOfElements, struct tm* _tm);
  errno_t                    _wasctime_s(                                                      wchar_t* buffer, size_t numberOfElements);
  clock_t                    clock(                                                            );
  char*                      ctime(                                                            time_t* timer);
  char*                      _ctime32(                                                         __time32_t* timer);
  char*                      _ctime64(                                                         __time64_t* timer);
  wchar_t*                   _wctime(                                                          time_t* timer);
  wchar_t*                   _wctime32(                                                        __time32_t* timer);
  wchar_t*                   _wctime64(                                                        __time64_t* timer);
  errno_t                    _ctime32_s(                                                       char* buffer, size_t numberOfElements, __time32_t* time);
  errno_t                    _ctime64_s(                                                       char* buffer, size_t numberOfElements, __time64_t* time);
  errno_t                    _wctime32_s(                                                      wchar_t* buffer, size_t numberOfElements, __time32_t* time);
  errno_t                    _wctime64_s(                                                      wchar_t* buffer, size_t numberOfElements, __time64_t* time);
  void                       _ftime(                                                           struct _timeb* timeptr);
  void                       _ftime32(                                                         struct __timeb32* timeptr);
  void                       _ftime64(                                                         struct __timeb64* timeptr);
  errno_t                    _ftime32_s(                                                       struct __timeb32* timeptr);
  errno_t                    _ftime64_s(                                                       struct __timeb64* timeptr);
  int                        _futime(                                                          int fd, struct _utimbuf* filetime);
  int                        _futime32(                                                        int fd, struct __utimbuf32* filetime);
  int                        _futime64(                                                        int fd, struct __utimbuf64* filetime);
  struct tm*                 gmtime(                                                           time_t* timer);
  struct tm*                 _gmtime32(                                                        __time32_t* timer);
  struct tm*                 _gmtime64(                                                        __time64_t* timer);
  errno_t                    _gmtime32_s(                                                      struct tm* _tm, __time32_t* time);
  errno_t                    _gmtime64_s(                                                      struct tm* _tm, __time64_t* time);
  struct tm*                 localtime(                                                        time_t* timer);
  struct tm*                 _localtime32(                                                     __time32_t* timer);
  struct tm*                 _localtime64(                                                     __time64_t* timer);
  errno_t                    _localtime32_s(                                                   struct tm* _tm, __time32_t* time);
  errno_t                    _localtime64_s(                                                   struct tm* _tm, __time64_t* time);
  time_t                     _mkgmtime(                                                        struct tm* timeptr);
  __time32_t                 _mkgmtime32(                                                      struct tm* timeptr);
  __time64_t                 _mkgmtime64(                                                      struct tm* timeptr);
  time_t                     mktime(                                                           struct tm* timeptr);
  __time32_t                 _mktime32(                                                        struct tm* timeptr);
  __time64_t                 _mktime64(                                                        struct tm* timeptr);
  char*                      _strdate(                                                         char* datestr);
  wchar_t*                   _wstrdate(                                                        wchar_t* datestr);
  errno_t                    _strdate_s(                                                       char* buffer, size_t numberOfElements);
  errno_t                    _wstrdate_s(                                                      wchar_t* buffer, size_t numberOfElements);
  char*                      _strtime(                                                         char* timestr);
  wchar_t*                   _wstrtime(                                                        wchar_t* timestr);
  errno_t                    _strtime_s(                                                       char* buffer, size_t numberOfElements);
  errno_t                    _wstrtime_s(                                                      wchar_t* buffer, size_t numberOfElements);
  time_t                     time(                                                             time_t* timer);
  __time32_t                 _time32(                                                          __time32_t* timer);
  __time64_t                 _time64(                                                          __time64_t* timer);
  void                       _tzset(                                                           );
  int                        _utime(                                                           char* filename, struct _utimbuf* times);
  int                        _utime32(                                                         char* filename, struct __utimbuf32* times);
  int                        _utime64(                                                         char* filename, struct __utimbuf64* times);
  int                        _wutime(                                                          wchar_t* filename, struct _utimbuf* times);
  int                        _wutime32(                                                        wchar_t* filename, struct __utimbuf32* times);
  int                        _wutime64(                                                        wchar_t* filename, struct __utimbuf64* times);
  double                     _difftime32(                                                      __time32_t timer1, __time32_t timer0);
  double                     _difftime64(                                                      __time64_t timer1, __time64_t timer0);
  double                     difftime(                                                         time_t timer1, time_t timer0);
  size_t                     strftime(                                                         char* strDest, size_t maxsize, char* format, struct tm* timeptr);
  size_t                     _strftime_l(                                                      char* strDest, size_t maxsize, char* format, struct tm* timeptr, _locale_t locale);
  size_t                     wcsftime(                                                         wchar_t* strDest, size_t maxsize, wchar_t* format, struct tm* timeptr);
  size_t                     _wcsftime_l(                                                      wchar_t* strDest, size_t maxsize, wchar_t* format, struct tm* timeptr, _locale_t locale);
  errno_t                    _get_dstbias(                                                     int* seconds);
  errno_t                    _get_daylight(                                                    int* hours);
  errno_t                    _get_timezone(                                                    long* seconds);
  errno_t                    _get_tzname(                                                      size_t* pReturnValue, char* timeZoneName, size_t sizeInBytes, int index);
  unsigned                   _getsystime(                                                      struct tm* _tm);
  unsigned                   _setsystime(                                                      struct tm* _tm, unsigned millisec);
  output_format              _get_output_format(                                               );
  output_format              _set_output_format(                                               output_format format);
  int                        _get_printf_count_output(                                         );
  int                        _set_printf_count_output(                                         int enable);
  void                       _lock(                                                            LOCK_NUM locknum);
  void                       _unlock(                                                          LOCK_NUM locknum);
  void                       _initterm(                                                        _PVFV* pfbegin, _PVFV* pfend);
  int                        _initterm_e(                                                      _PVFV* pfbegin, _PVFV* pfend);
  PVOID                      __RTDynamicCast(                                                  PVOID inptr, LONG VfDelta, PVOID SrcType, PVOID TargetType, BOOL isReference);
  int*                       __p__commode(                                                     );
  void                       _beep(                                                            unsigned frequency, unsigned duration);
]]
ffi.load( 'msvcrxx.dll' )
