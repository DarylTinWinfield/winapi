require( "ffi/winapi/headers/windows" )
require( "ffi/winapi/headers/multimedia" )
local ffi = require( "ffi" )
ffi.cdef [[
  MMRESULT    auxGetDevCaps(               UINT_PTR uDeviceID, LPAUXCAPS lpCaps, UINT cbCaps);
  UINT        auxGetNumDevs(               );
  MMRESULT    auxGetVolume(                UINT uDeviceID, LPDWORD lpdwVolume);
  MMRESULT    auxOutMessage(               UINT uDeviceID, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);
  MMRESULT    auxSetVolume(                UINT uDeviceID, DWORD dwVolume);
  MMRESULT    joyConfigChanged(            DWORD dwFlags);
  MMRESULT    joyGetDevCaps(               UINT_PTR uJoyID, LPJOYCAPS pjc, UINT cbjc);
  UINT        joyGetNumDevs(               );
  MMRESULT    joyGetPos(                   UINT uJoyID, LPJOYINFO pji);
  MMRESULT    joyGetPosEx(                 UINT uJoyID, LPJOYINFOEX pji);
  MMRESULT    joyGetThreshold(             UINT uJoyID, LPUINT puThreshold);
  MMRESULT    joyReleaseCapture(           UINT uJoyID);
  MMRESULT    joySetCapture(               HWND hwnd, UINT uJoyID, UINT uPeriod, BOOL fChanged);
  MMRESULT    joySetThreshold(             UINT uJoyID, UINT uThreshold);
  BOOL        mciExecute(                  LPCSTR pszCommand);
  HANDLE      mciGetCreatorTask(           MCIDEVICEID IDDevice);
  MCIDEVICEID mciGetDeviceID(              LPCTSTR lpszDevice);
  MCIDEVICEID mciGetDeviceIDFromElementID( DWORD dwElementID, LPCTSTR lpstrType);
  BOOL        mciGetErrorString(           DWORD fdwError, LPTSTR lpszErrorText, UINT cchErrorText);
  YIELDPROC   mciGetYieldProc(             MCIDEVICEID IDDevice, LPDWORD lpdwYieldData);
  MCIERROR    mciSendCommand(              MCIDEVICEID IDDevice, UINT uMsg, DWORD fdwCommand, DWORD_PTR dwParam);
  MCIERROR    mciSendString(               LPCTSTR lpszCommand, LPTSTR lpszReturnString, UINT cchReturn, HANDLE hwndCallback);
  UINT        mciSetYieldProc(             MCIDEVICEID IDDevice, YIELDPROC yp, DWORD dwYieldData);
  MMRESULT    midiConnect(                 HMIDI hMidi, HMIDIOUT hmo, LPVOID pReserved);
  MMRESULT    midiDisconnect(              HMIDI hMidi, HMIDIOUT hmo, LPVOID pReserved);
  MMRESULT    midiInAddBuffer(             HMIDIIN hMidiIn, LPMIDIHDR lpMidiInHdr, UINT cbMidiInHdr);
  MMRESULT    midiInClose(                 HMIDIIN hMidiIn);
  MMRESULT    midiInGetDevCaps(            UINT_PTR uDeviceID, LPMIDIINCAPS lpMidiInCaps, UINT cbMidiInCaps);
  MMRESULT    midiInGetErrorText(          MMRESULT wError, LPTSTR lpText, UINT cchText);
  MMRESULT    midiInGetID(                 HMIDIIN hmi, LPUINT puDeviceID);
  UINT        midiInGetNumDevs(            );
  MMRESULT    midiInMessage(               HMIDIIN deviceID, UINT msg, DWORD_PTR dw1, DWORD_PTR dw2);
  MMRESULT    midiInOpen(                  LPHMIDIIN lphMidiIn, UINT_PTR uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwCallbackInstance, WINAPI_midiInOutOpenFlags dwFlags);
  MMRESULT    midiInPrepareHeader(         HMIDIIN hMidiIn, LPMIDIHDR lpMidiInHdr, UINT cbMidiInHdr);
  MMRESULT    midiInReset(                 HMIDIIN hMidiIn);
  MMRESULT    midiInStart(                 HMIDIIN hMidiIn);
  MMRESULT    midiInStop(                  HMIDIIN hMidiIn);
  MMRESULT    midiInUnprepareHeader(       HMIDIIN hMidiIn, LPMIDIHDR lpMidiInHdr, UINT cbMidiInHdr);
  MMRESULT    midiOutCacheDrumPatches(     HMIDIOUT hmo, UINT wPatch, WORD* lpKeyArray, UINT wFlags);
  MMRESULT    midiOutCachePatches(         HMIDIOUT hmo, UINT wBank, WORD* lpPatchArray, UINT wFlags);
  MMRESULT    midiOutClose(                HMIDIOUT hmo);
  MMRESULT    midiOutGetDevCaps(           UINT_PTR uDeviceID, LPMIDIOUTCAPS lpMidiOutCaps, UINT cbMidiOutCaps);
  UINT        midiOutGetErrorText(         MMRESULT mmrError, LPTSTR lpText, UINT cchText);
  MMRESULT    midiOutGetID(                HMIDIOUT hmo, LPUINT puDeviceID);
  UINT        midiOutGetNumDevs(           );
  MMRESULT    midiOutGetVolume(            HMIDIOUT hmo, LPDWORD lpdwVolume);
  MMRESULT    midiOutLongMsg(              HMIDIOUT hmo, LPMIDIHDR lpMidiOutHdr, UINT cbMidiOutHdr);
  MMRESULT    midiOutMessage(              HMIDIOUT deviceID, UINT msg, DWORD_PTR dw1, DWORD_PTR dw2);
  MMRESULT    midiOutOpen(                 LPHMIDIOUT lphmo, UINT_PTR uDeviceID, DWORD_PTR dwCallback, DWORD_PTR dwCallbackInstance, WINAPI_midiInOutOpenFlags dwFlags);
  MMRESULT    midiOutPrepareHeader(        HMIDIOUT hmo, LPMIDIHDR lpMidiOutHdr, UINT cbMidiOutHdr);
  MMRESULT    midiOutReset(                HMIDIOUT hmo);
  MMRESULT    midiOutSetVolume(            HMIDIOUT hmo, DWORD dwVolume);
  MMRESULT    midiOutShortMsg(             HMIDIOUT hmo, DWORD dwMsg);
  MMRESULT    midiOutUnprepareHeader(      HMIDIOUT hmo, LPMIDIHDR lpMidiOutHdr, UINT cbMidiOutHdr);
  MMRESULT    midiStreamClose(             HMIDISTRM hStream);
  MMRESULT    midiStreamOpen(              LPHMIDISTRM lphStream, LPUINT puDeviceID, DWORD cMidi, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
  MMRESULT    midiStreamOut(               HMIDISTRM hMidiStream, LPMIDIHDR lpMidiHdr, UINT cbMidiHdr);
  MMRESULT    midiStreamPause(             HMIDISTRM hms);
  MMRESULT    midiStreamPosition(          HMIDISTRM hms, LPMMTIME pmmt, UINT cbmmt);
  MMRESULT    midiStreamProperty(          HMIDISTRM hm, LPBYTE lppropdata, DWORD dwProperty);
  MMRESULT    midiStreamRestart(           HMIDISTRM hms);
  MMRESULT    midiStreamStop(              HMIDISTRM hms);
  MMRESULT    mixerClose(                  HMIXER hmx);
  MMRESULT    mixerGetControlDetails(      HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);
  MMRESULT    mixerGetDevCaps(             UINT_PTR uMxId, LPMIXERCAPS pmxcaps, UINT cbmxcaps);
  MMRESULT    mixerGetID(                  HMIXEROBJ hmxobj, UINT* puMxId, DWORD fdwId);
  MMRESULT    mixerGetLineControls(        HMIXEROBJ hmxobj, LPMIXERLINECONTROLS pmxlc, DWORD fdwControls);
  MMRESULT    mixerGetLineInfo(            HMIXEROBJ hmxobj, LPMIXERLINE pmxl, DWORD fdwInfo);
  UINT        mixerGetNumDevs(             );
  DWORD       mixerMessage(                HMIXER driverID, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);
  MMRESULT    mixerOpen(                   LPHMIXER phmx, UINT uMxId, DWORD_PTR dwCallback, DWORD_PTR dwInstance, DWORD fdwOpen);
  MMRESULT    mixerSetControlDetails(      HMIXEROBJ hmxobj, LPMIXERCONTROLDETAILS pmxcd, DWORD fdwDetails);
  MMRESULT    mmioAdvance(                 HMMIO hmmio, LPMMIOINFO lpmmioinfo, UINT wFlags);
  MMRESULT    mmioAscend(                  HMMIO hmmio, LPMMCKINFO lpck, UINT wFlags);
  MMRESULT    mmioClose(                   HMMIO hmmio, WINAPI_mmioCloseFlags wFlags);
  MMRESULT    mmioCreateChunk(             HMMIO hmmio, LPMMCKINFO lpck, WINAPI_mmioCreateChunkFlags wFlags);
  MMRESULT    mmioDescend(                 HMMIO hmmio, LPMMCKINFO lpck, LPMMCKINFO lpckParent, WINAPI_mmioDescendFlags wFlags);
  MMRESULT    mmioFlush(                   HMMIO hmmio, WINAPI_mmioFlushFlags fuFlush);
  MMRESULT    mmioGetInfo(                 HMMIO hmmio, LPMMIOINFO lpmmioinfo, UINT wFlags);
  LPMMIOPROC  mmioInstallIOProc(           FOURCC fccIOProc, LPMMIOPROC pIOProc, WINAPI_mmioInstallIOProcFlags dwFlags);
  HMMIO       mmioOpen(                    LPTSTR szFilename, LPMMIOINFO lpmmioinfo, DWORD dwOpenFlags);
  LONG        mmioRead(                    HMMIO hmmio, HPSTR pch, LONG cch);
  MMRESULT    mmioRename(                  LPCTSTR szFilename, LPCTSTR szNewFilename, LPMMIOINFO lpmmioinfo, DWORD dwRenameFlags);
  LONG        mmioSeek(                    HMMIO hmmio, LONG lOffset, WINAPI_mmioSeekOffset iOrigin);
  LRESULT     mmioSendMessage(             HMMIO hmmio, UINT wMsg, LPARAM lParam1, LPARAM lParam2);
  MMRESULT    mmioSetBuffer(               HMMIO hmmio, LPSTR pchBuffer, LONG cchBuffer, UINT wFlags);
  MMRESULT    mmioSetInfo(                 HMMIO hmmio, LPMMIOINFO lpmmioinfo, UINT wFlags);
  FOURCC      mmioStringToFOURCC(          LPCTSTR sz, WINAPI_mmioStringToFOURCCFlags wFlags);
  LONG        mmioWrite(                   HMMIO hmmio, WINAPI_LPVOID_char* pch, LONG cch);
  BOOL        PlaySound(                   LPCTSTR pszSound, HMODULE hmod, DWORD fdwSound);
  BOOL        sndPlaySound(                LPCTSTR lpszSound, UINT fuSound);
  MMRESULT    timeBeginPeriod(             UINT uPeriod);
  MMRESULT    timeEndPeriod(               UINT uPeriod);
  MMRESULT    timeGetDevCaps(              LPTIMECAPS ptc, UINT cbtc);
  MMRESULT    timeGetSystemTime(           LPMMTIME pmmt, UINT cbmmt);
  DWORD       timeGetTime(                 );
  MMRESULT    timeKillEvent(               UINT uTimerID);
  MMRESULT    timeSetEvent(                UINT uDelay, UINT uResolution, LPTIMECALLBACK lpTimeProc, DWORD_PTR dwUser, UINT fuEvent);
  MMRESULT    waveInAddBuffer(             HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
  MMRESULT    waveInClose(                 HWAVEIN hwi);
  MMRESULT    waveInGetDevCaps(            UINT_PTR uDeviceID, LPWAVEINCAPS pwic, UINT cbwic);
  MMRESULT    waveInGetErrorText(          MMRESULT mmrError, LPTSTR pszText, UINT cchText);
  MMRESULT    waveInGetID(                 HWAVEIN hwi, LPUINT puDeviceID);
  UINT        waveInGetNumDevs(            );
  MMRESULT    waveInGetPosition(           HWAVEIN hwi, LPMMTIME pmmt, UINT cbmmt);
  MMRESULT    waveInMessage(               HWAVEIN deviceID, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);
  MMRESULT    waveInOpen(                  LPHWAVEIN phwi, UINT_PTR uDeviceID, LPWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwCallbackInstance, WINAPI_waveInOutOpenFlags fdwOpen);
  MMRESULT    waveInPrepareHeader(         HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
  MMRESULT    waveInReset(                 HWAVEIN hwi);
  MMRESULT    waveInStart(                 HWAVEIN hwi);
  MMRESULT    waveInStop(                  HWAVEIN hwi);
  MMRESULT    waveInUnprepareHeader(       HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
  MMRESULT    waveOutBreakLoop(            HWAVEOUT hwo);
  MMRESULT    waveOutClose(                HWAVEOUT hwo);
  MMRESULT    waveOutGetDevCaps(           UINT_PTR uDeviceID, LPWAVEOUTCAPS pwoc, UINT cbwoc);
  MMRESULT    waveOutGetErrorText(         MMRESULT mmrError, LPTSTR pszText, UINT cchText);
  MMRESULT    waveOutGetID(                HWAVEOUT hwo, LPUINT puDeviceID);
  UINT        waveOutGetNumDevs(           );
  MMRESULT    waveOutGetPitch(             HWAVEOUT hwo, LPDWORD pdwPitch);
  MMRESULT    waveOutGetPlaybackRate(      HWAVEOUT hwo, LPDWORD pdwRate);
  MMRESULT    waveOutGetPosition(          HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt);
  MMRESULT    waveOutGetVolume(            HWAVEOUT hwo, LPDWORD pdwVolume);
  MMRESULT    waveOutMessage(              HWAVEOUT deviceID, UINT uMsg, DWORD_PTR dwParam1, DWORD_PTR dwParam2);
  MMRESULT    waveOutOpen(                 LPHWAVEOUT phwo, UINT_PTR uDeviceID, LPWAVEFORMATEX pwfx, DWORD_PTR dwCallback, DWORD_PTR dwCallbackInstance, WINAPI_waveInOutOpenFlags fdwOpen);
  MMRESULT    waveOutPause(                HWAVEOUT hwo);
  MMRESULT    waveOutPrepareHeader(        HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
  MMRESULT    waveOutReset(                HWAVEOUT hwo);
  MMRESULT    waveOutRestart(              HWAVEOUT hwo);
  MMRESULT    waveOutSetPitch(             HWAVEOUT hwo, DWORD dwPitch);
  MMRESULT    waveOutSetPlaybackRate(      HWAVEOUT hwo, DWORD dwRate);
  MMRESULT    waveOutSetVolume(            HWAVEOUT hwo, DWORD dwVolume);
  MMRESULT    waveOutUnprepareHeader(      HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
  MMRESULT    waveOutWrite(                HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
]]
return ffi.load( "Winmm.dll" )
