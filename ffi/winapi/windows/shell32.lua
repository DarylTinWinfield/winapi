require( 'ffi/winapi/headers/windows' )
require( 'ffi/winapi/headers/shell' )
require( 'ffi/winapi/headers/gdi' )
require( 'ffi/winapi/headers/registry' )
local ffi = require( 'ffi' )
ffi.cdef [[
  HICON             DuplicateIcon(                               HINSTANCE hInst, HICON hIcon);
  HICON             ExtractAssociatedIcon(                       HINSTANCE hInst, LPTSTR lpIconPath, LPWORD lpiIcon);
  HICON             ExtractIcon(                                 HINSTANCE hInst, LPCTSTR lpszExeFileName, UINT nIconIndex);
  UINT              ExtractIconEx(                               LPCTSTR lpszFile, int nIconIndex, HICON* phiconLarge, HICON* phiconSmall, UINT nIcons);
  HRESULT           AssocCreateForClasses(                       WINAPI_ASSOCIATIONELEMENT* rgClasses, ULONG cClasses, REFIID riid, void** ppv);
  HRESULT           AssocGetDetailsOfPropKey(                    IShellFolder* psf, PCUITEMID_CHILD pidl, PROPERTYKEY* pkey, VARIANT* pv, BOOL* pfFoundPropKey);
  int               CallCPLEntry16(                              HINSTANCE hInst, FARPROC16 lpfnEntry, HWND hwndCPL, UINT msg, LPARAM lParam1, LPARAM lParam2);
  HRESULT           CDefFolderMenu_Create2(                      PCIDLIST_ABSOLUTE pidlFolder, HWND hwnd, UINT cidl, PCUITEMID_CHILD_ARRAY* apidl, IShellFolder* psf, LPFNDFMCALLBACK lpfn, UINT nKeys, WINAPI_HKEY* ahkeys, IContextMenu** ppcm);
  HRESULT           CIDLData_CreateFromIDArray(                  PCIDLIST_ABSOLUTE pidlFolder, UINT cidl, PCUIDLIST_RELATIVE_ARRAY apidl, IDataObject** ppdtobj);
  LPWSTR*           CommandLineToArgvW(                          LPCWSTR lpCmdLine, int* pNumArgs);
  BOOL              DAD_AutoScroll(                              HWND hwnd, AUTO_SCROLL_DATA* pad, WINAPI_POINT* pptNow);
  BOOL              DAD_DragEnterEx(                             HWND hwndTarget, WINAPI_POINT ptStart);
  BOOL              DAD_DragLeave(                               );
  BOOL              DAD_DragMove(                                POINT pt);
  BOOL              DAD_SetDragImage(                            HIMAGELIST him, POINT* pptOffset);
  BOOL              DAD_ShowDragImage(                           BOOL fShow);
  DWORD             DoEnvironmentSubst(                          LPTSTR pszString, UINT cchString);
  VOID              DragAcceptFiles(                             HWND hWnd, BOOL fAccept);
  VOID              DragFinish(                                  HDROP hDrop);
  UINT              DragQueryFile(                               HDROP hDrop, UINT iFile, LPTSTR lpszFile, UINT cch);
  BOOL              DragQueryPoint(                              HDROP hDrop, LPPOINT lppt);
  int               DriveType(                                   int iDrive);
  HICON             ExtractAssociatedIconEx(                     HINSTANCE hInst, LPTSTR lpIconPath, LPWORD lpiIconIndex, LPWORD lpiIconId);
  BOOL              FileIconInit(                                BOOL fRestoreCache);
  HINSTANCE         FindExecutable(                              LPCTSTR lpFile, LPCTSTR lpDirectory, LPTSTR lpResult);
  HRESULT           GetCurrentProcessExplicitAppUserModelID(     PWSTR* AppID);
  BOOL              GetFileNameFromBrowse(                       HWND hwnd, LPWSTR pszFilePath, UINT cchFilePath, LPCWSTR pszWorkingDir, LPCWSTR pszDefExt, LPCWSTR pszFilters, LPCWSTR szTitle);
  BOOL              GUIDFromString(                              LPCTSTR psz, LPGUID pguid);
  PIDLIST_RELATIVE  ILAppendID(                                  PIDLIST_RELATIVE pidl, LPSHITEMID pmkid, BOOL fAppend);
  PIDLIST_RELATIVE  ILClone(                                     PCUIDLIST_RELATIVE pidl);
  PITEMID_CHILD     ILCloneFirst(                                PCUIDLIST_RELATIVE pidl);
  PIDLIST_ABSOLUTE  ILCombine(                                   PCIDLIST_ABSOLUTE pidl1, PCUIDLIST_RELATIVE pidl2);
  PIDLIST_ABSOLUTE  ILCreateFromPath(                            LPCWSTR pszPath);
  PIDLIST_ABSOLUTE  ILCreateFromPath(                            LPCSTR pszPath);
  PUIDLIST_RELATIVE ILFindChild(                                 PCIDLIST_ABSOLUTE pidlParent, PCIDLIST_ABSOLUTE pidlChild);
  PUITEMID_CHILD    ILFindLastID(                                PCUIDLIST_RELATIVE pidl);
  void              ILFree(                                      PIDLIST_RELATIVE pidl);
  PUIDLIST_RELATIVE ILGetNext(                                   PCUIDLIST_RELATIVE pidl);
  UINT              ILGetSize(                                   PCUIDLIST_RELATIVE pidl);
  BOOL              ILIsEqual(                                   PCIDLIST_ABSOLUTE pidl1, PCIDLIST_ABSOLUTE pidl2);
  BOOL              ILIsParent(                                  PCIDLIST_ABSOLUTE pidl1, PCIDLIST_ABSOLUTE pidl2, BOOL fImmediate);
  HRESULT           ILLoadFromStream(                            IStream* pstm, PIDLIST_RELATIVE* pidl);
  BOOL              ILRemoveLastID(                              PUIDLIST_RELATIVE pidl);
  HRESULT           ILSaveToStream(                              IStream* pstm, PCUIDLIST_RELATIVE pidl);
  BOOL              InitNetworkAddressControl(                   );
  int               IsNetDrive(                                  int iDrive);
  BOOL              IsUserAnAdmin(                               );
  BOOL              LinkWindow_RegisterClass(                    );
  BOOL              LinkWindow_UnregisterClass(                  );
  BOOL              NTSHChangeNotifyDeregister(                  ULONG ulID);
  void              SHChangeNotify(                              WINAPI_ShellChangeNotifyEvent wEventId, WINAPI_ShellChangeNotifyFlag uFlags, LPCVOID dwItem1, LPCVOID dwItem2);
  ULONG             NTSHChangeNotifyRegister(                    HWND hwnd, int fSources, LONG fEvents, UINT wMsg, int cEntries, SHChangeNotifyEntry* pfsne);
  IStream*          OpenRegStream(                               HKEY hkey, LPCWSTR pszSubkey, LPCWSTR pszValue, WINAPI_STGM_FLAGS grfMode);
  bool              ParseField(                                  LPCTSTR* szData, int n, LPTSTR* szBuf, int iBufLen);
  int               PathCleanupSpec(                             LPCWSTR pszDir, LPWSTR pszSpec);
  void              PathGetShortPath(                            LPWSTR pszLongPath);
  int               PathIsExe(                                   LPCWSTR szfile);
  BOOL              PathIsSlow(                                  LPCTSTR pszFile, DWORD dwFileAttr);
  BOOL              PathMakeUniqueName(                          LPWSTR pszUniqueName, UINT cchMax, LPCWSTR pszTemplate, LPCWSTR pszLongPlate, LPCWSTR pszDir);
  LONG              PathProcessCommand(                          LPCWSTR lpSrc, LPWSTR lpDest, int iDestMax, DWORD dwFlags);
  BOOL              PathResolve(                                 LPWSTR pszPath, LPCWSTR* dirs, UINT fFlags);
  BOOL              PathYetAnotherMakeUniqueName(                LPWSTR pszUniqueName, LPCWSTR pszPath, LPCWSTR pszShort, LPCWSTR pszFileSpec);
  int               PickIconDlg(                                 HWND hwnd, LPWSTR pszIconPath, UINT cchIconPath, int* piIconIndex);
  BOOL              ReadCabinetState(                            CABINETSTATE* pcs, int cLength);
  int               RealDriveType(                               int iDrive, BOOL fOKToHitNet);
  int               RestartDialog(                               HWND hParent, LPCWSTR pszPrompt, DWORD dwFlags);
  int               RestartDialogEx(                             HWND hParent, LPCWSTR pszPrompt, DWORD dwFlags, HWND dwReasonCode);
  HRESULT           SetCurrentProcessExplicitAppUserModelID(     PCWSTR AppID);
  int               SHAddFromPropSheetExtArray(                  HPSXA hpsxa, LPFNADDPROPSHEETPAGE lpfnAddPage, LPARAM lParam);
  void              SHAddToRecentDocs(                           UINT uFlags, LPCVOID pv);
  LPVOID            SHAlloc(                                     SIZE_T cb);
  UINT_PTR          SHAppBarMessage(                             DWORD dwMessage, PAPPBARDATA pData);
  HRESULT           SHAssocEnumHandlers(                         LPCWSTR pszExtra, ASSOC_FILTER afFilter, IEnumAssocHandlers** ppEnumHandler);
  HRESULT           SHAssocEnumHandlersForProtocolByApplication( PCWSTR protocol, REFIID riid, void** enumHandlers);
  HRESULT           SHBindToFolderIDListParent(                  IShellFolder* psfRoot, PCUIDLIST_RELATIVE pidl, REFIID riid, void** ppv, PCUITEMID_CHILD* ppidlLast);
  HRESULT           SHBindToObject(                              IShellFolder* psf, PCUIDLIST_RELATIVE pidl, IBindCtx* pbc, REFIID riid, void** ppv);
  HRESULT           SHBindToParent(                              PCIDLIST_ABSOLUTE pidl, REFIID riid, VOID** ppv, PCUITEMID_CHILD* ppidlLast);
  PIDLIST_ABSOLUTE  SHBrowseForFolder(                           LPBROWSEINFO lpbi);
  HANDLE            SHChangeNotification_Lock(                   HANDLE hChange, DWORD dwProcId, PIDLIST_ABSOLUTE** pppidl, LONG* plEvent);
  BOOL              SHChangeNotification_Unlock(                 HANDLE hLock);
  BOOL              SHChangeNotifyDeregister(                    ULONG ulID);
  ULONG             SHChangeNotifyRegister(                      HWND hwnd, int fSources, LONG fEvents, UINT wMsg, int cEntries, WINAPI_SHChangeNotifyEntry* pshcne);
  void              SHChangeNotifyRegisterThread(                SCNRT_STATUS status);
  PIDLIST_ABSOLUTE  SHCloneSpecialIDList(                        HWND hwndOwner, WINAPI_CSIDL csidl, BOOL fCreate);
  HRESULT           SHCLSIDFromString(                           LPCWSTR psz, CLSID* pclsid);
  HRESULT           SHCoCreateInstance(                          LPCWSTR pszCLSID, WINAPI_CLSID* pclsid, IUnknown* pUnkOuter, REFIID riid, void** ppv);
  HRESULT           SHCreateAssociationRegistration(             REFIID riid, void** ppv);
  HRESULT           SHCreateDataObject(                          PCIDLIST_ABSOLUTE pidlFolder, UINT cidl, PCUITEMID_CHILD_ARRAY apidl, IDataObject* pdtInner, REFIID riid, void** ppv);
  HRESULT           SHCreateDefaultContextMenu(                  WINAPI_DEFCONTEXTMENU* pdcm, REFIID riid, void** ppv);
  HRESULT           SHCreateDefaultExtractIcon(                  REFIID riid, void** ppv);
  HRESULT           SHCreateDefaultPropertiesOp(                 IShellItem* psi, IFileOperation** ppFileOp);
  int               SHCreateDirectory(                           HWND hwnd, LPCWSTR pszPath);
  int               SHCreateDirectoryEx(                         HWND hwnd, LPCTSTR pszPath, WINAPI_SECURITY_ATTRIBUTES* psa);
  HRESULT           SHCreateFileExtractIconW(                    LPCWSTR pszFile, DWORD dwFileAttributes, REFIID riid, void** ppv);
  HRESULT           SHCreateItemFromParsingName(                 PCWSTR pszPath, IBindCtx* pbc, REFIID riid, void** ppv);
  HRESULT           SHCreateItemFromRelativeName(                IShellItem* psiParent, PCWSTR pszName, IBindCtx* pbc, REFIID riid, void** ppv);
  HRESULT           SHCreateItemInKnownFolder(                   REFKNOWNFOLDERID kfid, KNOWN_FOLDER_FLAG dwKFFlags, PCWSTR pszItem, REFIID riid, void** ppv);
  BOOL              SHCreateProcessAsUserW(                      PSHCREATEPROCESSINFOW pscpi);
  HPSXA             SHCreatePropSheetExtArray(                   HKEY hkey, LPCWSTR pszSubkey, UINT max_iface);
  HRESULT           SHCreateQueryCancelAutoPlayMoniker(          IMoniker** ppmoniker);
  HRESULT           SHCreateShellFolderViewEx(                   LPCSFV pcsfv, IShellView** ppsv);
  HRESULT           SHCreateShellFolderView(                     WINAPI_SFV_CREATE* pcsfv, IShellView** ppsv);
  HRESULT           SHCreateShellItem(                           PCIDLIST_ABSOLUTE pidlParent, IShellFolder* psfParent, PCUITEMID_CHILD pidl, IShellItem** ppsi);
  HRESULT           SHCreateItemWithParent(                      PCIDLIST_ABSOLUTE pidlParent, IShellFolder* psfParent, PCUITEMID_CHILD pidl, REFIID riid, void** ppvItem);
  HRESULT           SHCreateItemFromIDList(                      PCIDLIST_ABSOLUTE pidl, REFIID riid, void** ppv);
  HRESULT           SHCreateShellItemArray(                      PCIDLIST_ABSOLUTE pidlParent, IShellFolder* psf, UINT cidl, PCUITEMID_CHILD_ARRAY ppidl, IShellItemArray** ppsiItemArray);
  HRESULT           SHCreateShellItemArrayFromDataObject(        IDataObject* pdo, REFIID riid, void** ppv);
  HRESULT           SHCreateShellItemArrayFromIDLists(           UINT cidl, PCIDLIST_ABSOLUTE_ARRAY rgpidl, IShellItemArray** ppsiItemArray);
  HRESULT           SHCreateShellItemArrayFromShellItem(         IShellItem* psi, REFIID riid, void** ppv);
  HRESULT           SHCreateStdEnumFmtEtc(                       UINT cfmt, IEnumFORMATETC** ppenumFormatEtc);
  HRESULT           SHDefExtractIcon(                            LPCTSTR pszIconFile, int iIndex, UINT uFlags, HICON* phiconLarge, HICON* phiconSmall, UINT nIconSize);
  void              SHDestroyPropSheetExtArray(                  HPSXA hpsxa);
  HRESULT           SHDoDragDrop(                                HWND hwnd, IDataObject* pdtobj, IDropSource* pdsrc, DWORD dwEffect, DWORD* pdwEffect);
  int               Shell_GetCachedImageIndex(                   LPCWSTR pwszIconPath, int iIconIndex, UINT uIconFlags);
  int               Shell_GetCachedImageIndex(                   LPCTSTR pszIconPath, int iIconIndex, UINT uIconFlags);
  BOOL              Shell_GetImageLists(                         HIMAGELIST* phiml, HIMAGELIST* phimlSmall);
  UINT              Shell_MergeMenus(                            HMENU hmDst, HMENU hmSrc, UINT uInsert, UINT uIDAdjust, UINT uIDAdjustMax, ULONG uFlags);
  BOOL              Shell_NotifyIcon(                            DWORD dwMessage, PNOTIFYICONDATA lpdata);
  HRESULT           Shell_NotifyIconGetRect(                     WINAPI_NOTIFYICONIDENTIFIER* identifier, RECT* iconLocation);
  int               ShellAbout(                                  HWND hWnd, LPCTSTR szApp, LPCTSTR szOtherStuff, HICON hIcon);
  BOOL              ShellExecuteEx(                              LPSHELLEXECUTEINFO lpExecInfo);
  HRESULT           SHEmptyRecycleBin(                           HWND hwnd, LPCTSTR pszRootPath, DWORD dwFlags);
  HRESULT           SHEnumerateUnreadMailAccountsW(              HKEY hKeyUser, DWORD dwIndex, LPWSTR pszMailAddress, int cchMailAddress);
  HRESULT           SHEvaluateSystemCommandTemplate(             PCWSTR pszCmdTemplate, PWSTR* ppszApplication, PWSTR* ppszCommandLine, PWSTR* ppszParameters);
  HINSTANCE         ShellExecute(                                HWND hwnd, LPCTSTR lpOperation, LPCTSTR lpFile, LPCTSTR lpParameters, LPCTSTR lpDirectory, WINAPI_ShowWindowCmd nShowCmd);
  UINT              SHExtractIconsW(                             LPCWSTR pszFileName, int nIconIndex, int cxIcon, int cyIcon, HICON* phIcon, UINT* pIconId, UINT nIcons, WINAPI_LRFlags flags);
  IContextMenu*     SHFind_InitMenuPopup(                        HMENU hmenu, HWND hwnd, UINT idCmdFirst, UINT idCmdLast);
  BOOL              SHFindFiles(                                 PCIDLIST_ABSOLUTE pidlFolder, PCIDLIST_ABSOLUTE pidlSaveFile);
  HRESULT           SHFlushClipboard(                            );
  void              SHFlushSFCache(                              );
  DWORD             SHFormatDrive(                               HWND hwnd, UINT drive, UINT fmtID, UINT options);
  void              SHFree(                                      void* pv);
  void              SHFreeNameMappings(                          HANDLE hNameMappings);
  int               SHFileOperation(                             LPSHFILEOPSTRUCT lpFileOp);
  HRESULT           SHGetAttributesFromDataObject(               IDataObject* pdo, DWORD dwAttributeMask, DWORD* pdwAttributes, UINT* pcItems);
  HRESULT           SHGetDataFromIDList(                         IShellFolder* psf, PCUITEMID_CHILD pidl, WINAPI_SHGetDataFromIDListFormats nFormat, PVOID pv, int cb);
  HRESULT           SHGetDesktopFolder(                          IShellFolder** ppshf);
  BOOL              SHGetDiskFreeSpace(                          LPCTSTR pszVolume, ULARGE_INTEGER* pqwFreeCaller, ULARGE_INTEGER* pqwTot, ULARGE_INTEGER* pqwFree);
  BOOL              SHGetDiskFreeSpaceEx(                        LPCTSTR pszVolume, ULARGE_INTEGER* pqwFreeCaller, ULARGE_INTEGER* pqwTot, ULARGE_INTEGER* pqwFree);
  HRESULT           SHGetDriveMedia(                             LPCWSTR pszDrive, DWORD* pdwMediaContent);
  DWORD_PTR         SHGetFileInfo(                               LPCTSTR pszPath, DWORD dwFileAttributes, SHFILEINFO* psfi, UINT cbFileInfo, UINT uFlags);
  HRESULT           SHGetFolderLocation(                         HWND hwndOwner, WINAPI_CSIDL nFolder, HANDLE hToken, DWORD dwReserved, PIDLIST_ABSOLUTE* ppidl);
  HRESULT           SHGetFolderPath(                             HWND hwndOwner, int nFolder, HANDLE hToken, WINAPI_SHGetFolderPathFlags dwFlags, LPTSTR pszPath);
  HRESULT           SHGetFolderPathAndSubDir(                    HWND hwnd, WINAPI_CSIDL csidl, HANDLE hToken, WINAPI_SHGetFolderPathFlags dwFlags, LPCTSTR pszSubDir, LPTSTR pszPath);
  int               SHGetIconOverlayIndex(                       LPCTSTR pszIconPath, int iIconIndex);
  HRESULT           SHGetIDListFromObject(                       IUnknown* punk, PIDLIST_ABSOLUTE* ppidl);
  HRESULT           SHGetImageList(                              int iImageList, REFIID riid, void** ppv);
  HRESULT           SHGetInstanceExplorer(                       IUnknown** ppunk);
  HRESULT           SHGetItemFromDataObject(                     IDataObject* pdtobj, DATAOBJ_GET_ITEM_FLAGS dwFlags, REFIID riid, void** ppv);
  HRESULT           SHGetItemFromObject(                         IUnknown* punk, REFIID riid, void** ppv);
  HRESULT           SHGetKnownFolderIDList(                      REFKNOWNFOLDERID rfid, KNOWN_FOLDER_FLAG dwFlags, HANDLE hToken, PIDLIST_ABSOLUTE* ppidl);
  HRESULT           SHGetKnownFolderItem(                        REFKNOWNFOLDERID rfid, KNOWN_FOLDER_FLAG dwFlags, HANDLE hToken, REFIID riid, void** ppv);
  HRESULT           SHGetKnownFolderPath(                        REFKNOWNFOLDERID rfid, DWORD dwFlags, HANDLE hToken, PWSTR* ppszPath);
  HRESULT           SHGetLocalizedName(                          LPCWSTR pszPath, LPWSTR pszResModule, UINT cch, int* pidsRes);
  HRESULT           SHGetMalloc(                                 LPMALLOC* ppMalloc);
  HRESULT           SHGetNameFromIDList(                         PCIDLIST_ABSOLUTE pidl, SIGDN sigdnName, PWSTR* ppszName);
  HRESULT           SHGetNameFromPropertyKey(                    REFPROPERTYKEY propkey, PWSTR* ppszCanonicalName);
  BOOL              SHGetNewLinkInfo(                            LPCTSTR pszLinkTo, LPCTSTR pszDir, LPTSTR pszName, BOOL* pfMustCopy, UINT uFlags);
  BOOL              SHGetPathFromIDListEx(                       PCIDLIST_ABSOLUTE pidl, PWSTR pszPath, DWORD cchPath, GPFIDL_FLAGS uOpts);
  BOOL              SHGetPathFromIDList(                         PCIDLIST_ABSOLUTE pidl, LPTSTR pszPath);
  HRESULT           SHGetRealIDL(                                IShellFolder* psf, PCUITEMID_CHILD pidlSimple, PITEMID_CHILD* ppidlReal);
  HRESULT           SHGetSetFolderCustomSettings(                LPSHFOLDERCUSTOMSETTINGS pfcs, LPCTSTR pszPath, DWORD dwReadWrite);
  void              SHGetSetSettings(                            LPSHELLSTATE lpss, WINAPI_SSF_FLAGS dwMask, BOOL bSet);
  void              SHGetSettings(                               LPSHELLFLAGSTATE lpsfs, WINAPI_SSF_FLAGS dwMask);
  HINSTANCE         SHGetShellStyleHInstance(                    );
  HRESULT           SHGetSpecialFolderLocation(                  HWND hwndOwner, WINAPI_CSIDL nFolder, PIDLIST_ABSOLUTE* ppidl);
  BOOL              SHGetSpecialFolderPath(                      HWND hwndOwner, LPWSTR lpwszPath, WINAPI_CSIDL csidl, BOOL fCreate);
  BOOL              SHGetSpecialFolderPath(                      HWND hwndOwner, LPTSTR lpszPath, WINAPI_CSIDL csidl, BOOL fCreate);
  HRESULT           SHGetStockIconInfo(                          SHSTOCKICONID siid, UINT uFlags, SHSTOCKICONINFO* psii);
  HRESULT           SHGetTemporaryPropertyForItem(               IShellItem* psi, REFPROPERTYKEY pk, PROPVARIANT* ppropvarInk);
  HRESULT           SHGetUnreadMailCountW(                       HKEY hKeyUser, LPCWSTR pszMailAddress, DWORD* pdwCount, FILETIME* pFileTime, LPCWSTR pszShellExecuteCommand, int cchShellExecuteCommand);
  int               SHHandleUpdateImage(                         PCIDLIST_ABSOLUTE pidlExtra);
  HRESULT           SHILCreateFromPath(                          LPCWSTR pszPath, PIDLIST_ABSOLUTE* ppidl, DWORD* rgflnOut);
  BOOL              SHInvokePrinterCommand(                      HWND hwnd, UINT uAction, LPCTSTR lpBuf1, LPCTSTR lpBuf2, BOOL fModal);
  HRESULT           SHIsFileAvailableOffline(                    LPCWSTR pszPath, LPDWORD pdwStatus);
  HRESULT           SHLimitInputEdit(                            HWND hwndEdit, IShellFolder* psf);
  HRESULT           SHLoadInProc(                                REFCLSID rclsid);
  HRESULT           SHLoadNonloadedIconOverlayIdentifiers(       );
  HRESULT           SHLoadOLE(                                   LPARAM lParam);
  HRESULT           SHLocalStrDup(                               LPCWSTR psz, LPWSTR* ppsz);
  HRESULT           SHMapIDListToImageListIndexAsync(            IShellTaskScheduler* pts, IShellFolder* psf, LPCITEMIDLIST pidl, WINAPI_GIL_INPUT_FLAGS flags, PFNASYNCICONTASKBALLBACK pfn, void* pvData, void* pvHint, int* piIndex, int* piIndexSel);
  int               SHMapPIDLToSystemImageListIndex(             IShellFolder* psf, PCUITEMID_CHILD pidl, int* piIndex);
  HRESULT           SHMultiFileProperties(                       IDataObject* pdtobj, DWORD dwFlags);
  BOOL              SHObjectProperties(                          HWND hwnd, DWORD shopObjectType, PCWSTR pszObjectName, PCWSTR pszPropertyPage);
  HRESULT           SHOpenFolderAndSelectItems(                  PCIDLIST_ABSOLUTE pidlFolder, UINT cidl, PCUITEMID_CHILD_ARRAY* apidl, DWORD dwFlags);
  BOOL              SHOpenPropSheetW(                            LPCWSTR pszCaption, UINT ckeys, WINAPI_CLSID* pclsidDef, IDataObject* pdtobj, IShellBrowser* psb, LPCWSTR pStartPage);
  HRESULT           SHOpenWithDialog(                            HWND hwndParent, WINAPI_OPENASINFO* poainfo);
  HRESULT           SHParseDisplayName(                          LPCWSTR pszName, IBindCtx* pbc, PIDLIST_ABSOLUTE* ppidl, SFGAOF sfgaoIn, SFGAOF* psfgaoOut);
  HRESULT           SHPathPrepareForWrite(                       HWND hwnd, IUnknown* punkEnableModless, LPCTSTR pszPath, DWORD dwFlags);
  HRESULT           SHQueryRecycleBin(                           LPCTSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);
  HRESULT           SHQueryUserNotificationState(                QUERY_USER_NOTIFICATION_STATE* pquns);
  HRESULT           SHRemoveLocalizedName(                       LPCWSTR pszPath);
  UINT              SHReplaceFromPropSheetExtArray(              HPSXA hpsxa, UINT uPageID, LPFNADDPROPSHEETPAGE lpfnReplaceWith, LPARAM lParam);
  HRESULT           SHResolveLibrary(                            IShellItem* psiLibrary);
  DWORD             SHRestricted(                                RESTRICTIONS rest);
  BOOL              SHRunControlPanel(                           LPCWSTR lpcszCmdLine, HWND hwndMsgParent);
  HRESULT           SHSetDefaultProperties(                      HWND hwnd, IShellItem* psi, DWORD dwFileOpFlags, IFileOperationProgressSink* pfops);
  HRESULT           SHSetFolderPath(                             WINAPI_CSIDL csidl, HANDLE hToken, DWORD dwFlags, LPCTSTR pszPath);
  void              SHSetInstanceExplorer(                       IUnknown* punk);
  HRESULT           SHSetKnownFolderPath(                        REFKNOWNFOLDERID rfid, DWORD dwFlags, HANDLE hToken, PCWSTR pszPath);
  HRESULT           SHSetLocalizedName(                          LPCWSTR pszPath, LPCWSTR pszResModule, int idsRes);
  HRESULT           SHSetTemporaryPropertyForItem(               IShellItem* psi, REFPROPERTYKEY propkey, REFPROPVARIANT propvar);
  HRESULT           SHSetUnreadMailCountW(                       LPCWSTR pszMailAddress, DWORD dwCount, LPCWSTR pszShellExecuteCommand);
  LRESULT           SHShellFolderView_Message(                   HWND hwnd, UINT uMsg, LPARAM lparam);
  HRESULT           SHShowManageLibraryUI(                       IShellItem* psiLibrary, HWND hwndOwner, LPCWSTR pszTitle, LPCWSTR pszInstruction, LIBRARYMANAGEDIALOGOPTIONS lmdOptions);
  PIDLIST_ABSOLUTE  SHSimpleIDListFromPath(                      LPCWSTR pszPath);
  HRESULT           SHStartNetConnectionDialogW(                 HWND hwnd, LPCWSTR pszRemoteName, DWORD dwType);
  BOOL              SHTestTokenMembership(                       HANDLE hToken, ULONG ulRID);
  void              SHUpdateImage(                               LPCTSTR pszHashItem, int iIndex, UINT uFlags, int iImageIndex);
  BOOL              SHValidateUNC(                               HWND hwndOwner, LPWSTR pszFile, UINT fConnect);
  BOOL              SignalFileOpen(                              PCIDLIST_ABSOLUTE pidl);
  HRESULT           StgMakeUniqueName(                           IStorage* pstgParent, PCWSTR pszFileSpec, WINAPI_STGM_FLAGS grfMode, REFIID riid, void** ppv);
  BOOL              Win32DeleteFile(                             LPCTSTR pszFileName);
  HINSTANCE         WOWShellExecute(                             HWND hwnd, LPCTSTR lpOperation, LPCTSTR lpFile, LPCTSTR lpParameters, LPCTSTR lpDirectory, WINAPI_ShowWindowCmd nShowCmd, void* lpfnCBWinExec);
  BOOL              WriteCabinetState(                           CABINETSTATE* pcs);
  VOID              RunFileDlg(                                  HWND hwndOwner, HICON hIcon, LPCWSTR lpszDirectory, LPCWSTR lpszTitle, LPCWSTR lpszDescription, WINAPI_RunFileDlgFlags uFlags);
  BOOL              StrRetToStrN(                                LPTSTR pszOut, UINT cchOut, LPSTRRET pStrRet, LPCITEMIDLIST pidl);
  int               PifMgr_CloseProperties(                      HANDLE hProps, UINT flOpt);
  HANDLE            PifMgr_OpenProperties(                       LPCWSTR pszApp, LPCWSTR lpszPIF, UINT hInf, UINT flOpt);
  int               PifMgr_GetProperties(                        HANDLE hProps, LPCSTR pszGroup, VOID* lpProps, int cbProps, UINT flOpt);
  int               PifMgr_SetProperties(                        HANDLE hProps, LPCSTR pszGroup, VOID* lpProps, int cbProps, UINT flOpt);
  HRESULT           SHAddDefaultPropertiesByExt(                 PCWSTR pszExt, IPropertyStore* pPropStore);
  HRESULT           SHGetPropertyStoreForWindow(                 HWND hwnd, REFIID riid, void** ppv);
  HRESULT           SHGetPropertyStoreFromIDList(                PCIDLIST_ABSOLUTE pidl, GETPROPERTYSTOREFLAGS flags, REFIID riid, void** ppv);
  HRESULT           SHGetPropertyStoreFromParsingName(           PCWSTR pszPath, IBindCtx* pbc, GETPROPERTYSTOREFLAGS flags, REFIID riid, void** ppv);
  HRESULT           SHPropStgCreate(                             IPropertySetStorage* psstg, REFFMTID fmtid, WINAPI_CLSID* pclsid, DWORD grfFlags, WINAPI_STGM_FLAGS grfMode, DWORD dwDisposition, IPropertyStorage** ppstg, UINT* puCodePage);
  HRESULT           SHPropStgReadMultiple(                       IPropertyStorage* pps, WINAPI_CodePageEnum uCodePage, ULONG cpspec, PROPSPEC const[] rgpspec, PROPVARIANT[] rgvar);
  HRESULT           SHPropStgWriteMultiple(                      IPropertyStorage* pps, UINT* uCodePage, ULONG cpspec, PROPID propidNameFirst);
  LPWSTR            AddCommasExportW(                            DWORD value, LPWSTR pwszBuf);
  void              AppCompat_RunDLLW(                           HWND unusedHwnd, HINSTANCE unusedHinstance, LPWSTR commandLine, int unusedInt);
  HRESULT           CheckStagingArea(                            );
  HRESULT           CreateAutoListParser(                        REFIID riid, PVOID* ppv);
  HRESULT           CreateInfoTipFromItem(                       IShellFolder2* psf, ITEMIDLIST* pidl, LPCWSTR pText, REFIID riid, PVOID* ppv);
  HRESULT           CreateInfoTipFromItem2(                      IShellFolder2* psf, ITEMIDLIST* pidl, PROPERTYKEY* pPropKey, LPCWSTR pText, REFIID riid, PVOID* ppv);
  void              DisconnectWindowDialog(                      HWND hwndUnused);
  HRESULT           GetAppPathFromLink(                          IShellItem* pItem, LPWSTR pwszPathBuffer, DWORD dwBufferLen);
  BOOL              GetSqmableFileName(                          LPCWSTR pwszFileName, LPWSTR pwszSqmName, UINT sqmNameBufLen);
  int               Int64ToString(                               INT64 number, LPWSTR pwszBuf, UINT bufLen, BOOL useNumberFormat, NUMBERFMT* pFormatInfo, WINAPI_NUMBERFMT_FLAGS dwFlags);
  BOOL              IsElevationRequired(                         LPCWSTR lpwszExeFile);
  BOOL              IsSearchEnabled(                             );
  int               LargeIntegerToString(                        LARGE_INTEGER* pNumber, LPWSTR pwszBuf, UINT bufLen, BOOL useNumberFormat, NUMBERFMT* pFormatInfo, WINAPI_NUMBERFMT_FLAGS dwFlags);
  HRESULT           PathGetPathDisplayName(                      LPCWSTR pwszPath, LPWSTR pwszDisplayName, DWORD displayNameLen);
  BOOL              PathIsTemporary(                             LPCTSTR pszFile);
  void              Printer_AddPrinterPropPages(                 LPCWSTR printer, PROPSHEETHEADER* pPropHeader);
  void              Printer_LoadIconsW(                          LPCWSTR printerName, HICON* phLargeIcon, HICON* phSmallIcon);
  BOOL              Printers_RegisterWindowW(                    LPCWSTR pwszPrinter, DWORD pidlType, BOOL* pWinCreated, HWND* phwnd);
  void              Printers_UnregisterWindow(                   CLASSPIDL* pClassPidl, HWND hwnd);
  HRESULT           RefreshBrowserLayout(                        IShellItem* pItem);
  int               RunAsNewUser_RunDLLW(                        HWND hWnd, HINSTANCE hIinstance, LPCWSTR lpszFileMapName, WINAPI_ShowWindowCmd nCmdShow);
  HRESULT           SHGetUserDisplayName(                        LPWSTR pwszName, UINT pBufLen);
  HRESULT           SHGetUserPicturePathEx(                      LPCWSTR pwszUserOrPicName, WINAPI_SGUPP_FLAGS sguppFlags, LPCWSTR pwszDesiredSrcExt, LPWSTR pwszPicPath, UINT picPathLen, LPWSTR pwszSrcPath, UINT srcLen);
  void              SHHelpShortcuts_RunDLL(                      HWND hwndParent, HINSTANCE unusedHinstance, LPCTSTR commandLine, int unusedInt);
  HRESULT           SHResolveUserNames(                          LPCWSTR pwszSids, LPWSTR pwszNames, UINT nameLen);
  void              SHSettingsChanged(                           WPARAM wParam, LPCWSTR lParam);
  BOOL              SHShouldShowWizards(                         IUnknown* pUnk);
  BOOL              SHTestTokenPrivilegeW(                       HANDLE hToken, LPCWSTR pwszPrivilege);
  HRESULT           ShellExecCmdLine(                            HWND hwnd, LPCWSTR pwszCommand, LPCWSTR pwszStartDir, WINAPI_ShowWindowCmd nShow, LPVOID pUnused, WINAPI_SECL_FLAGS dwSeclFlags);
  LPWSTR            ShortSizeFormatExportW(                      DWORD value, LPWSTR pwszBuf);
]]
return ffi.load( 'Shell32.dll' )
