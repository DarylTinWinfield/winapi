require( 'ffi/winapi/headers/windows' )
local ffi = require( 'ffi' )
ffi.cdef [[
  enum { MAX_ISCSI_PORTAL_NAME_LEN = 256 };
  enum { MAX_ISCSI_PORTAL_ADDRESS_LEN = 256 };
  enum { MAX_ISCSI_HBANAME_LEN = 256 };
  enum { MAX_ISCSI_NAME_LEN_plus_1 = 224 };
  typedef struct ISCSI_UNIQUE_SESSION_ID {
    ULONGLONG AdapterUnique;
    ULONGLONG AdapterSpecific;
  } ISCSI_UNIQUE_SESSION_ID;
  typedef ISCSI_UNIQUE_SESSION_ID *PISCSI_UNIQUE_SESSION_ID; //Pointer
  typedef ISCSI_UNIQUE_SESSION_ID ISCSI_UNIQUE_CONNECTION_ID; //Alias
  typedef ISCSI_UNIQUE_CONNECTION_ID *PISCSI_UNIQUE_CONNECTION_ID; //Pointer
  typedef ULONG ISCSI_LOGIN_OPTIONS_INFO_SPECIFIED; //Alias
  typedef ULONG ISCSI_LOGIN_FLAGS; //Alias
  typedef UINT32 ISCSI_AUTH_TYPES; //Alias
  static const ISCSI_AUTH_TYPES ISCSI_NO_AUTH_TYPE = 0;
  static const ISCSI_AUTH_TYPES ISCSI_CHAP_AUTH_TYPE = 1;
  static const ISCSI_AUTH_TYPES ISCSI_MUTUAL_CHAP_AUTH_TYPE = 2;
  typedef UINT ISCSI_DIGEST_TYPES; //Alias
  static const ISCSI_DIGEST_TYPES ISCSI_DIGEST_TYPE_NONE = 0;
  static const ISCSI_DIGEST_TYPES ISCSI_DIGEST_TYPE_CRC32C = 1;
  typedef struct ISCSI_LOGIN_OPTIONS {
    ULONG Version;
    ISCSI_LOGIN_OPTIONS_INFO_SPECIFIED InformationSpecified;
    ISCSI_LOGIN_FLAGS LoginFlags;
    ISCSI_AUTH_TYPES AuthType;
    ISCSI_DIGEST_TYPES HeaderDigest;
    ISCSI_DIGEST_TYPES DataDigest;
    ULONG MaximumConnections;
    ULONG DefaultTime2Wait;
    ULONG DefaultTime2Retain;
    ULONG UsernameLength;
    ULONG PasswordLength;
    PUCHAR Username;
    PUCHAR Password;
  } ISCSI_LOGIN_OPTIONS;
  typedef ISCSI_LOGIN_OPTIONS *PISCSI_LOGIN_OPTIONS; //Pointer
  typedef struct ISCSI_VERSION_INFO {
    ULONG MajorVersion;
    ULONG MinorVersion;
    ULONG BuildNumber;
  } ISCSI_VERSION_INFO;
  typedef ISCSI_VERSION_INFO *PISCSI_VERSION_INFO; //Pointer
  typedef ULONG ISDSC_STATUS; //Alias
  static const ISDSC_STATUS ISDSC_NON_SPECIFIC_ERROR = 0xEFFF0001;
  static const ISDSC_STATUS ISDSC_LOGIN_FAILED = 0xEFFF0002;
  static const ISDSC_STATUS ISDSC_CONNECTION_FAILED = 0xEFFF0003;
  static const ISDSC_STATUS ISDSC_INITIATOR_NODE_ALREADY_EXISTS = 0xEFFF0004;
  static const ISDSC_STATUS ISDSC_INITIATOR_NODE_NOT_FOUND = 0xEFFF0005;
  static const ISDSC_STATUS ISDSC_TARGET_MOVED_TEMPORARILY = 0xEFFF0006;
  static const ISDSC_STATUS ISDSC_TARGET_MOVED_PERMANENTLY = 0xEFFF0007;
  static const ISDSC_STATUS ISDSC_INITIATOR_ERROR = 0xEFFF0008;
  static const ISDSC_STATUS ISDSC_AUTHENTICATION_FAILURE = 0xEFFF0009;
  static const ISDSC_STATUS ISDSC_AUTHORIZATION_FAILURE = 0xEFFF000A;
  static const ISDSC_STATUS ISDSC_NOT_FOUND = 0xEFFF000B;
  static const ISDSC_STATUS ISDSC_TARGET_REMOVED = 0xEFFF000C;
  static const ISDSC_STATUS ISDSC_UNSUPPORTED_VERSION = 0xEFFF000D;
  static const ISDSC_STATUS ISDSC_TOO_MANY_CONNECTIONS = 0xEFFF000E;
  static const ISDSC_STATUS ISDSC_MISSING_PARAMETER = 0xEFFF000F;
  static const ISDSC_STATUS ISDSC_CANT_INCLUDE_IN_SESSION = 0xEFFF0010;
  static const ISDSC_STATUS ISDSC_SESSION_TYPE_NOT_SUPPORTED = 0xEFFF0011;
  static const ISDSC_STATUS ISDSC_TARGET_ERROR = 0xEFFF0012;
  static const ISDSC_STATUS ISDSC_SERVICE_UNAVAILABLE = 0xEFFF0013;
  static const ISDSC_STATUS ISDSC_OUT_OF_RESOURCES = 0xEFFF0014;
  static const ISDSC_STATUS ISDSC_CONNECTION_ALREADY_EXISTS = 0xEFFF0015;
  static const ISDSC_STATUS ISDSC_SESSION_ALREADY_EXISTS = 0xEFFF0016;
  static const ISDSC_STATUS ISDSC_INITIATOR_INSTANCE_NOT_FOUND = 0xEFFF0017;
  static const ISDSC_STATUS ISDSC_TARGET_ALREADY_EXISTS = 0xEFFF0018;
  static const ISDSC_STATUS ISDSC_DRIVER_BUG = 0xEFFF0019;
  static const ISDSC_STATUS ISDSC_INVALID_TEXT_KEY = 0xEFFF001A;
  static const ISDSC_STATUS ISDSC_INVALID_SENDTARGETS_TEXT = 0xEFFF001B;
  static const ISDSC_STATUS ISDSC_INVALID_SESSION_ID = 0xEFFF001C;
  static const ISDSC_STATUS ISDSC_SCSI_REQUEST_FAILED = 0xEFFF001D;
  static const ISDSC_STATUS ISDSC_TOO_MANY_SESSIONS = 0xEFFF001E;
  static const ISDSC_STATUS ISDSC_SESSION_BUSY = 0xEFFF001F;
  static const ISDSC_STATUS ISDSC_TARGET_MAPPING_UNAVAILABLE = 0xEFFF0020;
  static const ISDSC_STATUS ISDSC_ADDRESS_TYPE_NOT_SUPPORTED = 0xEFFF0021;
  static const ISDSC_STATUS ISDSC_LOGON_FAILED = 0xEFFF0022;
  static const ISDSC_STATUS ISDSC_SEND_FAILED = 0xEFFF0023;
  static const ISDSC_STATUS ISDSC_TRANSPORT_ERROR = 0xEFFF0024;
  static const ISDSC_STATUS ISDSC_VERSION_MISMATCH = 0xEFFF0025;
  static const ISDSC_STATUS ISDSC_TARGET_MAPPING_OUT_OF_RANGE = 0xEFFF0026;
  static const ISDSC_STATUS ISDSC_TARGET_PRESHAREDKEY_UNAVAILABLE = 0xEFFF0027;
  static const ISDSC_STATUS ISDSC_TARGET_AUTHINFO_UNAVAILABLE = 0xEFFF0028;
  static const ISDSC_STATUS ISDSC_TARGET_NOT_FOUND = 0xEFFF0029;
  static const ISDSC_STATUS ISDSC_LOGIN_USER_INFO_BAD = 0xEFFF002A;
  static const ISDSC_STATUS ISDSC_TARGET_MAPPING_EXISTS = 0xEFFF002B;
  static const ISDSC_STATUS ISDSC_HBA_SECURITY_CACHE_FULL = 0xEFFF002C;
  static const ISDSC_STATUS ISDSC_INVALID_PORT_NUMBER = 0xEFFF002D;
  static const ISDSC_STATUS ISDSC_OPERATION_NOT_ALL_SUCCESS = 0xAFFF002E;
  static const ISDSC_STATUS ISDSC_HBA_SECURITY_CACHE_NOT_SUPPORTED = 0xEFFF002F;
  static const ISDSC_STATUS ISDSC_IKE_ID_PAYLOAD_TYPE_NOT_SUPPORTED = 0xEFFF0030;
  static const ISDSC_STATUS ISDSC_IKE_ID_PAYLOAD_INCORRECT_SIZE = 0xEFFF0031;
  static const ISDSC_STATUS ISDSC_TARGET_PORTAL_ALREADY_EXISTS = 0xEFFF0032;
  static const ISDSC_STATUS ISDSC_TARGET_ADDRESS_ALREADY_EXISTS = 0xEFFF0033;
  static const ISDSC_STATUS ISDSC_NO_AUTH_INFO_AVAILABLE = 0xEFFF0034;
  static const ISDSC_STATUS ISDSC_NO_TUNNEL_OUTER_MODE_ADDRESS = 0xEFFF0035;
  static const ISDSC_STATUS ISDSC_CACHE_CORRUPTED = 0xEFFF0036;
  static const ISDSC_STATUS ISDSC_REQUEST_NOT_SUPPORTED = 0xEFFF0037;
  static const ISDSC_STATUS ISDSC_TARGET_OUT_OF_RESORCES = 0xEFFF0038;
  static const ISDSC_STATUS ISDSC_SERVICE_DID_NOT_RESPOND = 0xEFFF0039;
  static const ISDSC_STATUS ISDSC_ISNS_SERVER_NOT_FOUND = 0xEFFF003A;
  static const ISDSC_STATUS ISDSC_OPERATION_REQUIRES_REBOOT = 0xAFFF003B;
  static const ISDSC_STATUS ISDSC_NO_PORTAL_SPECIFIED = 0xEFFF003C;
  static const ISDSC_STATUS ISDSC_CANT_REMOVE_LAST_CONNECTION = 0xEFFF003D;
  static const ISDSC_STATUS ISDSC_SERVICE_NOT_RUNNING = 0xEFFF003E;
  static const ISDSC_STATUS ISDSC_TARGET_ALREADY_LOGGED_IN = 0xEFFF003F;
  static const ISDSC_STATUS ISDSC_DEVICE_BUSY_ON_SESSION = 0xEFFF0040;
  static const ISDSC_STATUS ISDSC_COULD_NOT_SAVE_PERSISTENT_LOGIN_DATA = 0xEFFF0041;
  static const ISDSC_STATUS ISDSC_COULD_NOT_REMOVE_PERSISTENT_LOGIN_DATA = 0xEFFF0042;
  static const ISDSC_STATUS ISDSC_PORTAL_NOT_FOUND = 0xEFFF0043;
  static const ISDSC_STATUS ISDSC_INITIATOR_NOT_FOUND = 0xEFFF0044;
  static const ISDSC_STATUS ISDSC_DISCOVERY_MECHANISM_NOT_FOUND = 0xEFFF0045;
  static const ISDSC_STATUS ISDSC_IPSEC_NOT_SUPPORTED_ON_OS = 0xEFFF0046;
  static const ISDSC_STATUS ISDSC_PERSISTENT_LOGIN_TIMEOUT = 0xEFFF0047;
  static const ISDSC_STATUS ISDSC_SHORT_CHAP_SECRET = 0xAFFF0048;
  static const ISDSC_STATUS ISDSC_EVALUATION_PEROID_EXPIRED = 0xEFFF0049;
  static const ISDSC_STATUS ISDSC_INVALID_CHAP_SECRET = 0xEFFF004A;
  static const ISDSC_STATUS ISDSC_INVALID_TARGET_CHAP_SECRET = 0xEFFF004B;
  static const ISDSC_STATUS ISDSC_INVALID_INITIATOR_CHAP_SECRET = 0xEFFF004C;
  static const ISDSC_STATUS ISDSC_INVALID_CHAP_USER_NAME = 0xEFFF004D;
  static const ISDSC_STATUS ISDSC_INVALID_LOGON_AUTH_TYPE = 0xEFFF004E;
  static const ISDSC_STATUS ISDSC_INVALID_TARGET_MAPPING = 0xEFFF004F;
  static const ISDSC_STATUS ISDSC_INVALID_TARGET_ID = 0xEFFF0050;
  static const ISDSC_STATUS ISDSC_INVALID_ISCSI_NAME = 0xEFFF0051;
  static const ISDSC_STATUS ISDSC_INCOMPATIBLE_ISNS_VERSION = 0xEFFF0052;
  static const ISDSC_STATUS ISDSC_FAILED_TO_CONFIGURE_IPSEC = 0xEFFF0053;
  static const ISDSC_STATUS ISDSC_BUFFER_TOO_SMALL = 0xEFFF0054;
  static const ISDSC_STATUS ISDSC_INVALID_LOAD_BALANCE_POLICY = 0xEFFF0055;
  static const ISDSC_STATUS ISDSC_INVALID_PARAMETER = 0xEFFF0056;
  static const ISDSC_STATUS ISDSC_DUPLICATE_PATH_SPECIFIED = 0xEFFF0057;
  static const ISDSC_STATUS ISDSC_PATH_COUNT_MISMATCH = 0xEFFF0058;
  static const ISDSC_STATUS ISDSC_INVALID_PATH_ID = 0xEFFF0059;
  static const ISDSC_STATUS ISDSC_MULTIPLE_PRIMARY_PATHS_SPECIFIED = 0xEFFF005A;
  static const ISDSC_STATUS ISDSC_NO_PRIMARY_PATH_SPECIFIED = 0xEFFF005B;
  static const ISDSC_STATUS ISDSC_DEVICE_ALREADY_PERSISTENTLY_BOUND = 0xEFFF005C;
  static const ISDSC_STATUS ISDSC_DEVICE_NOT_FOUND = 0xEFFF005D;
  static const ISDSC_STATUS ISDSC_DEVICE_NOT_ISCSI_OR_PERSISTENT = 0xEFFF005E;
  static const ISDSC_STATUS ISDSC_DNS_NAME_UNRESOLVED = 0xEFFF005F;
  static const ISDSC_STATUS ISDSC_NO_CONNECTION_AVAILABLE = 0xEFFF0060;
  static const ISDSC_STATUS ISDSC_LB_POLICY_NOT_SUPPORTED = 0xEFFF0061;
  static const ISDSC_STATUS ISDSC_REMOVE_CONNECTION_IN_PROGRESS = 0xEFFF0062;
  static const ISDSC_STATUS ISDSC_INVALID_CONNECTION_ID = 0xEFFF0063;
  static const ISDSC_STATUS ISDSC_CANNOT_REMOVE_LEADING_CONNECTION = 0xEFFF0064;
  static const ISDSC_STATUS ISDSC_RESTRICTED_BY_GROUP_POLICY = 0xEFFF0065;
  static const ISDSC_STATUS ISDSC_ISNS_FIREWALL_BLOCKED = 0xEFFF0066;
  typedef UINT64 ISCSI_SECURITY_FLAGS; //Alias
  typedef UINT ISCSI_TARGET_FLAGS; //Alias
  typedef struct ISCSI_TARGET_PORTAL_INFO_EX {
    TCHAR InitiatorName[MAX_ISCSI_HBANAME_LEN];
    ULONG InitiatorPortNumber;
    TCHAR SymbolicName[MAX_ISCSI_PORTAL_NAME_LEN];
    TCHAR Address[MAX_ISCSI_PORTAL_ADDRESS_LEN];
    USHORT Socket;
    ISCSI_SECURITY_FLAGS SecurityFlags;
    ISCSI_LOGIN_OPTIONS LoginOptions;
  } ISCSI_TARGET_PORTAL_INFO_EX;
  typedef ISCSI_TARGET_PORTAL_INFO_EX *PISCSI_TARGET_PORTAL_INFO_EX; //Pointer
  typedef UINT TARGET_INFORMATION_CLASS; //Alias
  static const TARGET_INFORMATION_CLASS ProtocolType = 0;
  static const TARGET_INFORMATION_CLASS TargetAlias = 1;
  static const TARGET_INFORMATION_CLASS DiscoveryMechanisms = 2;
  static const TARGET_INFORMATION_CLASS PortalGroups = 3;
  static const TARGET_INFORMATION_CLASS PersistentTargetMappings = 4;
  static const TARGET_INFORMATION_CLASS InitiatorName = 5;
  static const TARGET_INFORMATION_CLASS TargetFlags = 6;
  static const TARGET_INFORMATION_CLASS LoginOptions = 7;
  typedef struct SCSI_LUN_LIST {
    ULONG OSLUN;
    ULONGLONG TargetLUN;
  } SCSI_LUN_LIST;
  typedef SCSI_LUN_LIST *PSCSI_LUN_LIST; //Pointer
  typedef struct ISCSI_TARGET_MAPPING {
    TCHAR InitiatorName[MAX_ISCSI_HBANAME_LEN];
    TCHAR TargetName[MAX_ISCSI_NAME_LEN_plus_1];
    TCHAR OSDeviceName[MAX_PATH];
    ISCSI_UNIQUE_SESSION_ID SessionId;
    ULONG OSBusNumber;
    ULONG OSTargetNumber;
    ULONG LUNCount;
    PSCSI_LUN_LIST LUNList;
  } ISCSI_TARGET_MAPPING;
  typedef ISCSI_TARGET_MAPPING *PISCSI_TARGET_MAPPING; //Pointer
  typedef struct SCSI_ADDRESS {
    ULONG Length;
    UCHAR PortNumber;
    UCHAR PathId;
    UCHAR TargetId;
    UCHAR Lun;
  } SCSI_ADDRESS;
  typedef DWORD DEVICE_TYPE; //Alias
  static const DEVICE_TYPE FILE_DEVICE_BEEP = 0x00000001;
  static const DEVICE_TYPE FILE_DEVICE_CD_ROM = 0x00000002;
  static const DEVICE_TYPE FILE_DEVICE_CD_ROM_FILE_SYSTEM = 0x00000003;
  static const DEVICE_TYPE FILE_DEVICE_CONTROLLER = 0x00000004;
  static const DEVICE_TYPE FILE_DEVICE_DATALINK = 0x00000005;
  static const DEVICE_TYPE FILE_DEVICE_DFS = 0x00000006;
  static const DEVICE_TYPE FILE_DEVICE_DISK = 0x00000007;
  static const DEVICE_TYPE FILE_DEVICE_DISK_FILE_SYSTEM = 0x00000008;
  static const DEVICE_TYPE FILE_DEVICE_FILE_SYSTEM = 0x00000009;
  static const DEVICE_TYPE FILE_DEVICE_INPORT_PORT = 0x0000000a;
  static const DEVICE_TYPE FILE_DEVICE_KEYBOARD = 0x0000000b;
  static const DEVICE_TYPE FILE_DEVICE_MAILSLOT = 0x0000000c;
  static const DEVICE_TYPE FILE_DEVICE_MIDI_IN = 0x0000000d;
  static const DEVICE_TYPE FILE_DEVICE_MIDI_OUT = 0x0000000e;
  static const DEVICE_TYPE FILE_DEVICE_MOUSE = 0x0000000f;
  static const DEVICE_TYPE FILE_DEVICE_MULTI_UNC_PROVIDER = 0x00000010;
  static const DEVICE_TYPE FILE_DEVICE_NAMED_PIPE = 0x00000011;
  static const DEVICE_TYPE FILE_DEVICE_NETWORK = 0x00000012;
  static const DEVICE_TYPE FILE_DEVICE_NETWORK_BROWSER = 0x00000013;
  static const DEVICE_TYPE FILE_DEVICE_NETWORK_FILE_SYSTEM = 0x00000014;
  static const DEVICE_TYPE FILE_DEVICE_NULL = 0x00000015;
  static const DEVICE_TYPE FILE_DEVICE_PARALLEL_PORT = 0x00000016;
  static const DEVICE_TYPE FILE_DEVICE_PHYSICAL_NETCARD = 0x00000017;
  static const DEVICE_TYPE FILE_DEVICE_PRINTER = 0x00000018;
  static const DEVICE_TYPE FILE_DEVICE_SCANNER = 0x00000019;
  static const DEVICE_TYPE FILE_DEVICE_SERIAL_MOUSE_PORT = 0x0000001a;
  static const DEVICE_TYPE FILE_DEVICE_SERIAL_PORT = 0x0000001b;
  static const DEVICE_TYPE FILE_DEVICE_SCREEN = 0x0000001c;
  static const DEVICE_TYPE FILE_DEVICE_SOUND = 0x0000001d;
  static const DEVICE_TYPE FILE_DEVICE_STREAMS = 0x0000001e;
  static const DEVICE_TYPE FILE_DEVICE_TAPE = 0x0000001f;
  static const DEVICE_TYPE FILE_DEVICE_TAPE_FILE_SYSTEM = 0x00000020;
  static const DEVICE_TYPE FILE_DEVICE_TRANSPORT = 0x00000021;
  static const DEVICE_TYPE FILE_DEVICE_UNKNOWN = 0x00000022;
  static const DEVICE_TYPE FILE_DEVICE_VIDEO = 0x00000023;
  static const DEVICE_TYPE FILE_DEVICE_VIRTUAL_DISK = 0x00000024;
  static const DEVICE_TYPE FILE_DEVICE_WAVE_IN = 0x00000025;
  static const DEVICE_TYPE FILE_DEVICE_WAVE_OUT = 0x00000026;
  static const DEVICE_TYPE FILE_DEVICE_8042_PORT = 0x00000027;
  static const DEVICE_TYPE FILE_DEVICE_NETWORK_REDIRECTOR = 0x00000028;
  static const DEVICE_TYPE FILE_DEVICE_BATTERY = 0x00000029;
  static const DEVICE_TYPE FILE_DEVICE_BUS_EXTENDER = 0x0000002a;
  static const DEVICE_TYPE FILE_DEVICE_MODEM = 0x0000002b;
  static const DEVICE_TYPE FILE_DEVICE_VDM = 0x0000002c;
  static const DEVICE_TYPE FILE_DEVICE_MASS_STORAGE = 0x0000002d;
  static const DEVICE_TYPE FILE_DEVICE_SMB = 0x0000002e;
  static const DEVICE_TYPE FILE_DEVICE_KS = 0x0000002f;
  static const DEVICE_TYPE FILE_DEVICE_CHANGER = 0x00000030;
  static const DEVICE_TYPE FILE_DEVICE_SMARTCARD = 0x00000031;
  static const DEVICE_TYPE FILE_DEVICE_ACPI = 0x00000032;
  static const DEVICE_TYPE FILE_DEVICE_DVD = 0x00000033;
  static const DEVICE_TYPE FILE_DEVICE_FULLSCREEN_VIDEO = 0x00000034;
  static const DEVICE_TYPE FILE_DEVICE_DFS_FILE_SYSTEM = 0x00000035;
  static const DEVICE_TYPE FILE_DEVICE_DFS_VOLUME = 0x00000036;
  static const DEVICE_TYPE FILE_DEVICE_SERENUM = 0x00000037;
  static const DEVICE_TYPE FILE_DEVICE_TERMSRV = 0x00000038;
  static const DEVICE_TYPE FILE_DEVICE_KSEC = 0x00000039;
  static const DEVICE_TYPE FILE_DEVICE_FIPS = 0x0000003A;
  static const DEVICE_TYPE FILE_DEVICE_INFINIBAND = 0x0000003B;
  static const DEVICE_TYPE FILE_DEVICE_VMBUS = 0x0000003E;
  static const DEVICE_TYPE FILE_DEVICE_CRYPT_PROVIDER = 0x0000003F;
  static const DEVICE_TYPE FILE_DEVICE_WPD = 0x00000040;
  static const DEVICE_TYPE FILE_DEVICE_BLUETOOTH = 0x00000041;
  static const DEVICE_TYPE FILE_DEVICE_MT_COMPOSITE = 0x00000042;
  static const DEVICE_TYPE FILE_DEVICE_MT_TRANSPORT = 0x00000043;
  static const DEVICE_TYPE FILE_DEVICE_BIOMETRIC = 0x00000044;
  static const DEVICE_TYPE FILE_DEVICE_PMI = 0x00000045;
  typedef struct STORAGE_DEVICE_NUMBER {
    DEVICE_TYPE DeviceType;
    DWORD DeviceNumber;
    DWORD PartitionNumber;
  } STORAGE_DEVICE_NUMBER;
  typedef struct ISCSI_DEVICE_ON_SESSION {
    TCHAR InitiatorName[MAX_ISCSI_HBANAME_LEN];
    TCHAR TargetName[MAX_ISCSI_NAME_LEN_plus_1];
    SCSI_ADDRESS ScsiAddress;
    GUID DeviceInterfaceType;
    TCHAR DeviceInterfaceName[MAX_PATH];
    TCHAR LegacyName[MAX_PATH];
    STORAGE_DEVICE_NUMBER StorageDeviceNumber;
    DWORD DeviceInstance;
  } ISCSI_DEVICE_ON_SESSION;
  typedef ISCSI_DEVICE_ON_SESSION *PISCSI_DEVICE_ON_SESSION; //Pointer
  typedef struct ISCSI_TARGET_PORTAL {
    TCHAR SymbolicName[MAX_ISCSI_PORTAL_NAME_LEN];
    TCHAR Address[MAX_ISCSI_PORTAL_ADDRESS_LEN];
    USHORT Socket;
  } ISCSI_TARGET_PORTAL;
  typedef ISCSI_TARGET_PORTAL *PISCSI_TARGET_PORTAL; //Pointer
  typedef struct ISCSI_TARGET_PORTAL_GROUP {
    ULONG Count;
    ISCSI_TARGET_PORTAL Portals[1];
  } ISCSI_TARGET_PORTAL_GROUP;
  typedef ISCSI_TARGET_PORTAL_GROUP *PISCSI_TARGET_PORTAL_GROUP; //Pointer
  typedef struct ISCSI_TARGET_PORTAL_INFO {
    TCHAR InitiatorName[MAX_ISCSI_HBANAME_LEN];
    ULONG InitiatorPortNumber;
    TCHAR SymbolicName[MAX_ISCSI_PORTAL_NAME_LEN];
    TCHAR Address[MAX_ISCSI_PORTAL_ADDRESS_LEN];
    USHORT Socket;
  } ISCSI_TARGET_PORTAL_INFO;
  typedef ISCSI_TARGET_PORTAL_INFO *PISCSI_TARGET_PORTAL_INFO; //Pointer
  typedef struct ISCSI_CONNECTION_INFO {
    ISCSI_UNIQUE_CONNECTION_ID ConnectionId;
    PTCHAR InitiatorAddress;
    PTCHAR TargetAddress;
    USHORT InitiatorSocket;
    USHORT TargetSocket;
    UCHAR CID[2];
  } ISCSI_CONNECTION_INFO;
  typedef ISCSI_CONNECTION_INFO *PISCSI_CONNECTION_INFO; //Pointer
  typedef struct ISCSI_SESSION_INFO {
    ISCSI_UNIQUE_SESSION_ID SessionId;
    PTCHAR InitiatorName;
    PTCHAR TargetNodeName;
    PTCHAR TargetName;
    UCHAR ISID[6];
    UCHAR TSID[2];
    ULONG ConnectionCount;
    PISCSI_CONNECTION_INFO Connections;
  } ISCSI_SESSION_INFO;
  typedef ISCSI_SESSION_INFO *PISCSI_SESSION_INFO; //Pointer
  typedef struct PERSISTENT_ISCSI_LOGIN_INFO {
    TCHAR TargetName[MAX_ISCSI_NAME_LEN_plus_1];
    BOOLEAN IsInformationalSession;
    TCHAR InitiatorInstance[MAX_ISCSI_HBANAME_LEN];
    ULONG InitiatorPortNumber;
    ISCSI_TARGET_PORTAL TargetPortal;
    ISCSI_SECURITY_FLAGS SecurityFlags;
    PISCSI_TARGET_MAPPING Mappings;
    ISCSI_LOGIN_OPTIONS LoginOptions;
  } PERSISTENT_ISCSI_LOGIN_INFO;
  typedef PERSISTENT_ISCSI_LOGIN_INFO *PPERSISTENT_ISCSI_LOGIN_INFO; //Pointer
  typedef UINT IKE_AUTHENTICATION_METHOD; //Alias
  static const IKE_AUTHENTICATION_METHOD IKE_AUTHENTICATION_PRESHARED_KEY_METHOD = 1;
  typedef UCHAR IKE_IDENTIFICATION_PAYLOAD_TYPE; //Alias
  static const IKE_IDENTIFICATION_PAYLOAD_TYPE ID_IPV4_ADDR = 1;
  static const IKE_IDENTIFICATION_PAYLOAD_TYPE ID_FQDN = 2;
  static const IKE_IDENTIFICATION_PAYLOAD_TYPE ID_USER_FQDN = 3;
  static const IKE_IDENTIFICATION_PAYLOAD_TYPE ID_IPV6_ADDR = 5;
  typedef struct IKE_AUTHENTICATION_PRESHARED_KEY {
    ISCSI_SECURITY_FLAGS SecurityFlags;
    IKE_IDENTIFICATION_PAYLOAD_TYPE IdType;
    ULONG IdLengthInBytes;
    PUCHAR Id;
    ULONG KeyLengthInBytes;
    PUCHAR Key;
  } IKE_AUTHENTICATION_PRESHARED_KEY;
  typedef union IKE_AUTHENTICATION_INFORMATION_u {
    IKE_AUTHENTICATION_PRESHARED_KEY PsKey;
  } IKE_AUTHENTICATION_INFORMATION_u;
  typedef struct IKE_AUTHENTICATION_INFORMATION {
    IKE_AUTHENTICATION_METHOD AuthMethod;
    IKE_AUTHENTICATION_INFORMATION_u AuthMethod;
  } IKE_AUTHENTICATION_INFORMATION;
  typedef IKE_AUTHENTICATION_INFORMATION *PIKE_AUTHENTICATION_INFORMATION; //Pointer
  ISDSC_STATUS AddISNSServer(                       PTCHAR Address);
  ISDSC_STATUS AddIScsiConnection(                  PISCSI_UNIQUE_SESSION_ID UniqueSessionId, PVOID Reserved, ULONG InitiatorPortNumber, PISCSI_TARGET_PORTAL TargetPortal, ISCSI_SECURITY_FLAGS SecurityFlags, PISCSI_LOGIN_OPTIONS LoginOptions, ULONG KeySize, PCHAR Key, PISCSI_UNIQUE_CONNECTION_ID ConnectionId);
  ISDSC_STATUS AddIScsiSendTargetPortal(            PTCHAR InitiatorName, ULONG InitiatorPortNumber, PISCSI_LOGIN_OPTIONS LoginOptions, ISCSI_SECURITY_FLAGS SecurityFlags, PISCSI_TARGET_PORTAL Portal);
  ISDSC_STATUS AddIScsiStaticTarget(                PTCHAR TargetName, PTCHAR TargetAlias, ISCSI_TARGET_FLAGS TargetFlags, BOOLEAN Persist, PISCSI_TARGET_MAPPING Mappings, PISCSI_LOGIN_OPTIONS LoginOptions, PISCSI_TARGET_PORTAL_GROUP PortalGroup);
  ISDSC_STATUS AddPersistentIScsiDevice(            PTCHAR VolumePath);
  ISDSC_STATUS AddRadiusServer(                     PWCHAR Address);
  ISDSC_STATUS ClearPersistentIScsiDevices(         );
  ISDSC_STATUS GetDevicesForIScsiSession(           PISCSI_UNIQUE_SESSION_ID UniqueSessionId, ULONG* DeviceCount, PISCSI_DEVICE_ON_SESSION Devices);
  ISDSC_STATUS GetIScsiIKEInfo(                     PTCHAR InitiatorName, ULONG PortNumber, PULONG Reserved, PIKE_AUTHENTICATION_INFORMATION AuthInfo);
  ISDSC_STATUS GetIScsiInitiatorNodeName(           PTCHAR InitiatorNodeName);
  ISDSC_STATUS GetIScsiSessionList(                 ULONG* BufferSize, ULONG* SessionCount, PISCSI_SESSION_INFO SessionInfo);
  ISDSC_STATUS GetIScsiTargetInformation(           PTCHAR TargetName, PTCHAR DiscoveryMechanism, TARGET_INFORMATION_CLASS InfoClass, PULONG BufferSize, PVOID Buffer);
  ISDSC_STATUS GetIScsiVersionInformation(          PISCSI_VERSION_INFO VersionInfo);
  ISDSC_STATUS LoginIScsiTarget(                    PTCHAR TargetName, BOOLEAN IsInformationalSession, PTCHAR InitiatorName, ULONG InitiatorPortNumber, PISCSI_TARGET_PORTAL TargetPortal, ISCSI_SECURITY_FLAGS SecurityFlags, PISCSI_TARGET_MAPPING Mappings, PISCSI_LOGIN_OPTIONS LoginOptions, ULONG KeySize, PCHAR Key, BOOLEAN IsPersistent, PISCSI_UNIQUE_SESSION_ID UniqueSessionId, PISCSI_UNIQUE_CONNECTION_ID UniqueConnectionId);
  ISDSC_STATUS LogoutIScsiTarget(                   PISCSI_UNIQUE_SESSION_ID UniqueSessionId);
  ISDSC_STATUS RefreshISNSServer(                   PTCHAR Address);
  ISDSC_STATUS RefreshIScsiSendTargetPortal(        PTCHAR InitiatorInstance, ULONG InitiatorPortNumber, PISCSI_TARGET_PORTAL Portal);
  ISDSC_STATUS RemoveISNSServer(                    PTCHAR Address);
  ISDSC_STATUS RemoveIScsiConnection(               PISCSI_UNIQUE_SESSION_ID UniqueSessionId, PISCSI_UNIQUE_CONNECTION_ID UniqueConnectionId);
  ISDSC_STATUS RemoveIScsiPersistentTarget(         PTCHAR InitiatorInstance, ULONG InitiatorPortNumber, PTCHAR TargetName, PISCSI_TARGET_PORTAL Portal);
  ISDSC_STATUS RemoveIScsiSendTargetPortal(         PTCHAR InitiatorInstance, ULONG InitiatorPortNumber, PISCSI_TARGET_PORTAL Portal);
  ISDSC_STATUS RemoveIScsiStaticTarget(             PTCHAR TargetName);
  ISDSC_STATUS RemovePersistentIScsiDevice(         PTCHAR VolumePath);
  ISDSC_STATUS RemoveRadiusServer(                  PTCHAR Address);
  ISDSC_STATUS ReportActiveIScsiTargetMappings(     PULONG BufferSize, PULONG MappingCount, PISCSI_TARGET_MAPPING Mappings);
  ISDSC_STATUS ReportISNSServerList(                PULONG BufferSizeInChar, PTCHAR Buffer);
  ISDSC_STATUS ReportIScsiInitiatorList(            ULONG* BufferSize, PTCHAR Buffer);
  ISDSC_STATUS ReportIScsiPersistentLogins(         ULONG* Count, PPERSISTENT_ISCSI_LOGIN_INFO PersistentLoginInfo, PULONG BufferSizeInBytes);
  ISDSC_STATUS ReportIScsiSendTargetPortals(        PULONG PortalCount, PISCSI_TARGET_PORTAL_INFO PortalInfo);
  ISDSC_STATUS ReportIScsiSendTargetPortalsEx(      PULONG PortalCount, PULONG PortalInfoSize, PISCSI_TARGET_PORTAL_INFO_EX PortalInfo);
  ISDSC_STATUS ReportIScsiTargets(                  BOOLEAN ForceUpdate, PULONG BufferSize, PTCHAR Buffer);
  ISDSC_STATUS ReportIScsiTargetPortals(            PWCHAR InitiatorName, PWCHAR TargetName, PUSHORT TargetPortalTag, PULONG ElementCount, PISCSI_TARGET_PORTAL Portals);
  ISDSC_STATUS ReportPersistentIScsiDevices(        PULONG BufferSizeInChar, PTCHAR Buffer);
  ISDSC_STATUS ReportRadiusServerList(              PULONG BufferSizeInChar, PTCHAR Buffer);
  ISDSC_STATUS SendScsiInquiry(                     PISCSI_UNIQUE_SESSION_ID* UniqueSessionId, ULONGLONG Lun, UCHAR EvpdCmddt, UCHAR PageCode, PUCHAR* ScsiStatus, PULONG* ReponseSize, PUCHAR ReponseBuffer, PULONG* SenseSize, PUCHAR SenseBuffer);
  ISDSC_STATUS SendScsiReadCapacity(                PISCSI_UNIQUE_SESSION_ID UniqueSessionId, ULONGLONG Lun, PUCHAR* ScsiStatus, PULONG* ResponseSize, PUCHAR ResponseBuffer, PULONG* SenseSize, PUCHAR SenseBuffer);
  ISDSC_STATUS SendScsiReportLuns(                  PISCSI_UNIQUE_SESSION_ID UniqueSessionId, PUCHAR* ScsiStatus, PULONG* ResponseSize, PUCHAR ResponseBuffer, PULONG* SenseSize, PUCHAR SenseBuffer);
  ISDSC_STATUS SetIScsiGroupPresharedKey(           ULONG KeyLength, PUCHAR Key, BOOLEAN Persist);
  ISDSC_STATUS SetIScsiIKEInfo(                     PTCHAR InitiatorName, ULONG PortNumber, PIKE_AUTHENTICATION_INFORMATION AuthInfo, BOOLEAN Persist);
  ISDSC_STATUS SetIScsiInitiatorCHAPSharedSecret(   ULONG SharedSecretLength, PUCHAR SharedSecret);
  ISDSC_STATUS SetIScsiInitiatorRADIUSSharedSecret( ULONG SharedSecretLength, PUCHAR SharedSecret);
  ISDSC_STATUS SetIScsiInitiatorNodeName(           PTCHAR InitiatorNodeName);
  ISDSC_STATUS SetIScsiTunnelModeOuterAddress(      PTCHAR InitiatorName, ULONG InitiatorPortNumber, PTCHAR DestinationAddress, PTCHAR OuterModeAddress, BOOLEAN Persist);
  ISDSC_STATUS SetupPersistentIScsiDevices(         );
]]
ffi.load( 'Iscsidsc.dll' )
