require( "ffi/winapi/headers/windows" )
require( "ffi/winapi/headers/native" )
local ffi = require( "ffi" )
ffi.cdef [[
  BOOL                     EnumDirTree(                        WINAPI_ProcessHandle hProcess, PCTSTR RootPath, PCTSTR InputPathName, PTSTR OutputPathBuffer, PENUMDIRTREE_CALLBACK Callback, PVOID CallbackData);
  LPAPI_VERSION            ImagehlpApiVersion(                 );
  LPAPI_VERSION            ImagehlpApiVersionEx(               LPAPI_VERSION AppVersion);
  BOOL                     MakeSureDirectoryPathExists(        PCSTR DirPath);
  BOOL                     SearchTreeForFile(                  PCTSTR RootPath, PCTSTR InputPathName, PTSTR OutputPathBuffer);
  BOOL                     EnumerateLoadedModules64(           WINAPI_ProcessHandle hProcess, PENUMLOADED_MODULES_CALLBACK64 EnumLoadedModulesCallback, PVOID UserContext);
  BOOL                     EnumerateLoadedModulesW64(          WINAPI_ProcessHandle hProcess, PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback, PVOID UserContext);
  BOOL                     EnumerateLoadedModulesEx(           WINAPI_ProcessHandle hProcess, PENUMLOADED_MODULES_CALLBACK64 EnumLoadedModulesCallback, PVOID UserContext);
  HANDLE                   FindDebugInfoFile(                  PCSTR FileName, PCSTR SymbolPath, PSTR DebugFilePath);
  HANDLE                   FindDebugInfoFileEx(                PCTSTR FileName, PCTSTR SymbolPath, PTSTR DebugFilePath, PFIND_DEBUG_FILE_CALLBACK Callback, PVOID CallerData);
  HANDLE                   FindExecutableImage(                PCSTR FileName, PCSTR SymbolPath, PSTR ImageFilePath);
  HANDLE                   FindExecutableImageEx(              PCTSTR FileName, PCTSTR SymbolPath, PTSTR ImageFilePath, PFIND_EXE_FILE_CALLBACK Callback, PVOID CallerData);
  BOOL                     StackWalk64(                        DWORD MachineType, WINAPI_ProcessHandle hProcess, WINAPI_ThreadHandle hThread, LPSTACKFRAME64 StackFrame, PVOID ContextRecord, PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine, PFUNCTION_TABLE_ACCESS_ROUTINE64 FunctionTableAccessRoutine, PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine, PTRANSLATE_ADDRESS_ROUTINE64 TranslateAddress);
  BOOL                     SymSetParentWindow(                 HWND hwnd);
  DWORD                    UnDecorateSymbolName(               PCTSTR DecoratedName, PTSTR UnDecoratedName, DWORD UndecoratedLength, WINAPI_UNDNAME_FLAGS Flags);
  DWORD                    GetTimestampForLoadedLibrary(       HMODULE ImageBase);
  PVOID                    ImageDirectoryEntryToData(          PVOID Base, BOOLEAN MappedAsImage, USHORT DirectoryEntry, PULONG Size);
  PVOID                    ImageDirectoryEntryToDataEx(        PVOID Base, BOOLEAN MappedAsImage, USHORT DirectoryEntry, PULONG Size, PIMAGE_SECTION_HEADER* FoundHeader);
  PIMAGE_NT_HEADERS        ImageNtHeader(                      PVOID ImageBase);
  PIMAGE_SECTION_HEADER    ImageRvaToSection(                  PIMAGE_NT_HEADERS NtHeaders, PVOID Base, ULONG Rva);
  PVOID                    ImageRvaToVa(                       PIMAGE_NT_HEADERS NtHeaders, PVOID Base, ULONG Rva, PIMAGE_SECTION_HEADER* LastRvaSection);
  BOOL                     SymAddSourceStream(                 WINAPI_ProcessHandle hProcess, ULONG64 Base, PCTSTR StreamFile, PBYTE Buffer, size_t Size);
  BOOL                     SymAddSymbol(                       WINAPI_ProcessHandle hProcess, ULONG64 BaseOfDll, PCTSTR Name, DWORD64 Address, DWORD Size, DWORD Flags);
  BOOL                     SymCleanup(                         WINAPI_ProcessHandle hProcess);
  BOOL                     SymDeleteSymbol(                    WINAPI_ProcessHandle hProcess, ULONG64 BaseOfDll, PCTSTR Name, DWORD64 Address, DWORD Flags);
  BOOL                     SymEnumLines(                       WINAPI_ProcessHandle hProcess, ULONG64 Base, PCTSTR Obj, PCTSTR File, PSYM_ENUMLINES_CALLBACK EnumLinesCallback, PVOID UserContext);
  BOOL                     SymEnumProcesses(                   PSYM_ENUMPROCESSES_CALLBACK EnumProcessesCallback, PVOID UserContext);
  BOOL                     SymEnumSourceFiles(                 WINAPI_ProcessHandle hProcess, ULONG64 ModBase, PCTSTR Mask, PSYM_ENUMSOURCEFILES_CALLBACK EnumSymbolsCallback, PVOID UserContext);
  BOOL                     SymEnumSourceLines(                 WINAPI_ProcessHandle hProcess, ULONG64 Base, PCTSTR Obj, PCTSTR File, DWORD Line, WINAPI_ESLFLAG Flags, PSYM_ENUMLINES_CALLBACK EnumLinesCallback, PVOID UserContext);
  BOOL                     SymEnumSymbols(                     WINAPI_ProcessHandle hProcess, ULONG64 BaseOfDll, PCTSTR Mask, PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, PVOID UserContext);
  BOOL                     SymEnumSymbolsForAddr(              WINAPI_ProcessHandle hProcess, DWORD64 Address, PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, PVOID UserContext);
  BOOL                     SymEnumTypes(                       WINAPI_ProcessHandle hProcess, ULONG64 BaseOfDll, PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, PVOID UserContext);
  BOOL                     SymEnumTypesByName(                 WINAPI_ProcessHandle hProcess, ULONG64 BaseOfDll, PCSTR mask, PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, PVOID UserContext);
  HANDLE                   SymFindDebugInfoFile(               WINAPI_ProcessHandle hProcess, PCTSTR FileName, PTSTR DebugFilePath, PFIND_DEBUG_FILE_CALLBACK Callback, PVOID CallerData);
  HANDLE                   SymFindExecutableImage(             WINAPI_ProcessHandle hProcess, PCTSTR FileName, PTSTR ImageFilePath, PFIND_EXE_FILE_CALLBACK Callback, PVOID CallerData);
  BOOL                     SymFindFileInPath(                  WINAPI_ProcessHandle hProcess, PCTSTR SearchPath, PCTSTR FileName, PVOID id, DWORD two, DWORD three, WINAPI_SSRVOPT flags, PTSTR FilePath, PFINDFILEINPATHCALLBACK callback, PVOID context);
  BOOL                     SymFromAddr(                        WINAPI_ProcessHandle hProcess, DWORD64 Address, PDWORD64 Displacement, PSYMBOL_INFO Symbol);
  BOOL                     SymFromIndex(                       WINAPI_ProcessHandle hProcess, ULONG64 BaseOfDll, DWORD Index, PSYMBOL_INFO Symbol);
  BOOL                     SymFromName(                        WINAPI_ProcessHandle hProcess, PCTSTR Name, PSYMBOL_INFO Symbol);
  BOOL                     SymFromToken(                       WINAPI_ProcessHandle hProcess, DWORD64 Base, DWORD Token, PSYMBOL_INFO Symbol);
  PVOID                    SymFunctionTableAccess64(           WINAPI_ProcessHandle hProcess, DWORD64 AddrBase);
  ULONG                    SymGetFileLineOffsets64(            WINAPI_ProcessHandle hProcess, PCSTR ModuleName, PCSTR FileName, PDWORD64 Buffer, ULONG BufferLines);
  PTCHAR                   SymGetHomeDirectory(                DWORD type, PTSTR dir, size_t size);
  BOOL                     SymGetLineFromAddr64(               WINAPI_ProcessHandle hProcess, DWORD64 dwAddr, PDWORD pdwDisplacement, PIMAGEHLP_LINE64 Line);
  BOOL                     SymGetLineFromAddrW64(              WINAPI_ProcessHandle hProcess, DWORD64 dwAddr, PDWORD pdwDisplacement, PIMAGEHLP_LINEW64 Line);
  BOOL                     SymGetLineFromName64(               WINAPI_ProcessHandle hProcess, PCSTR ModuleName, PCSTR FileName, DWORD dwLineNumber, PLONG lpDisplacement, PIMAGEHLP_LINE64 Line);
  BOOL                     SymGetLineFromNameW64(              WINAPI_ProcessHandle hProcess, PCWSTR ModuleName, PCWSTR FileName, DWORD dwLineNumber, PLONG lpDisplacement, PIMAGEHLP_LINEW64 Line);
  BOOL                     SymGetLineNext64(                   WINAPI_ProcessHandle hProcess, PIMAGEHLP_LINE64 Line);
  BOOL                     SymGetLineNextW64(                  WINAPI_ProcessHandle hProcess, PIMAGEHLP_LINEW64 Line);
  BOOL                     SymGetLinePrev64(                   WINAPI_ProcessHandle hProcess, PIMAGEHLP_LINE64 Line);
  BOOL                     SymGetLinePrevW64(                  WINAPI_ProcessHandle hProcess, PIMAGEHLP_LINEW64 Line);
  DWORD64                  SymGetModuleBase64(                 WINAPI_ProcessHandle hProcess, DWORD64 dwAddr);
  BOOL                     SymGetModuleInfo64(                 WINAPI_ProcessHandle hProcess, DWORD64 dwAddr, PIMAGEHLP_MODULE64 ModuleInfo);
  BOOL                     SymGetModuleInfoW64(                WINAPI_ProcessHandle hProcess, DWORD64 dwAddr, PIMAGEHLP_MODULEW64 ModuleInfo);
  BOOL                     SymGetOmaps(                        WINAPI_ProcessHandle hProcess, ULONG64 BaseOfDll, POMAP* OmapTo, PDWORD64 cOmapTo, POMAP* OmapFrom, PDWORD64 cOmapFrom);
  WINAPI_SYMOPT_FLAGS      SymGetOptions(                      );
  BOOL                     SymGetScope(                        WINAPI_ProcessHandle hProcess, ULONG64 BaseOfDll, DWORD Index, PSYMBOL_INFO Symbol);
  BOOL                     SymGetSearchPath(                   WINAPI_ProcessHandle hProcess, PTSTR SearchPath, DWORD SearchPathLength);
  BOOL                     SymGetSymbolFile(                   WINAPI_ProcessHandle hProcess, PCTSTR SymPath, PCTSTR ImageFile, DWORD Type, PTSTR SymbolFile, size_t cSymbolFile, PTSTR DbgFile, size_t cDbgFile);
  BOOL                     SymGetTypeFromName(                 WINAPI_ProcessHandle hProcess, ULONG64 BaseOfDll, PCTSTR Name, PSYMBOL_INFO Symbol);
  BOOL                     SymGetTypeInfo(                     WINAPI_ProcessHandle hProcess, DWORD64 ModBase, ULONG TypeId, IMAGEHLP_SYMBOL_TYPE_INFO GetType, PVOID pInfo);
  BOOL                     SymGetTypeInfoEx(                   WINAPI_ProcessHandle hProcess, DWORD64 ModBase, PIMAGEHLP_GET_TYPE_INFO_PARAMS Params);
  BOOL                     SymInitialize(                      WINAPI_ProcessHandle hProcess, PCTSTR UserSearchPath, BOOL fInvadeProcess);
  DWORD64                  SymLoadModule64(                    WINAPI_ProcessHandle hProcess, HANDLE hFile, PCSTR ImageName, PCSTR ModuleName, DWORD64 BaseOfDll, DWORD SizeOfDll);
  DWORD64                  SymLoadModuleEx(                    WINAPI_ProcessHandle hProcess, HANDLE hFile, PCTSTR ImageName, PCTSTR ModuleName, DWORD64 BaseOfDll, DWORD DllSize, PMODLOAD_DATA Data, DWORD Flags);
  BOOL                     SymMatchFileName(                   PCTSTR FileName, PCTSTR Match, PTSTR* FileNameStop, PTSTR* MatchStop);
  BOOL                     SymMatchString(                     PCTSTR string, PCTSTR expression, BOOL fCase);
  BOOL                     SymNext(                            WINAPI_ProcessHandle hProcess, PSYMBOL_INFO Symbol);
  BOOL                     SymPrev(                            WINAPI_ProcessHandle hProcess, PSYMBOL_INFO Symbol);
  BOOL                     SymRefreshModuleList(               WINAPI_ProcessHandle hProcess);
  BOOL                     SymRegisterCallback64(              WINAPI_ProcessHandle hProcess, PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction, ULONG64 UserContext);
  BOOL                     SymRegisterCallbackW64(             WINAPI_ProcessHandle hProcess, PSYMBOL_REGISTERED_CALLBACKW64 CallbackFunction, ULONG64 UserContext);
  BOOL                     SymRegisterFunctionEntryCallback64( WINAPI_ProcessHandle hProcess, PSYMBOL_FUNCENTRY_CALLBACK64 CallbackFunction, ULONG64 UserContext);
  BOOL                     SymSearch(                          WINAPI_ProcessHandle hProcess, ULONG64 BaseOfDll, DWORD Index, DWORD SymTag, PCTSTR Mask, DWORD64 Address, PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback, PVOID UserContext, WINAPI_SYMSEARCH_FLAGS Options);
  BOOL                     SymSetContext(                      WINAPI_ProcessHandle hProcess, PIMAGEHLP_STACK_FRAME StackFrame, PIMAGEHLP_CONTEXT Context);
  PTCHAR                   SymSetHomeDirectory(                WINAPI_ProcessHandle hProcess, PCTSTR dir);
  DWORD                    SymSetOptions(                      WINAPI_SYMOPT_FLAGS SymOptions);
  BOOL                     SymSetScopeFromAddr(                WINAPI_ProcessHandle hProcess, ULONG64 Address);
  BOOL                     SymSetScopeFromIndex(               WINAPI_ProcessHandle hProcess, ULONG64 BaseOfDll, DWORD Index);
  BOOL                     SymSetSearchPath(                   WINAPI_ProcessHandle hProcess, PCTSTR SearchPath);
  BOOL                     SymUnDName64(                       PIMAGEHLP_SYMBOL64 sym, PSTR UnDecName, DWORD UnDecNameLength);
  BOOL                     SymUnloadModule64(                  WINAPI_ProcessHandle hProcess, DWORD64 BaseOfDll);
  PCTSTR                   SymSrvDeltaName(                    WINAPI_ProcessHandle hProcess, PCTSTR SymPath, PCTSTR Type, PCTSTR File1, PCTSTR File2);
  BOOL                     SymSrvGetFileIndexes(               PCTSTR File, GUID* Id, DWORD* Val1, DWORD* Val2, DWORD Flags);
  BOOL                     SymSrvGetFileIndexInfo(             PCTSTR File, PSYMSRV_INDEX_INFO Info, DWORD Flags);
  BOOL                     SymSrvGetFileIndexString(           WINAPI_ProcessHandle hProcess, PCTSTR SrvPath, PCTSTR File, PTSTR Index, size_t Size, DWORD Flags);
  PCTSTR                   SymSrvGetSupplement(                WINAPI_ProcessHandle hProcess, PCTSTR SymPath, PCTSTR Node, PCTSTR File);
  BOOL                     SymSrvIsStore(                      WINAPI_ProcessHandle hProcess, PCTSTR path);
  PCTSTR                   SymSrvStoreFile(                    WINAPI_ProcessHandle hProcess, PCTSTR SrvPath, PCTSTR File, DWORD Flags);
  PCTSTR                   SymSrvStoreSupplement(              WINAPI_ProcessHandle hProcess, PCTSTR SymPath, PCTSTR Node, PCTSTR File, DWORD Flags);
  BOOL                     MiniDumpReadDumpStream(             PVOID BaseOfDump, ULONG StreamNumber, PMINIDUMP_DIRECTORY* Dir, PVOID* StreamPointer, ULONG* StreamSize);
  BOOL                     MiniDumpWriteDump(                  WINAPI_ProcessHandle hProcess, DWORD ProcessId, HANDLE hFile, MINIDUMP_TYPE DumpType, PMINIDUMP_EXCEPTION_INFORMATION ExceptionParam, PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam, PMINIDUMP_CALLBACK_INFORMATION CallbackParam);
  BOOL                     SymGetSourceFile(                   WINAPI_ProcessHandle hProcess, ULONG64 Base, PCTSTR Params, PCTSTR FileSpec, PTSTR FilePath, DWORD Size);
  BOOL                     SymGetSourceFileFromToken(          WINAPI_ProcessHandle hProcess, PVOID Token, PCTSTR Params, PTSTR FilePath, DWORD Size);
  BOOL                     SymGetSourceFileToken(              WINAPI_ProcessHandle hProcess, ULONG64 Base, PCTSTR FileSpec, PVOID* Token, DWORD* Size);
  BOOL                     SymGetSourceVarFromToken(           WINAPI_ProcessHandle hProcess, PVOID Token, PCTSTR Params, PCTSTR VarName, PTSTR Value, DWORD Size);
  PIMAGE_DEBUG_INFORMATION MapDebugInformation(                HANDLE FileHandle, PCSTR FileName, PCSTR SymbolPath, ULONG ImageBase);
  BOOL                     SymEnumerateSymbols64(              WINAPI_ProcessHandle hProcess, ULONG64 BaseOfDll, PSYM_ENUMSYMBOLS_CALLBACK64 EnumSymbolsCallback, PVOID UserContext);
  BOOL                     SymEnumerateSymbolsW64(             WINAPI_ProcessHandle hProcess, ULONG64 BaseOfDll, PSYM_ENUMSYMBOLS_CALLBACKW64 EnumSymbolsCallback, PVOID UserContext);
  BOOL                     SymGetSymFromAddr64(                WINAPI_ProcessHandle hProcess, DWORD64 Address, PDWORD64 Displacement, PIMAGEHLP_SYMBOL64 Symbol);
  BOOL                     SymGetSymFromName64(                WINAPI_ProcessHandle hProcess, PCSTR Name, PIMAGEHLP_SYMBOL64 Symbol);
  BOOL                     SymGetSymNext64(                    WINAPI_ProcessHandle hProcess, PIMAGEHLP_SYMBOL64 Symbol);
  BOOL                     SymGetSymPrev64(                    WINAPI_ProcessHandle hProcess, PIMAGEHLP_SYMBOL64 Symbol);
  BOOL                     UnmapDebugInformation(              PIMAGE_DEBUG_INFORMATION DebugInfo);
]]
return ffi.load( "DbgHelp.dll" )
