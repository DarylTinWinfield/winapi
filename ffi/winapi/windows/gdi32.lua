require( 'ffi/winapi/headers/windows' )
require( 'ffi/winapi/headers/gdi' )
local ffi = require( 'ffi' )
ffi.cdef [[
  typedef HANDLE HGDIOBJ; //Alias
  typedef LPVOID GOBJENUMPROC; //Alias
  typedef LPVOID FONTENUMPROC; //Alias
  typedef LPVOID LINEDDAPROC; //Alias
  typedef LPVOID ENHMFENUMPROC; //Alias
  typedef LPVOID MFENUMPROC; //Alias
  typedef LPVOID ABORTPROC; //Alias
  enum { MM_MAX_NUMAXES = 16 };
  enum { LF_FULLFACESIZE = 64 };
  typedef WINAPI_FontCharset WINAPI_FontCharset_int; //Alias
  typedef struct ENUMLOGFONTEX {
    LOGFONT elfLogFont;
    TCHAR elfFullName[LF_FULLFACESIZE];
    TCHAR elfStyle[LF_FACESIZE];
    TCHAR elfScript[LF_FACESIZE];
  } ENUMLOGFONTEX;
  typedef struct DESIGNVECTOR {
    DWORD dvReserved;
    DWORD dvNumAxes;
    LONG dvValues[MM_MAX_NUMAXES];
  } DESIGNVECTOR;
  typedef struct ENUMLOGFONTEXDV {
    ENUMLOGFONTEX elfEnumLogfontEx;
    DESIGNVECTOR elfDesignVector;
  } ENUMLOGFONTEXDV;
  typedef struct WCRANGE {
    WCHAR wcLow;
    USHORT cGlyphs;
  } WCRANGE;
  typedef struct GLYPHSET {
    DWORD cbThis;
    DWORD flAccel;
    DWORD cGlyphsSupported;
    DWORD cRanges;
    WCRANGE ranges[1];
  } GLYPHSET;
  typedef GLYPHSET *LPGLYPHSET; //Pointer
  typedef UINT WINAPI_OTM_SELECTION; //Alias
  typedef BYTE WINAPI_PANOSE_FAMILY; //Alias
  static const WINAPI_PANOSE_FAMILY PAN_ANY = 0;
  static const WINAPI_PANOSE_FAMILY PAN_NO_FIT = 1;
  static const WINAPI_PANOSE_FAMILY PAN_FAMILY_TEXT_DISPLAY = 2;
  static const WINAPI_PANOSE_FAMILY PAN_FAMILY_SCRIPT = 3;
  static const WINAPI_PANOSE_FAMILY PAN_FAMILY_DECORATIVE = 4;
  static const WINAPI_PANOSE_FAMILY PAN_FAMILY_PICTORIAL = 5;
  typedef BYTE WINAPI_PANOSE_SERIF; //Alias
//static const WINAPI_PANOSE_SERIF PAN_ANY = 0;
//static const WINAPI_PANOSE_SERIF PAN_NO_FIT = 1;
  static const WINAPI_PANOSE_SERIF PAN_SERIF_COVE = 2;
  static const WINAPI_PANOSE_SERIF PAN_SERIF_OBTUSE_COVE = 3;
  static const WINAPI_PANOSE_SERIF PAN_SERIF_SQUARE_COVE = 4;
  static const WINAPI_PANOSE_SERIF PAN_SERIF_OBTUSE_SQUARE_COVE = 5;
  static const WINAPI_PANOSE_SERIF PAN_SERIF_SQUARE = 6;
  static const WINAPI_PANOSE_SERIF PAN_SERIF_THIN = 7;
  static const WINAPI_PANOSE_SERIF PAN_SERIF_BONE = 8;
  static const WINAPI_PANOSE_SERIF PAN_SERIF_EXAGGERATED = 9;
  static const WINAPI_PANOSE_SERIF PAN_SERIF_TRIANGLE = 10;
  static const WINAPI_PANOSE_SERIF PAN_SERIF_NORMAL_SANS = 11;
  static const WINAPI_PANOSE_SERIF PAN_SERIF_OBTUSE_SANS = 12;
  static const WINAPI_PANOSE_SERIF PAN_SERIF_PERP_SANS = 13;
  static const WINAPI_PANOSE_SERIF PAN_SERIF_FLARED = 14;
  static const WINAPI_PANOSE_SERIF PAN_SERIF_ROUNDED = 15;
  typedef BYTE WINAPI_PANOSE_WEIGHT; //Alias
//static const WINAPI_PANOSE_WEIGHT PAN_ANY = 0;
//static const WINAPI_PANOSE_WEIGHT PAN_NO_FIT = 1;
  static const WINAPI_PANOSE_WEIGHT PAN_WEIGHT_VERY_LIGHT = 2;
  static const WINAPI_PANOSE_WEIGHT PAN_WEIGHT_LIGHT = 3;
  static const WINAPI_PANOSE_WEIGHT PAN_WEIGHT_THIN = 4;
  static const WINAPI_PANOSE_WEIGHT PAN_WEIGHT_BOOK = 5;
  static const WINAPI_PANOSE_WEIGHT PAN_WEIGHT_MEDIUM = 6;
  static const WINAPI_PANOSE_WEIGHT PAN_WEIGHT_DEMI = 7;
  static const WINAPI_PANOSE_WEIGHT PAN_WEIGHT_BOLD = 8;
  static const WINAPI_PANOSE_WEIGHT PAN_WEIGHT_HEAVY = 9;
  static const WINAPI_PANOSE_WEIGHT PAN_WEIGHT_BLACK = 10;
  static const WINAPI_PANOSE_WEIGHT PAN_WEIGHT_NORD = 11;
  typedef BYTE WINAPI_PANOSE_PROPORTION; //Alias
//static const WINAPI_PANOSE_PROPORTION PAN_ANY = 0;
//static const WINAPI_PANOSE_PROPORTION PAN_NO_FIT = 1;
  static const WINAPI_PANOSE_PROPORTION PAN_PROP_OLD_STYLE = 2;
  static const WINAPI_PANOSE_PROPORTION PAN_PROP_MODERN = 3;
  static const WINAPI_PANOSE_PROPORTION PAN_PROP_EVEN_WIDTH = 4;
  static const WINAPI_PANOSE_PROPORTION PAN_PROP_EXPANDED = 5;
  static const WINAPI_PANOSE_PROPORTION PAN_PROP_CONDENSED = 6;
  static const WINAPI_PANOSE_PROPORTION PAN_PROP_VERY_EXPANDED = 7;
  static const WINAPI_PANOSE_PROPORTION PAN_PROP_VERY_CONDENSED = 8;
  static const WINAPI_PANOSE_PROPORTION PAN_PROP_MONOSPACED = 9;
  typedef BYTE WINAPI_PANOSE_CONTRAST; //Alias
//static const WINAPI_PANOSE_CONTRAST PAN_ANY = 0;
//static const WINAPI_PANOSE_CONTRAST PAN_NO_FIT = 1;
  static const WINAPI_PANOSE_CONTRAST PAN_CONTRAST_NONE = 2;
  static const WINAPI_PANOSE_CONTRAST PAN_CONTRAST_VERY_LOW = 3;
  static const WINAPI_PANOSE_CONTRAST PAN_CONTRAST_LOW = 4;
  static const WINAPI_PANOSE_CONTRAST PAN_CONTRAST_MEDIUM_LOW = 5;
  static const WINAPI_PANOSE_CONTRAST PAN_CONTRAST_MEDIUM = 6;
  static const WINAPI_PANOSE_CONTRAST PAN_CONTRAST_MEDIUM_HIGH = 7;
  static const WINAPI_PANOSE_CONTRAST PAN_CONTRAST_HIGH = 8;
  static const WINAPI_PANOSE_CONTRAST PAN_CONTRAST_VERY_HIGH = 9;
  typedef BYTE WINAPI_PANOSE_STROKE; //Alias
//static const WINAPI_PANOSE_STROKE PAN_ANY = 0;
//static const WINAPI_PANOSE_STROKE PAN_NO_FIT = 1;
  static const WINAPI_PANOSE_STROKE PAN_STROKE_GRADUAL_DIAG = 2;
  static const WINAPI_PANOSE_STROKE PAN_STROKE_GRADUAL_TRAN = 3;
  static const WINAPI_PANOSE_STROKE PAN_STROKE_GRADUAL_VERT = 4;
  static const WINAPI_PANOSE_STROKE PAN_STROKE_GRADUAL_HORZ = 5;
  static const WINAPI_PANOSE_STROKE PAN_STROKE_RAPID_VERT = 6;
  static const WINAPI_PANOSE_STROKE PAN_STROKE_RAPID_HORZ = 7;
  static const WINAPI_PANOSE_STROKE PAN_STROKE_INSTANT_VERT = 8;
  typedef BYTE WINAPI_PANOSE_ARM; //Alias
//static const WINAPI_PANOSE_ARM PAN_ANY = 0;
//static const WINAPI_PANOSE_ARM PAN_NO_FIT = 1;
  static const WINAPI_PANOSE_ARM PAN_STRAIGHT_ARMS_HORZ = 2;
  static const WINAPI_PANOSE_ARM PAN_STRAIGHT_ARMS_WEDGE = 3;
  static const WINAPI_PANOSE_ARM PAN_STRAIGHT_ARMS_VERT = 4;
  static const WINAPI_PANOSE_ARM PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5;
  static const WINAPI_PANOSE_ARM PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6;
  static const WINAPI_PANOSE_ARM PAN_BENT_ARMS_HORZ = 7;
  static const WINAPI_PANOSE_ARM PAN_BENT_ARMS_WEDGE = 8;
  static const WINAPI_PANOSE_ARM PAN_BENT_ARMS_VERT = 9;
  static const WINAPI_PANOSE_ARM PAN_BENT_ARMS_SINGLE_SERIF = 10;
  static const WINAPI_PANOSE_ARM PAN_BENT_ARMS_DOUBLE_SERIF = 11;
  typedef BYTE WINAPI_PANOSE_LETTER; //Alias
//static const WINAPI_PANOSE_LETTER PAN_ANY = 0;
//static const WINAPI_PANOSE_LETTER PAN_NO_FIT = 1;
  static const WINAPI_PANOSE_LETTER PAN_LETT_NORMAL_CONTACT = 2;
  static const WINAPI_PANOSE_LETTER PAN_LETT_NORMAL_WEIGHTED = 3;
  static const WINAPI_PANOSE_LETTER PAN_LETT_NORMAL_BOXED = 4;
  static const WINAPI_PANOSE_LETTER PAN_LETT_NORMAL_FLATTENED = 5;
  static const WINAPI_PANOSE_LETTER PAN_LETT_NORMAL_ROUNDED = 6;
  static const WINAPI_PANOSE_LETTER PAN_LETT_NORMAL_OFF_CENTER = 7;
  static const WINAPI_PANOSE_LETTER PAN_LETT_NORMAL_SQUARE = 8;
  static const WINAPI_PANOSE_LETTER PAN_LETT_OBLIQUE_CONTACT = 9;
  static const WINAPI_PANOSE_LETTER PAN_LETT_OBLIQUE_WEIGHTED = 10;
  static const WINAPI_PANOSE_LETTER PAN_LETT_OBLIQUE_BOXED = 11;
  static const WINAPI_PANOSE_LETTER PAN_LETT_OBLIQUE_FLATTENED = 12;
  static const WINAPI_PANOSE_LETTER PAN_LETT_OBLIQUE_ROUNDED = 13;
  static const WINAPI_PANOSE_LETTER PAN_LETT_OBLIQUE_OFF_CENTER = 14;
  static const WINAPI_PANOSE_LETTER PAN_LETT_OBLIQUE_SQUARE = 15;
  typedef BYTE WINAPI_PANOSE_MIDLINE; //Alias
//static const WINAPI_PANOSE_MIDLINE PAN_ANY = 0;
//static const WINAPI_PANOSE_MIDLINE PAN_NO_FIT = 1;
  static const WINAPI_PANOSE_MIDLINE PAN_MIDLINE_STANDARD_TRIMMED = 2;
  static const WINAPI_PANOSE_MIDLINE PAN_MIDLINE_STANDARD_POINTED = 3;
  static const WINAPI_PANOSE_MIDLINE PAN_MIDLINE_STANDARD_SERIFED = 4;
  static const WINAPI_PANOSE_MIDLINE PAN_MIDLINE_HIGH_TRIMMED = 5;
  static const WINAPI_PANOSE_MIDLINE PAN_MIDLINE_HIGH_POINTED = 6;
  static const WINAPI_PANOSE_MIDLINE PAN_MIDLINE_HIGH_SERIFED = 7;
  static const WINAPI_PANOSE_MIDLINE PAN_MIDLINE_CONSTANT_TRIMMED = 8;
  static const WINAPI_PANOSE_MIDLINE PAN_MIDLINE_CONSTANT_POINTED = 9;
  static const WINAPI_PANOSE_MIDLINE PAN_MIDLINE_CONSTANT_SERIFED = 10;
  static const WINAPI_PANOSE_MIDLINE PAN_MIDLINE_LOW_TRIMMED = 11;
  static const WINAPI_PANOSE_MIDLINE PAN_MIDLINE_LOW_POINTED = 12;
  static const WINAPI_PANOSE_MIDLINE PAN_MIDLINE_LOW_SERIFED = 13;
  typedef BYTE WINAPI_PANOSE_XHEIGHT; //Alias
//static const WINAPI_PANOSE_XHEIGHT PAN_ANY = 0;
//static const WINAPI_PANOSE_XHEIGHT PAN_NO_FIT = 1;
  static const WINAPI_PANOSE_XHEIGHT PAN_XHEIGHT_CONSTANT_SMALL = 2;
  static const WINAPI_PANOSE_XHEIGHT PAN_XHEIGHT_CONSTANT_STD = 3;
  static const WINAPI_PANOSE_XHEIGHT PAN_XHEIGHT_CONSTANT_LARGE = 4;
  static const WINAPI_PANOSE_XHEIGHT PAN_XHEIGHT_DUCKING_SMALL = 5;
  static const WINAPI_PANOSE_XHEIGHT PAN_XHEIGHT_DUCKING_STD = 6;
  static const WINAPI_PANOSE_XHEIGHT PAN_XHEIGHT_DUCKING_LARGE = 7;
  typedef struct PANOSE {
    WINAPI_PANOSE_FAMILY bFamilyType;
    WINAPI_PANOSE_SERIF bSerifStyle;
    WINAPI_PANOSE_WEIGHT bWeight;
    WINAPI_PANOSE_PROPORTION bProportion;
    WINAPI_PANOSE_CONTRAST bContrast;
    WINAPI_PANOSE_STROKE bStrokeVariation;
    WINAPI_PANOSE_ARM bArmStyle;
    WINAPI_PANOSE_LETTER bLetterform;
    WINAPI_PANOSE_MIDLINE bMidline;
    WINAPI_PANOSE_XHEIGHT bXHeight;
  } PANOSE;
  typedef struct OUTLINETEXTMETRIC {
    UINT otmSize;
    TEXTMETRIC otmTextMetrics;
    BYTE otmFiller;
    PANOSE otmPanoseNumber;
    WINAPI_OTM_SELECTION otmfsSelection;
    UINT otmfsType;
    int otmsCharSlopeRise;
    int otmsCharSlopeRun;
    int otmItalicAngle;
    UINT otmEMSquare;
    int otmAscent;
    int otmDescent;
    UINT otmLineGap;
    UINT otmsCapEmHeight;
    UINT otmsXHeight;
    RECT otmrcFontBox;
    int otmMacAscent;
    int otmMacDescent;
    UINT otmMacLineGap;
    UINT otmusMinimumPPEM;
    POINT otmptSubscriptSize;
    POINT otmptSubscriptOffset;
    POINT otmptSuperscriptSize;
    POINT otmptSuperscriptOffset;
    UINT otmsStrikeoutSize;
    int otmsStrikeoutPosition;
    int otmsUnderscoreSize;
    int otmsUnderscorePosition;
    PSTR otmpFamilyName;
    PSTR otmpFaceName;
    PSTR otmpStyleName;
    PSTR otmpFullName;
  } OUTLINETEXTMETRIC;
  typedef OUTLINETEXTMETRIC *LPOUTLINETEXTMETRIC; //Pointer
  typedef struct HANDLETABLE {
    HGDIOBJ objectHandle[1];
  } HANDLETABLE;
  typedef HANDLETABLE *LPHANDLETABLE; //Pointer
  typedef DWORD WINAPI_EMR_TYPE; //Alias
  static const WINAPI_EMR_TYPE EMR_HEADER = 1;
  static const WINAPI_EMR_TYPE EMR_POLYBEZIER = 2;
  static const WINAPI_EMR_TYPE EMR_POLYGON = 3;
  static const WINAPI_EMR_TYPE EMR_POLYLINE = 4;
  static const WINAPI_EMR_TYPE EMR_POLYBEZIERTO = 5;
  static const WINAPI_EMR_TYPE EMR_POLYLINETO = 6;
  static const WINAPI_EMR_TYPE EMR_POLYPOLYLINE = 7;
  static const WINAPI_EMR_TYPE EMR_POLYPOLYGON = 8;
  static const WINAPI_EMR_TYPE EMR_SETWINDOWEXTEX = 9;
  static const WINAPI_EMR_TYPE EMR_SETWINDOWORGEX = 10;
  static const WINAPI_EMR_TYPE EMR_SETVIEWPORTEXTEX = 11;
  static const WINAPI_EMR_TYPE EMR_SETVIEWPORTORGEX = 12;
  static const WINAPI_EMR_TYPE EMR_SETBRUSHORGEX = 13;
  static const WINAPI_EMR_TYPE EMR_EOF = 14;
  static const WINAPI_EMR_TYPE EMR_SETPIXELV = 15;
  static const WINAPI_EMR_TYPE EMR_SETMAPPERFLAGS = 16;
  static const WINAPI_EMR_TYPE EMR_SETMAPMODE = 17;
  static const WINAPI_EMR_TYPE EMR_SETBKMODE = 18;
  static const WINAPI_EMR_TYPE EMR_SETPOLYFILLMODE = 19;
  static const WINAPI_EMR_TYPE EMR_SETROP2 = 20;
  static const WINAPI_EMR_TYPE EMR_SETSTRETCHBLTMODE = 21;
  static const WINAPI_EMR_TYPE EMR_SETTEXTALIGN = 22;
  static const WINAPI_EMR_TYPE EMR_SETCOLORADJUSTMENT = 23;
  static const WINAPI_EMR_TYPE EMR_SETTEXTCOLOR = 24;
  static const WINAPI_EMR_TYPE EMR_SETBKCOLOR = 25;
  static const WINAPI_EMR_TYPE EMR_OFFSETCLIPRGN = 26;
  static const WINAPI_EMR_TYPE EMR_MOVETOEX = 27;
  static const WINAPI_EMR_TYPE EMR_SETMETARGN = 28;
  static const WINAPI_EMR_TYPE EMR_EXCLUDECLIPRECT = 29;
  static const WINAPI_EMR_TYPE EMR_INTERSECTCLIPRECT = 30;
  static const WINAPI_EMR_TYPE EMR_SCALEVIEWPORTEXTEX = 31;
  static const WINAPI_EMR_TYPE EMR_SCALEWINDOWEXTEX = 32;
  static const WINAPI_EMR_TYPE EMR_SAVEDC = 33;
  static const WINAPI_EMR_TYPE EMR_RESTOREDC = 34;
  static const WINAPI_EMR_TYPE EMR_SETWORLDTRANSFORM = 35;
  static const WINAPI_EMR_TYPE EMR_MODIFYWORLDTRANSFORM = 36;
  static const WINAPI_EMR_TYPE EMR_SELECTOBJECT = 37;
  static const WINAPI_EMR_TYPE EMR_CREATEPEN = 38;
  static const WINAPI_EMR_TYPE EMR_CREATEBRUSHINDIRECT = 39;
  static const WINAPI_EMR_TYPE EMR_DELETEOBJECT = 40;
  static const WINAPI_EMR_TYPE EMR_ANGLEARC = 41;
  static const WINAPI_EMR_TYPE EMR_ELLIPSE = 42;
  static const WINAPI_EMR_TYPE EMR_RECTANGLE = 43;
  static const WINAPI_EMR_TYPE EMR_ROUNDRECT = 44;
  static const WINAPI_EMR_TYPE EMR_ARC = 45;
  static const WINAPI_EMR_TYPE EMR_CHORD = 46;
  static const WINAPI_EMR_TYPE EMR_PIE = 47;
  static const WINAPI_EMR_TYPE EMR_SELECTPALETTE = 48;
  static const WINAPI_EMR_TYPE EMR_CREATEPALETTE = 49;
  static const WINAPI_EMR_TYPE EMR_SETPALETTEENTRIES = 50;
  static const WINAPI_EMR_TYPE EMR_RESIZEPALETTE = 51;
  static const WINAPI_EMR_TYPE EMR_REALIZEPALETTE = 52;
  static const WINAPI_EMR_TYPE EMR_EXTFLOODFILL = 53;
  static const WINAPI_EMR_TYPE EMR_LINETO = 54;
  static const WINAPI_EMR_TYPE EMR_ARCTO = 55;
  static const WINAPI_EMR_TYPE EMR_POLYDRAW = 56;
  static const WINAPI_EMR_TYPE EMR_SETARCDIRECTION = 57;
  static const WINAPI_EMR_TYPE EMR_SETMITERLIMIT = 58;
  static const WINAPI_EMR_TYPE EMR_BEGINPATH = 59;
  static const WINAPI_EMR_TYPE EMR_ENDPATH = 60;
  static const WINAPI_EMR_TYPE EMR_CLOSEFIGURE = 61;
  static const WINAPI_EMR_TYPE EMR_FILLPATH = 62;
  static const WINAPI_EMR_TYPE EMR_STROKEANDFILLPATH = 63;
  static const WINAPI_EMR_TYPE EMR_STROKEPATH = 64;
  static const WINAPI_EMR_TYPE EMR_FLATTENPATH = 65;
  static const WINAPI_EMR_TYPE EMR_WIDENPATH = 66;
  static const WINAPI_EMR_TYPE EMR_SELECTCLIPPATH = 67;
  static const WINAPI_EMR_TYPE EMR_ABORTPATH = 68;
  static const WINAPI_EMR_TYPE EMR_GDICOMMENT = 70;
  static const WINAPI_EMR_TYPE EMR_FILLRGN = 71;
  static const WINAPI_EMR_TYPE EMR_FRAMERGN = 72;
  static const WINAPI_EMR_TYPE EMR_INVERTRGN = 73;
  static const WINAPI_EMR_TYPE EMR_PAINTRGN = 74;
  static const WINAPI_EMR_TYPE EMR_EXTSELECTCLIPRGN = 75;
  static const WINAPI_EMR_TYPE EMR_BITBLT = 76;
  static const WINAPI_EMR_TYPE EMR_STRETCHBLT = 77;
  static const WINAPI_EMR_TYPE EMR_MASKBLT = 78;
  static const WINAPI_EMR_TYPE EMR_PLGBLT = 79;
  static const WINAPI_EMR_TYPE EMR_SETDIBITSTODEVICE = 80;
  static const WINAPI_EMR_TYPE EMR_STRETCHDIBITS = 81;
  static const WINAPI_EMR_TYPE EMR_EXTCREATEFONTINDIRECTW = 82;
  static const WINAPI_EMR_TYPE EMR_EXTTEXTOUTA = 83;
  static const WINAPI_EMR_TYPE EMR_EXTTEXTOUTW = 84;
  static const WINAPI_EMR_TYPE EMR_POLYBEZIER16 = 85;
  static const WINAPI_EMR_TYPE EMR_POLYGON16 = 86;
  static const WINAPI_EMR_TYPE EMR_POLYLINE16 = 87;
  static const WINAPI_EMR_TYPE EMR_POLYBEZIERTO16 = 88;
  static const WINAPI_EMR_TYPE EMR_POLYLINETO16 = 89;
  static const WINAPI_EMR_TYPE EMR_POLYPOLYLINE16 = 90;
  static const WINAPI_EMR_TYPE EMR_POLYPOLYGON16 = 91;
  static const WINAPI_EMR_TYPE EMR_POLYDRAW16 = 92;
  static const WINAPI_EMR_TYPE EMR_CREATEMONOBRUSH = 93;
  static const WINAPI_EMR_TYPE EMR_CREATEDIBPATTERNBRUSHPT = 94;
  static const WINAPI_EMR_TYPE EMR_EXTCREATEPEN = 95;
  static const WINAPI_EMR_TYPE EMR_POLYTEXTOUTA = 96;
  static const WINAPI_EMR_TYPE EMR_POLYTEXTOUTW = 97;
  static const WINAPI_EMR_TYPE EMR_SETICMMODE = 98;
  static const WINAPI_EMR_TYPE EMR_CREATECOLORSPACE = 99;
  static const WINAPI_EMR_TYPE EMR_SETCOLORSPACE = 100;
  static const WINAPI_EMR_TYPE EMR_DELETECOLORSPACE = 101;
  static const WINAPI_EMR_TYPE EMR_GLSRECORD = 102;
  static const WINAPI_EMR_TYPE EMR_GLSBOUNDEDRECORD = 103;
  static const WINAPI_EMR_TYPE EMR_PIXELFORMAT = 104;
  static const WINAPI_EMR_TYPE EMR_RESERVED_105 = 105;
  static const WINAPI_EMR_TYPE EMR_RESERVED_106 = 106;
  static const WINAPI_EMR_TYPE EMR_RESERVED_107 = 107;
  static const WINAPI_EMR_TYPE EMR_RESERVED_108 = 108;
  static const WINAPI_EMR_TYPE EMR_RESERVED_109 = 109;
  static const WINAPI_EMR_TYPE EMR_RESERVED_110 = 110;
  static const WINAPI_EMR_TYPE EMR_COLORCORRECTPALETTE = 111;
  static const WINAPI_EMR_TYPE EMR_SETICMPROFILEA = 112;
  static const WINAPI_EMR_TYPE EMR_SETICMPROFILEW = 113;
  static const WINAPI_EMR_TYPE EMR_ALPHABLEND = 114;
  static const WINAPI_EMR_TYPE EMR_SETLAYOUT = 115;
  static const WINAPI_EMR_TYPE EMR_TRANSPARENTBLT = 116;
  static const WINAPI_EMR_TYPE EMR_RESERVED_117 = 117;
  static const WINAPI_EMR_TYPE EMR_GRADIENTFILL = 118;
  static const WINAPI_EMR_TYPE EMR_RESERVED_119 = 119;
  static const WINAPI_EMR_TYPE EMR_RESERVED_120 = 120;
  static const WINAPI_EMR_TYPE EMR_COLORMATCHTOTARGETW = 121;
  static const WINAPI_EMR_TYPE EMR_CREATECOLORSPACEW = 122;
  typedef struct ENHMETARECORD {
    WINAPI_EMR_TYPE iType;
    DWORD nSize;
    DWORD dParm[1];
  } ENHMETARECORD;
  typedef struct METARECORD {
    DWORD rdSize;
    WORD rdFunction;
    WORD rdParm[1];
  } METARECORD;
  typedef METARECORD *LPMETARECORD; //Pointer
  typedef struct FONTSIGNATURE {
    DWORD fsUsb[4];
    DWORD fsCsb[2];
  } FONTSIGNATURE;
  typedef FONTSIGNATURE *LPFONTSIGNATURE; //Pointer
  typedef struct CHARSETINFO {
    UINT ciCharset;
    WINAPI_CodePageEnum ciACP;
    FONTSIGNATURE fs;
  } CHARSETINFO;
  typedef CHARSETINFO *LPCHARSETINFO; //Pointer
  typedef struct BITMAP {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
  } BITMAP;
  typedef struct LOGBRUSH {
    UINT lbStyle;
    COLORREF lbColor;
    ULONG_PTR lbHatch;
  } LOGBRUSH;
  typedef struct COLORADJUSTMENT {
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
  } COLORADJUSTMENT;
  typedef COLORADJUSTMENT *LPCOLORADJUSTMENT; //Pointer
  typedef struct XFORM {
    FLOAT eM11;
    FLOAT eM12;
    FLOAT eM21;
    FLOAT eM22;
    FLOAT eDx;
    FLOAT eDy;
  } XFORM;
  typedef XFORM *LPXFORM; //Pointer
  typedef struct ABCFLOAT {
    FLOAT abcfA;
    FLOAT abcfB;
    FLOAT abcfC;
  } ABCFLOAT;
  typedef ABCFLOAT *LPABCFLOAT; //Pointer
  typedef struct GCP_RESULTS {
    DWORD lStructSize;
    LPTSTR lpOutString;
    UINT* lpOrder;
    int* lpDx;
    int* lpCaretPos;
    LPSTR lpClass;
    LPWSTR lpGlyphs;
    UINT nGlyphs;
    int nMaxFit;
  } GCP_RESULTS;
  typedef GCP_RESULTS *LPGCP_RESULTS; //Pointer
  typedef struct GLYPHMETRICS {
    UINT gmBlackBoxX;
    UINT gmBlackBoxY;
    POINT gmptGlyphOrigin;
    short gmCellIncX;
    short gmCellIncY;
  } GLYPHMETRICS;
  typedef GLYPHMETRICS *LPGLYPHMETRICS; //Pointer
  typedef struct FIXED {
    WORD fract;
    short value;
  } FIXED;
  typedef struct MAT2 {
    FIXED eM11;
    FIXED eM12;
    FIXED eM21;
    FIXED eM22;
  } MAT2;
  typedef struct KERNINGPAIR {
    WORD wFirst;
    WORD wSecond;
    int iKernAmount;
  } KERNINGPAIR;
  typedef KERNINGPAIR *LPKERNINGPAIR; //Pointer
  typedef struct RASTERIZER_STATUS {
    short nSize;
    short wFlags;
    short nLanguageID;
  } RASTERIZER_STATUS;
  typedef RASTERIZER_STATUS *LPRASTERIZER_STATUS; //Pointer
  typedef struct POLYTEXT {
    int x;
    int y;
    UINT n;
    LPCTSTR lpstr;
    UINT uiFlags;
    RECT rcl;
    int* pdx;
  } POLYTEXT;
  typedef struct ENHMETAHEADER {
    DWORD iType;
    DWORD nSize;
    RECTL rclBounds;
    RECTL rclFrame;
    DWORD dSignature;
    DWORD nVersion;
    DWORD nBytes;
    DWORD nRecords;
    WORD nHandles;
    WORD sReserved;
    DWORD nDescription;
    DWORD offDescription;
    DWORD nPalEntries;
    SIZEL szlDevice;
    SIZEL szlMillimeters;
    DWORD cbPixelFormat;
    DWORD offPixelFormat;
    DWORD bOpenGL;
    SIZEL szlMicrometers;
  } ENHMETAHEADER;
  typedef ENHMETAHEADER *LPENHMETAHEADER; //Pointer
  typedef struct METAFILEPICT {
    LONG mm;
    LONG xExt;
    LONG yExt;
    HMETAFILE hMF;
  } METAFILEPICT;
  typedef struct DOCINFO {
    int cbSize;
    LPCTSTR lpszDocName;
    LPCTSTR lpszOutput;
    LPCTSTR lpszDatatype;
    DWORD fwType;
  } DOCINFO;
  typedef struct PIXELFORMATDESCRIPTOR {
    WORD nSize;
    WORD nVersion;
    DWORD dwFlags;
    BYTE iPixelType;
    BYTE cColorBits;
    BYTE cRedBits;
    BYTE cRedShift;
    BYTE cGreenBits;
    BYTE cGreenShift;
    BYTE cBlueBits;
    BYTE cBlueShift;
    BYTE cAlphaBits;
    BYTE cAlphaShift;
    BYTE cAccumBits;
    BYTE cAccumRedBits;
    BYTE cAccumGreenBits;
    BYTE cAccumBlueBits;
    BYTE cAccumAlphaBits;
    BYTE cDepthBits;
    BYTE cStencilBits;
    BYTE cAuxBuffers;
    BYTE iLayerType;
    BYTE bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
  } PIXELFORMATDESCRIPTOR;
  typedef PIXELFORMATDESCRIPTOR *LPPIXELFORMATDESCRIPTOR; //Pointer
  typedef int WINAPI_DeviceCapsEnum; //Alias
  static const WINAPI_DeviceCapsEnum DRIVERVERSION = 0;
  static const WINAPI_DeviceCapsEnum TECHNOLOGY = 2;
  static const WINAPI_DeviceCapsEnum HORZSIZE = 4;
  static const WINAPI_DeviceCapsEnum VERTSIZE = 6;
  static const WINAPI_DeviceCapsEnum HORZRES = 8;
  static const WINAPI_DeviceCapsEnum VERTRES = 10;
  static const WINAPI_DeviceCapsEnum BITSPIXEL = 12;
  static const WINAPI_DeviceCapsEnum PLANES = 14;
  static const WINAPI_DeviceCapsEnum NUMBRUSHES = 16;
  static const WINAPI_DeviceCapsEnum NUMPENS = 18;
  static const WINAPI_DeviceCapsEnum NUMMARKERS = 20;
  static const WINAPI_DeviceCapsEnum NUMFONTS = 22;
  static const WINAPI_DeviceCapsEnum NUMCOLORS = 24;
  static const WINAPI_DeviceCapsEnum PDEVICESIZE = 26;
  static const WINAPI_DeviceCapsEnum CURVECAPS = 28;
  static const WINAPI_DeviceCapsEnum LINECAPS = 30;
  static const WINAPI_DeviceCapsEnum POLYGONALCAPS = 32;
  static const WINAPI_DeviceCapsEnum TEXTCAPS = 34;
  static const WINAPI_DeviceCapsEnum CLIPCAPS = 36;
  static const WINAPI_DeviceCapsEnum RASTERCAPS = 38;
  static const WINAPI_DeviceCapsEnum ASPECTX = 40;
  static const WINAPI_DeviceCapsEnum ASPECTY = 42;
  static const WINAPI_DeviceCapsEnum ASPECTXY = 44;
  static const WINAPI_DeviceCapsEnum LOGPIXELSX = 88;
  static const WINAPI_DeviceCapsEnum LOGPIXELSY = 90;
  static const WINAPI_DeviceCapsEnum SIZEPALETTE = 104;
  static const WINAPI_DeviceCapsEnum NUMRESERVED = 106;
  static const WINAPI_DeviceCapsEnum COLORRES = 108;
  static const WINAPI_DeviceCapsEnum PHYSICALWIDTH = 110;
  static const WINAPI_DeviceCapsEnum PHYSICALHEIGHT = 111;
  static const WINAPI_DeviceCapsEnum PHYSICALOFFSETX = 112;
  static const WINAPI_DeviceCapsEnum PHYSICALOFFSETY = 113;
  static const WINAPI_DeviceCapsEnum SCALINGFACTORX = 114;
  static const WINAPI_DeviceCapsEnum SCALINGFACTORY = 115;
  static const WINAPI_DeviceCapsEnum VREFRESH = 116;
  static const WINAPI_DeviceCapsEnum DESKTOPVERTRES = 117;
  static const WINAPI_DeviceCapsEnum DESKTOPHORZRES = 118;
  static const WINAPI_DeviceCapsEnum BLTALIGNMENT = 119;
  static const WINAPI_DeviceCapsEnum SHADEBLENDCAPS = 120;
  static const WINAPI_DeviceCapsEnum COLORMGMTCAPS = 121;
  typedef DWORD WINAPI_RasterOperationEnum; //Alias
  static const WINAPI_RasterOperationEnum SRCCOPY = 0x00CC0020;
  static const WINAPI_RasterOperationEnum SRCPAINT = 0x00EE0086;
  static const WINAPI_RasterOperationEnum SRCAND = 0x008800C6;
  static const WINAPI_RasterOperationEnum SRCINVERT = 0x00660046;
  static const WINAPI_RasterOperationEnum SRCERASE = 0x00440328;
  static const WINAPI_RasterOperationEnum NOTSRCCOPY = 0x00330008;
  static const WINAPI_RasterOperationEnum NOTSRCERASE = 0x001100A6;
  static const WINAPI_RasterOperationEnum MERGECOPY = 0x00C000CA;
  static const WINAPI_RasterOperationEnum MERGEPAINT = 0x00BB0226;
  static const WINAPI_RasterOperationEnum PATCOPY = 0x00F00021;
  static const WINAPI_RasterOperationEnum PATPAINT = 0x00FB0A09;
  static const WINAPI_RasterOperationEnum PATINVERT = 0x005A0049;
  static const WINAPI_RasterOperationEnum DSTINVERT = 0x00550009;
  static const WINAPI_RasterOperationEnum BLACKNESS = 0x00000042;
  static const WINAPI_RasterOperationEnum WHITENESS = 0x00FF0062;
  static const WINAPI_RasterOperationEnum NOMIRRORBITMAP = 0x80000000;
  static const WINAPI_RasterOperationEnum CAPTUREBLT = 0x40000000;
  typedef int WINAPI_StretchModeEnum; //Alias
  static const WINAPI_StretchModeEnum BLACKONWHITE = 1;
  static const WINAPI_StretchModeEnum WHITEONBLACK = 2;
  static const WINAPI_StretchModeEnum COLORONCOLOR = 3;
  static const WINAPI_StretchModeEnum HALFTONE = 4;
  typedef INT WINAPI_RandomRgnEnum; //Alias
  static const WINAPI_RandomRgnEnum SYSRGN = 4;
  typedef UINT WINAPI_ColorUseEnum; //Alias
  static const WINAPI_ColorUseEnum DIB_RGB_COLORS = 0;
  static const WINAPI_ColorUseEnum DIB_PAL_COLORS = 0;
  typedef DWORD WINAPI_CreateBitmapInitFlag; //Alias
  typedef int WINAPI_ROP2ModeEnum; //Alias
  static const WINAPI_ROP2ModeEnum R2_BLACK = 1;
  static const WINAPI_ROP2ModeEnum R2_NOTMERGEPEN = 2;
  static const WINAPI_ROP2ModeEnum R2_MASKNOTPEN = 3;
  static const WINAPI_ROP2ModeEnum R2_NOTCOPYPEN = 4;
  static const WINAPI_ROP2ModeEnum R2_MASKPENNOT = 5;
  static const WINAPI_ROP2ModeEnum R2_NOT = 6;
  static const WINAPI_ROP2ModeEnum R2_XORPEN = 7;
  static const WINAPI_ROP2ModeEnum R2_NOTMASKPEN = 8;
  static const WINAPI_ROP2ModeEnum R2_MASKPEN = 9;
  static const WINAPI_ROP2ModeEnum R2_NOTXORPEN = 10;
  static const WINAPI_ROP2ModeEnum R2_NOP = 11;
  static const WINAPI_ROP2ModeEnum R2_MERGENOTPEN = 12;
  static const WINAPI_ROP2ModeEnum R2_COPYPEN = 13;
  static const WINAPI_ROP2ModeEnum R2_MERGEPENNOT = 14;
  static const WINAPI_ROP2ModeEnum R2_MERGEPEN = 15;
  static const WINAPI_ROP2ModeEnum R2_WHITE = 16;
  typedef int WINAPI_BkModeEnum; //Alias
  static const WINAPI_BkModeEnum TRANSPARENT = 1;
  static const WINAPI_BkModeEnum OPAQUE = 2;
  typedef UINT WINAPI_TextAlignFlag; //Alias
  typedef int WINAPI_RgnMode; //Alias
  static const WINAPI_RgnMode RGN_AND = 1;
  static const WINAPI_RgnMode RGN_OR = 2;
  static const WINAPI_RgnMode RGN_XOR = 3;
  static const WINAPI_RgnMode RGN_DIFF = 4;
  static const WINAPI_RgnMode RGN_COPY = 5;
  typedef DWORD WINAPI_TranslateCharsetInfoFlag; //Alias
  static const WINAPI_TranslateCharsetInfoFlag TCI_SRCCHARSET = 1;
  static const WINAPI_TranslateCharsetInfoFlag TCI_SRCCODEPAGE = 2;
  static const WINAPI_TranslateCharsetInfoFlag TCI_SRCFONTSIG = 3;
  static const WINAPI_TranslateCharsetInfoFlag TCI_SRCLOCALE = 0x1000;
  typedef UINT WINAPI_ObjectType; //Alias
  static const WINAPI_ObjectType OBJ_PEN = 1;
  static const WINAPI_ObjectType OBJ_BRUSH = 2;
  static const WINAPI_ObjectType OBJ_DC = 3;
  static const WINAPI_ObjectType OBJ_METADC = 4;
  static const WINAPI_ObjectType OBJ_PAL = 5;
  static const WINAPI_ObjectType OBJ_FONT = 6;
  static const WINAPI_ObjectType OBJ_BITMAP = 7;
  static const WINAPI_ObjectType OBJ_REGION = 8;
  static const WINAPI_ObjectType OBJ_METAFILE = 9;
  static const WINAPI_ObjectType OBJ_MEMDC = 10;
  static const WINAPI_ObjectType OBJ_EXTPEN = 11;
  static const WINAPI_ObjectType OBJ_ENHMETADC = 12;
  static const WINAPI_ObjectType OBJ_ENHMETAFILE = 13;
  static const WINAPI_ObjectType OBJ_COLORSPACE = 14;
  typedef int WINAPI_MappingMode; //Alias
  static const WINAPI_MappingMode MM_TEXT = 1;
  static const WINAPI_MappingMode MM_LOMETRIC = 2;
  static const WINAPI_MappingMode MM_HIMETRIC = 3;
  static const WINAPI_MappingMode MM_LOENGLISH = 4;
  static const WINAPI_MappingMode MM_HIENGLISH = 5;
  static const WINAPI_MappingMode MM_TWIPS = 6;
  static const WINAPI_MappingMode MM_ISOTROPIC = 7;
  static const WINAPI_MappingMode MM_ANISOTROPIC = 8;
  typedef DWORD WINAPI_LayoutFlags; //Alias
  typedef UINT WINAPI_BoundsAccumulationFlags; //Alias
  typedef UINT WINAPI_ExtTextOutFlags; //Alias
  typedef DWORD WINAPI_ModifyWorldTransformMode; //Alias
  static const WINAPI_ModifyWorldTransformMode MWT_IDENTITY = 1;
  static const WINAPI_ModifyWorldTransformMode MWT_LEFTMULTIPLY = 2;
  static const WINAPI_ModifyWorldTransformMode MWT_RIGHTMULTIPLY = 3;
  typedef DWORD WINAPI_GetGlyphIndicesFlag; //Alias
  typedef int WINAPI_PolyFillModes; //Alias
  static const WINAPI_PolyFillModes ALTERNATE = 1;
  static const WINAPI_PolyFillModes WINDING = 2;
  typedef int WINAPI_GraphicsModes; //Alias
  static const WINAPI_GraphicsModes GM_COMPATIBLE = 1;
  static const WINAPI_GraphicsModes GM_ADVANCED = 2;
  typedef int WINAPI_HatchStyle; //Alias
  static const WINAPI_HatchStyle HS_HORIZONTAL = 0;
  static const WINAPI_HatchStyle HS_VERTICAL = 1;
  static const WINAPI_HatchStyle HS_FDIAGONAL = 2;
  static const WINAPI_HatchStyle HS_BDIAGONAL = 3;
  static const WINAPI_HatchStyle HS_CROSS = 4;
  static const WINAPI_HatchStyle HS_DIAGCROSS = 5;
  typedef int WINAPI_GdiEscapeFunction; //Alias
  static const WINAPI_GdiEscapeFunction NEWFRAME = 1;
  static const WINAPI_GdiEscapeFunction ABORTDOC = 2;
  static const WINAPI_GdiEscapeFunction NEXTBAND = 3;
  static const WINAPI_GdiEscapeFunction SETCOLORTABLE = 4;
  static const WINAPI_GdiEscapeFunction GETCOLORTABLE = 5;
  static const WINAPI_GdiEscapeFunction FLUSHOUTPUT = 6;
  static const WINAPI_GdiEscapeFunction DRAFTMODE = 7;
  static const WINAPI_GdiEscapeFunction QUERYESCSUPPORT = 8;
  static const WINAPI_GdiEscapeFunction SETABORTPROC = 9;
  static const WINAPI_GdiEscapeFunction STARTDOC = 10;
  static const WINAPI_GdiEscapeFunction ENDDOC = 11;
  static const WINAPI_GdiEscapeFunction GETPHYSPAGESIZE = 12;
  static const WINAPI_GdiEscapeFunction GETPRINTINGOFFSET = 13;
  static const WINAPI_GdiEscapeFunction GETSCALINGFACTOR = 14;
  static const WINAPI_GdiEscapeFunction MFCOMMENT = 15;
  static const WINAPI_GdiEscapeFunction GETPENWIDTH = 16;
  static const WINAPI_GdiEscapeFunction SETCOPYCOUNT = 17;
  static const WINAPI_GdiEscapeFunction SELECTPAPERSOURCE = 18;
  static const WINAPI_GdiEscapeFunction DEVICEDATA = 19;
  static const WINAPI_GdiEscapeFunction PASSTHROUGH = 19;
  static const WINAPI_GdiEscapeFunction GETTECHNOLGY = 20;
  static const WINAPI_GdiEscapeFunction GETTECHNOLOGY = 20;
  static const WINAPI_GdiEscapeFunction SETLINECAP = 21;
  static const WINAPI_GdiEscapeFunction SETLINEJOIN = 22;
  static const WINAPI_GdiEscapeFunction SETMITERLIMIT = 23;
  static const WINAPI_GdiEscapeFunction BANDINFO = 24;
  static const WINAPI_GdiEscapeFunction DRAWPATTERNRECT = 25;
  static const WINAPI_GdiEscapeFunction GETVECTORPENSIZE = 26;
  static const WINAPI_GdiEscapeFunction GETVECTORBRUSHSIZE = 27;
  static const WINAPI_GdiEscapeFunction ENABLEDUPLEX = 28;
  static const WINAPI_GdiEscapeFunction GETSETPAPERBINS = 29;
  static const WINAPI_GdiEscapeFunction GETSETPRINTORIENT = 30;
  static const WINAPI_GdiEscapeFunction ENUMPAPERBINS = 31;
  static const WINAPI_GdiEscapeFunction SETDIBSCALING = 32;
  static const WINAPI_GdiEscapeFunction EPSPRINTING = 33;
  static const WINAPI_GdiEscapeFunction ENUMPAPERMETRICS = 34;
  static const WINAPI_GdiEscapeFunction GETSETPAPERMETRICS = 35;
  static const WINAPI_GdiEscapeFunction POSTSCRIPT_DATA = 37;
  static const WINAPI_GdiEscapeFunction POSTSCRIPT_IGNORE = 38;
  static const WINAPI_GdiEscapeFunction MOUSETRAILS = 39;
  static const WINAPI_GdiEscapeFunction GETDEVICEUNITS = 42;
  static const WINAPI_GdiEscapeFunction GETEXTENDEDTEXTMETRICS = 256;
  static const WINAPI_GdiEscapeFunction GETEXTENTTABLE = 257;
  static const WINAPI_GdiEscapeFunction GETPAIRKERNTABLE = 258;
  static const WINAPI_GdiEscapeFunction GETTRACKKERNTABLE = 259;
  static const WINAPI_GdiEscapeFunction EXTTEXTOUT = 512;
  static const WINAPI_GdiEscapeFunction GETFACENAME = 513;
  static const WINAPI_GdiEscapeFunction DOWNLOADFACE = 514;
  static const WINAPI_GdiEscapeFunction ENABLERELATIVEWIDTHS = 768;
  static const WINAPI_GdiEscapeFunction ENABLEPAIRKERNING = 769;
  static const WINAPI_GdiEscapeFunction SETKERNTRACK = 770;
  static const WINAPI_GdiEscapeFunction SETALLJUSTVALUES = 771;
  static const WINAPI_GdiEscapeFunction SETCHARSET = 772;
  static const WINAPI_GdiEscapeFunction STRETCHBLT = 2048;
  static const WINAPI_GdiEscapeFunction METAFILE_DRIVER = 2049;
  static const WINAPI_GdiEscapeFunction GETSETSCREENPARAMS = 3072;
  static const WINAPI_GdiEscapeFunction QUERYDIBSUPPORT = 3073;
  static const WINAPI_GdiEscapeFunction BEGIN_PATH = 4096;
  static const WINAPI_GdiEscapeFunction CLIP_TO_PATH = 4097;
  static const WINAPI_GdiEscapeFunction END_PATH = 4098;
  static const WINAPI_GdiEscapeFunction EXT_DEVICE_CAPS = 4099;
  static const WINAPI_GdiEscapeFunction RESTORE_CTM = 4100;
  static const WINAPI_GdiEscapeFunction SAVE_CTM = 4101;
  static const WINAPI_GdiEscapeFunction SET_ARC_DIRECTION = 4102;
  static const WINAPI_GdiEscapeFunction SET_BACKGROUND_COLOR = 4103;
  static const WINAPI_GdiEscapeFunction SET_POLY_MODE = 4104;
  static const WINAPI_GdiEscapeFunction SET_SCREEN_ANGLE = 4105;
  static const WINAPI_GdiEscapeFunction SET_SPREAD = 4106;
  static const WINAPI_GdiEscapeFunction TRANSFORM_CTM = 4107;
  static const WINAPI_GdiEscapeFunction SET_CLIP_BOX = 4108;
  static const WINAPI_GdiEscapeFunction SET_BOUNDS = 4109;
  static const WINAPI_GdiEscapeFunction SET_MIRROR_MODE = 4110;
  static const WINAPI_GdiEscapeFunction OPENCHANNEL = 4110;
  static const WINAPI_GdiEscapeFunction DOWNLOADHEADER = 4111;
  static const WINAPI_GdiEscapeFunction CLOSECHANNEL = 4112;
  static const WINAPI_GdiEscapeFunction POSTSCRIPT_PASSTHROUGH = 4115;
  static const WINAPI_GdiEscapeFunction ENCAPSULATED_POSTSCRIPT = 4116;
  static const WINAPI_GdiEscapeFunction POSTSCRIPT_IDENTIFY = 4117;
  static const WINAPI_GdiEscapeFunction POSTSCRIPT_INJECTION = 4118;
  static const WINAPI_GdiEscapeFunction CHECKJPEGFORMAT = 4119;
  static const WINAPI_GdiEscapeFunction CHECKPNGFORMAT = 4120;
  static const WINAPI_GdiEscapeFunction GET_PS_FEATURESETTING = 4121;
  static const WINAPI_GdiEscapeFunction GDIPLUS_TS_QUERYVER = 4122;
  static const WINAPI_GdiEscapeFunction GDIPLUS_TS_RECORD = 4123;
  typedef UINT WINAPI_GetGlyphOutlineFormat; //Alias
  static const WINAPI_GetGlyphOutlineFormat GGO_METRICS = 0;
  static const WINAPI_GetGlyphOutlineFormat GGO_BITMAP = 1;
  static const WINAPI_GetGlyphOutlineFormat GGO_NATIVE = 2;
  static const WINAPI_GetGlyphOutlineFormat GGO_BEZIER = 3;
  static const WINAPI_GetGlyphOutlineFormat GGO_GRAY2_BITMAP = 4;
  static const WINAPI_GetGlyphOutlineFormat GGO_GRAY4_BITMAP = 5;
  static const WINAPI_GetGlyphOutlineFormat GGO_GRAY8_BITMAP = 6;
  static const WINAPI_GetGlyphOutlineFormat GGO_GLYPH_INDEX = 0x0080;
  static const WINAPI_GetGlyphOutlineFormat GGO_UNHINTED = 0x0100;
  typedef int WINAPI_STOCK_OBJECT; //Alias
  static const WINAPI_STOCK_OBJECT WHITE_BRUSH = 0;
  static const WINAPI_STOCK_OBJECT LTGRAY_BRUSH = 1;
  static const WINAPI_STOCK_OBJECT GRAY_BRUSH = 2;
  static const WINAPI_STOCK_OBJECT DKGRAY_BRUSH = 3;
  static const WINAPI_STOCK_OBJECT BLACK_BRUSH = 4;
  static const WINAPI_STOCK_OBJECT HOLLOW_BRUSH = 5;
  static const WINAPI_STOCK_OBJECT WHITE_PEN = 6;
  static const WINAPI_STOCK_OBJECT BLACK_PEN = 7;
  static const WINAPI_STOCK_OBJECT NULL_PEN = 8;
  static const WINAPI_STOCK_OBJECT OEM_FIXED_FONT = 10;
  static const WINAPI_STOCK_OBJECT ANSI_FIXED_FONT = 11;
  static const WINAPI_STOCK_OBJECT ANSI_VAR_FONT = 12;
  static const WINAPI_STOCK_OBJECT SYSTEM_FONT = 13;
  static const WINAPI_STOCK_OBJECT DEVICE_DEFAULT_FONT = 14;
  static const WINAPI_STOCK_OBJECT DEFAULT_PALETTE = 15;
  static const WINAPI_STOCK_OBJECT SYSTEM_FIXED_FONT = 16;
  static const WINAPI_STOCK_OBJECT DEFAULT_GUI_FONT = 17;
  static const WINAPI_STOCK_OBJECT DC_BRUSH = 18;
  static const WINAPI_STOCK_OBJECT DC_PEN = 19;
  typedef DWORD WINAPI_GCP_FLAGS; //Alias
  BOOL                   BitBlt(                       HDC hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, HDC hdcSrc, int nXSrc, int nYSrc, WINAPI_RasterOperationEnum dwRop);
  HBITMAP                CreateBitmap(                 int nWidth, int nHeight, UINT cPlanes, UINT cBitsPerPel, VOID* lpvBits);
  HBITMAP                CreateBitmapIndirect(         BITMAP* lpbm);
  HBITMAP                CreateCompatibleBitmap(       HDC hdc, int nWidth, int nHeight);
  HBITMAP                CreateDIBitmap(               HDC hdc, BITMAPINFOHEADER* lpbmih, WINAPI_CreateBitmapInitFlag fdwInit, VOID* lpbInit, BITMAPINFO* lpbmi, WINAPI_ColorUseEnum fuUsage);
  HBITMAP                CreateDIBSection(             HDC hdc, BITMAPINFO* pbmi, WINAPI_ColorUseEnum iUsage, VOID** ppvBits, HANDLE hSection, DWORD dwOffset);
  BOOL                   ExtFloodFill(                 HDC hdc, int nXStart, int nYStart, COLORREF crColor, UINT fuFillType);
  BOOL                   GetBitmapDimensionEx(         HBITMAP hBitmap, LPSIZE lpDimension);
  UINT                   GetDIBColorTable(             HDC hdc, UINT uStartIndex, UINT cEntries, RGBQUAD* pColors);
  int                    GetDIBits(                    HDC hdc, HBITMAP hbmp, UINT uStartScan, UINT cScanLines, LPVOID lpvBits, LPBITMAPINFO lpbi, WINAPI_ColorUseEnum uUsage);
  COLORREF               GetPixel(                     HDC hdc, int nXPos, int nYPos);
  int                    GetStretchBltMode(            HDC hdc);
  BOOL                   MaskBlt(                      HDC hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, HDC hdcSrc, int nXSrc, int nYSrc, HBITMAP hbmMask, int xMask, int yMask, WINAPI_RasterOperationEnum dwRop);
  BOOL                   PlgBlt(                       HDC hdcDest, POINT* lpPoint, HDC hdcSrc, int nXSrc, int nYSrc, int nWidth, int nHeight, HBITMAP hbmMask, int xMask, int yMask);
  BOOL                   SetBitmapDimensionEx(         HBITMAP hBitmap, int nWidth, int nHeight, LPSIZE lpSize);
  UINT                   SetDIBColorTable(             HDC hdc, UINT uStartIndex, UINT cEntries, RGBQUAD* pColors);
  int                    SetDIBits(                    HDC hdc, HBITMAP hbmp, UINT uStartScan, UINT cScanLines, VOID* lpvBits, BITMAPINFO* lpbmi, WINAPI_ColorUseEnum fuColorUse);
  int                    SetDIBitsToDevice(            HDC hdc, int XDest, int YDest, DWORD dwWidth, DWORD dwHeight, int XSrc, int YSrc, UINT uStartScan, UINT cScanLines, VOID* lpvBits, BITMAPINFO* lpbmi, WINAPI_ColorUseEnum fuColorUse);
  COLORREF               SetPixel(                     HDC hdc, int X, int Y, COLORREF crColor);
  BOOL                   SetPixelV(                    HDC hdc, int X, int Y, COLORREF crColor);
  int                    SetStretchBltMode(            HDC hdc, WINAPI_StretchModeEnum iStretchMode);
  BOOL                   StretchBlt(                   HDC hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, HDC hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, WINAPI_RasterOperationEnum dwRop);
  int                    StretchDIBits(                HDC hdc, int XDest, int YDest, int nDestWidth, int nDestHeight, int XSrc, int YSrc, int nSrcWidth, int nSrcHeight, VOID* lpBits, BITMAPINFO* lpBitsInfo, WINAPI_ColorUseEnum iUsage, WINAPI_RasterOperationEnum dwRop);
  HBITMAP                CreateDiscardableBitmap(      HDC hdc, int nWidth, int nHeight);
  BOOL                   FloodFill(                    HDC hdc, int nXStart, int nYStart, COLORREF crFill);
  LONG                   GetBitmapBits(                HBITMAP hbmp, LONG cbBuffer, LPVOID lpvBits);
  LONG                   SetBitmapBits(                HBITMAP hbmp, DWORD cBytes, VOID* lpBits);
  HBRUSH                 CreateBrushIndirect(          LOGBRUSH* lplb);
  HBRUSH                 CreateDIBPatternBrushPt(      VOID* lpPackedDIB, WINAPI_ColorUseEnum iUsage);
  HBRUSH                 CreateHatchBrush(             WINAPI_HatchStyle fnStyle, COLORREF clrref);
  HBRUSH                 CreatePatternBrush(           HBITMAP hbmp);
  HBRUSH                 CreateSolidBrush(             COLORREF crColor);
  BOOL                   GetBrushOrgEx(                HDC hdc, LPPOINT lppt);
  BOOL                   PatBlt(                       HDC hdc, int nXLeft, int nYLeft, int nWidth, int nHeight, WINAPI_RasterOperationEnum dwRop);
  BOOL                   SetBrushOrgEx(                HDC hdc, int nXOrg, int nYOrg, LPPOINT lppt);
  HBRUSH                 CreateDIBPatternBrush(        HGLOBAL hglbDIBPacked, UINT fuColorSpec);
  int                    ExcludeClipRect(              HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
  int                    ExtSelectClipRgn(             HDC hdc, HRGN hrgn, WINAPI_RgnMode fnMode);
  int                    GetClipBox(                   HDC hdc, LPRECT lprc);
  int                    GetClipRgn(                   HDC hdc, HRGN hrgn);
  int                    GetMetaRgn(                   HDC hdc, HRGN hrgn);
  int                    GetRandomRgn(                 HDC hdc, HRGN hrgn, WINAPI_RandomRgnEnum iNum);
  int                    IntersectClipRect(            HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
  int                    OffsetClipRgn(                HDC hdc, int nXOffset, int nYOffset);
  BOOL                   PtVisible(                    HDC hdc, int X, int Y);
  BOOL                   RectVisible(                  HDC hdc, RECT* lprc);
  BOOL                   SelectClipPath(               HDC hdc, int iMode);
  int                    SelectClipRgn(                HDC hdc, HRGN hrgn);
  int                    SetMetaRgn(                   HDC hdc);
  BOOL                   AnimatePalette(               HPALETTE hpal, UINT iStartIndex, UINT cEntries, PALETTEENTRY* ppe);
  HPALETTE               CreateHalftonePalette(        HDC hdc);
  HPALETTE               CreatePalette(                LOGPALETTE* lplgpl);
  BOOL                   GetColorAdjustment(           HDC hdc, LPCOLORADJUSTMENT lpca);
  COLORREF               GetNearestColor(              HDC hdc, COLORREF crColor);
  UINT                   GetNearestPaletteIndex(       HPALETTE hpal, COLORREF crColor);
  UINT                   GetPaletteEntries(            HPALETTE hpal, UINT iStartIndex, UINT nEntries, LPPALETTEENTRY lppe);
  UINT                   GetSystemPaletteEntries(      HDC hdc, UINT iStartIndex, UINT nEntries, LPPALETTEENTRY lppe);
  UINT                   GetSystemPaletteUse(          HDC hdc);
  UINT                   RealizePalette(               HDC hdc);
  BOOL                   ResizePalette(                HPALETTE hpal, UINT nEntries);
  HPALETTE               SelectPalette(                HDC hdc, HPALETTE hpal, BOOL bForceBackground);
  BOOL                   SetColorAdjustment(           HDC hdc, COLORADJUSTMENT* lpca);
  UINT                   SetPaletteEntries(            HPALETTE hpal, UINT iStart, UINT cEntries, PALETTEENTRY* lppe);
  UINT                   SetSystemPaletteUse(          HDC hdc, UINT uUsage);
  BOOL                   UnrealizeObject(              HGDIOBJ hgdiobj);
  BOOL                   UpdateColors(                 HDC hdc);
  BOOL                   CombineTransform(             LPXFORM lpxformResult, XFORM* lpxform1, XFORM* lpxform2);
  BOOL                   DPtoLP(                       HDC hdc, LPPOINT lpPoints, int nCount);
  BOOL                   GetCurrentPositionEx(         HDC hdc, LPPOINT lpPoint);
  int                    GetGraphicsMode(              HDC hdc);
  int                    GetMapMode(                   HDC hdc);
  BOOL                   GetViewportExtEx(             HDC hdc, LPSIZE lpSize);
  BOOL                   GetViewportOrgEx(             HDC hdc, LPPOINT lpPoint);
  BOOL                   GetWindowExtEx(               HDC hdc, LPSIZE lpSize);
  BOOL                   GetWindowOrgEx(               HDC hdc, LPPOINT lpPoint);
  BOOL                   GetWorldTransform(            HDC hdc, LPXFORM lpXform);
  BOOL                   LPtoDP(                       HDC hdc, LPPOINT lpPoints, int nCount);
  BOOL                   ModifyWorldTransform(         HDC hdc, XFORM* lpXform, WINAPI_ModifyWorldTransformMode iMode);
  BOOL                   OffsetViewportOrgEx(          HDC hdc, int nXOffset, int nYOffset, LPPOINT lpPoint);
  BOOL                   OffsetWindowOrgEx(            HDC hdc, int nXOffset, int nYOffset, LPPOINT lpPoint);
  BOOL                   ScaleViewportExtEx(           HDC hdc, int Xnum, int Xdenom, int Ynum, int Ydenom, LPSIZE lpSize);
  BOOL                   ScaleWindowExtEx(             HDC hdc, int Xnum, int Xdenom, int Ynum, int Ydenom, LPSIZE lpSize);
  int                    SetGraphicsMode(              HDC hdc, WINAPI_GraphicsModes iMode);
  int                    SetMapMode(                   HDC hdc, WINAPI_MappingMode fnMapMode);
  BOOL                   SetViewportExtEx(             HDC hdc, int nXExtent, int nYExtent, LPSIZE lpSize);
  BOOL                   SetViewportOrgEx(             HDC hdc, int X, int Y, LPPOINT lpPoint);
  BOOL                   SetWindowExtEx(               HDC hdc, int nXExtent, int nYExtent, LPSIZE lpSize);
  BOOL                   SetWindowOrgEx(               HDC hdc, int X, int Y, LPPOINT lpPoint);
  BOOL                   SetWorldTransform(            HDC hdc, XFORM* lpXform);
  BOOL                   CancelDC(                     HDC hdc);
  HDC                    CreateCompatibleDC(           HDC hdc);
  HDC                    CreateDC(                     LPCTSTR lpszDriver, LPCTSTR lpszDevice, LPCTSTR lpszOutput, DEVMODE* lpInitData);
  HDC                    CreateIC(                     LPCTSTR lpszDriver, LPCTSTR lpszDevice, LPCTSTR lpszOutput, DEVMODE* lpdvmInit);
  BOOL                   DeleteDC(                     HDC hdc);
  BOOL                   DeleteObject(                 HGDIOBJ hObject);
  int                    DrawEscape(                   HDC hdc, int nEscape, int cbInput, LPCSTR lpszInData);
  int                    EnumObjects(                  HDC hdc, int nObjectType, GOBJENUMPROC lpObjectFunc, LPARAM lParam);
  HGDIOBJ                GetCurrentObject(             HDC hdc, WINAPI_ObjectType uObjectType);
  COLORREF               GetDCBrushColor(              HDC hdc);
  BOOL                   GetDCOrgEx(                   HDC hdc, LPPOINT lpPoint);
  COLORREF               GetDCPenColor(                HDC hdc);
  int                    GetDeviceCaps(                HDC hdc, WINAPI_DeviceCapsEnum nIndex);
  DWORD                  GetLayout(                    HDC hdc);
  int                    GetObject(                    HGDIOBJ hgdiobj, int cbBuffer, LPVOID lpvObject);
  DWORD                  GetObjectType(                HGDIOBJ h);
  HGDIOBJ                GetStockObject(               WINAPI_STOCK_OBJECT fnObject);
  HDC                    ResetDC(                      HDC hdc, DEVMODE* lpInitData);
  BOOL                   RestoreDC(                    HDC hdc, int nSavedDC);
  int                    SaveDC(                       HDC hdc);
  HGDIOBJ                SelectObject(                 HDC hdc, HGDIOBJ hgdiobj);
  COLORREF               SetDCBrushColor(              HDC hdc, COLORREF crColor);
  COLORREF               SetDCPenColor(                HDC hdc, COLORREF crColor);
  DWORD                  SetLayout(                    HDC hdc, WINAPI_LayoutFlags dwLayout);
  BOOL                   Chord(                        HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXRadial1, int nYRadial1, int nXRadial2, int nYRadial2);
  BOOL                   Ellipse(                      HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
  BOOL                   Pie(                          HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXRadial1, int nYRadial1, int nXRadial2, int nYRadial2);
  BOOL                   Polygon(                      HDC hdc, POINT* lpPoints, int nCount);
  BOOL                   PolyPolygon(                  HDC hdc, POINT* lpPoints, INT* lpPolyCounts, int nCount);
  BOOL                   Rectangle(                    HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
  BOOL                   RoundRect(                    HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidth, int nHeight);
  HANDLE                 AddFontMemResourceEx(         PVOID pbFont, DWORD cbFont, PVOID pdv, DWORD* pcFonts);
  int                    AddFontResource(              LPCTSTR lpszFilename);
  int                    AddFontResourceEx(            LPCTSTR lpszFilename, DWORD fl, PVOID pdv);
  HFONT                  CreateFont(                   int nHeight, int nWidth, int nEscapement, int nOrientation, WINAPI_FontWeight fnWeight, DWORD fdwItalic, DWORD fdwUnderline, DWORD fdwStrikeOut, WINAPI_FontCharset fdwCharSet, WINAPI_FontOutputPrecision fdwOutputPrecision, WINAPI_FontClipPrecision fdwClipPrecision, WINAPI_FontQuality fdwQuality, WINAPI_FontPitchAndFamily fdwPitchAndFamily, LPCTSTR lpszFace);
  HFONT                  CreateFontIndirect(           LOGFONT* lplf);
  HFONT                  CreateFontIndirectEx(         ENUMLOGFONTEXDV* penumlfex);
  BOOL                   CreateScalableFontResource(   DWORD fdwHidden, LPCTSTR lpszFontRes, LPCTSTR lpszFontFile, LPCTSTR lpszCurrentPath);
  int                    EnumFontFamiliesEx(           HDC hdc, LPLOGFONT lpLogfont, FONTENUMPROC lpEnumFontFamExProc, LPARAM lParam, DWORD dwFlags);
  BOOL                   ExtTextOut(                   HDC hdc, int X, int Y, WINAPI_ExtTextOutFlags fuOptions, RECT* lprc, LPCTSTR lpString, UINT cbCount, INT* lpDx);
  BOOL                   GetAspectRatioFilterEx(       HDC hdc, LPSIZE lpAspectRatio);
  BOOL                   GetCharABCWidths(             HDC hdc, UINT uFirstChar, UINT uLastChar, LPABC lpabc);
  BOOL                   GetCharABCWidthsFloat(        HDC hdc, UINT iFirstChar, UINT iLastChar, LPABCFLOAT lpABCF);
  BOOL                   GetCharABCWidthsI(            HDC hdc, UINT giFirst, UINT cgi, LPWORD pgi, LPABC lpabc);
  DWORD                  GetCharacterPlacement(        HDC hdc, LPCTSTR lpString, int nCount, int nMaxExtent, LPGCP_RESULTS lpResults, WINAPI_GCP_FLAGS dwFlags);
  BOOL                   GetCharWidth32(               HDC hdc, UINT iFirstChar, UINT iLastChar, LPINT lpBuffer);
  BOOL                   GetCharWidthFloat(            HDC hdc, UINT iFirstChar, UINT iLastChar, PFLOAT pxBuffer);
  BOOL                   GetCharWidthI(                HDC hdc, UINT giFirst, UINT cgi, LPWORD pgi, LPINT lpBuffer);
  DWORD                  GetFontData(                  HDC hdc, DWORD dwTable, DWORD dwOffset, LPVOID lpvBuffer, DWORD cbData);
  DWORD                  GetFontLanguageInfo(          HDC hdc);
  DWORD                  GetFontUnicodeRanges(         HDC hdc, LPGLYPHSET lpgs);
  DWORD                  GetGlyphIndices(              HDC hdc, LPCTSTR lpstr, int c, LPWORD pgi, WINAPI_GetGlyphIndicesFlag fl);
  DWORD                  GetGlyphOutline(              HDC hdc, UINT uChar, WINAPI_GetGlyphOutlineFormat uFormat, LPGLYPHMETRICS lpgm, DWORD cbBuffer, LPVOID lpvBuffer, MAT2* lpmat2);
  DWORD                  GetKerningPairs(              HDC hdc, DWORD nNumPairs, LPKERNINGPAIR lpkrnpair);
  UINT                   GetOutlineTextMetrics(        HDC hdc, UINT cbData, LPOUTLINETEXTMETRIC lpOTM);
  BOOL                   GetRasterizerCaps(            LPRASTERIZER_STATUS lprs, UINT cb);
  WINAPI_TextAlignFlag   GetTextAlign(                 HDC hdc);
  int                    GetTextCharacterExtra(        HDC hdc);
  COLORREF               GetTextColor(                 HDC hdc);
  BOOL                   GetTextExtentExPoint(         HDC hdc, LPCTSTR lpszStr, int cchString, int nMaxExtent, LPINT lpnFit, LPINT alpDx, LPSIZE lpSize);
  BOOL                   GetTextExtentExPointI(        HDC hdc, LPWORD pgiIn, int cgi, int nMaxExtent, LPINT lpnFit, LPINT alpDx, LPSIZE lpSize);
  BOOL                   GetTextExtentPoint32(         HDC hdc, LPCTSTR lpString, int c, LPSIZE lpSize);
  BOOL                   GetTextExtentPointI(          HDC hdc, LPWORD pgiIn, int cgi, LPSIZE lpSize);
  int                    GetTextFace(                  HDC hdc, int nCount, LPTSTR lpFaceName);
  BOOL                   GetTextMetrics(               HDC hdc, LPTEXTMETRIC lptm);
  BOOL                   PolyTextOut(                  HDC hdc, POLYTEXT* pptxt, int cStrings);
  BOOL                   RemoveFontMemResourceEx(      HANDLE fh);
  BOOL                   RemoveFontResource(           LPCTSTR lpFileName);
  BOOL                   RemoveFontResourceEx(         LPCTSTR lpFileName, DWORD fl, PVOID pdv);
  DWORD                  SetMapperFlags(               HDC hdc, DWORD dwFlag);
  WINAPI_TextAlignFlag   SetTextAlign(                 HDC hdc, WINAPI_TextAlignFlag fMode);
  int                    SetTextCharacterExtra(        HDC hdc, int nCharExtra);
  COLORREF               SetTextColor(                 HDC hdc, COLORREF crColor);
  BOOL                   SetTextJustification(         HDC hdc, int nBreakExtra, int nBreakCount);
  BOOL                   TextOut(                      HDC hdc, int nXStart, int nYStart, LPCTSTR lpString, int cbString);
  int                    EnumFontFamilies(             HDC hdc, LPCTSTR lpszFamily, FONTENUMPROC lpEnumFontFamProc, LPARAM lParam);
  int                    EnumFonts(                    HDC hdc, LPCTSTR lpFaceName, FONTENUMPROC lpFontFunc, LPARAM lParam);
  BOOL                   GetCharWidth(                 HDC hdc, UINT iFirstChar, UINT iLastChar, LPINT lpBuffer);
  BOOL                   GetTextExtentPoint(           HDC hdc, LPCTSTR lpString, int cbString, LPSIZE lpSize);
  BOOL                   AngleArc(                     HDC hdc, int X, int Y, DWORD dwRadius, FLOAT eStartAngle, FLOAT eSweepAngle);
  BOOL                   Arc(                          HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXStartArc, int nYStartArc, int nXEndArc, int nYEndArc);
  BOOL                   ArcTo(                        HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXRadial1, int nYRadial1, int nXRadial2, int nYRadial2);
  int                    GetArcDirection(              HDC hdc);
  BOOL                   LineDDA(                      int nXStart, int nYStart, int nXEnd, int nYEnd, LINEDDAPROC lpLineFunc, LPARAM lpData);
  BOOL                   LineTo(                       HDC hdc, int nXEnd, int nYEnd);
  BOOL                   MoveToEx(                     HDC hdc, int X, int Y, LPPOINT lpPoint);
  BOOL                   PolyBezier(                   HDC hdc, POINT* lppt, DWORD cPoints);
  BOOL                   PolyBezierTo(                 HDC hdc, POINT* lppt, DWORD cCount);
  BOOL                   PolyDraw(                     HDC hdc, POINT* lppt, BYTE* lpbTypes, int cCount);
  BOOL                   Polyline(                     HDC hdc, POINT* lppt, int cPoints);
  BOOL                   PolylineTo(                   HDC hdc, POINT* lppt, DWORD cCount);
  BOOL                   PolyPolyline(                 HDC hdc, POINT* lppt, DWORD* lpdwPolyPoints, DWORD cCount);
  int                    SetArcDirection(              HDC hdc, int ArcDirection);
  HENHMETAFILE           CloseEnhMetaFile(             HDC hdc);
  HENHMETAFILE           CopyEnhMetaFile(              HENHMETAFILE hemfSrc, LPCTSTR lpszFile);
  HDC                    CreateEnhMetaFile(            HDC hdcRef, LPCTSTR lpFilename, RECT* lpRect, LPCTSTR lpDescription);
  BOOL                   DeleteEnhMetaFile(            HENHMETAFILE hemf);
  BOOL                   EnumEnhMetaFile(              HDC hdc, HENHMETAFILE hemf, ENHMFENUMPROC lpEnhMetaFunc, LPVOID lpData, RECT* lpRect);
  BOOL                   GdiComment(                   HDC hdc, UINT cbSize, BYTE* lpData);
  HENHMETAFILE           GetEnhMetaFile(               LPCTSTR lpszMetaFile);
  UINT                   GetEnhMetaFileBits(           HENHMETAFILE hemf, UINT cbBuffer, LPBYTE lpbBuffer);
  UINT                   GetEnhMetaFileDescription(    HENHMETAFILE hemf, UINT cchBuffer, LPTSTR lpszDescription);
  UINT                   GetEnhMetaFileHeader(         HENHMETAFILE hemf, UINT cbBuffer, LPENHMETAHEADER lpemh);
  UINT                   GetEnhMetaFilePaletteEntries( HENHMETAFILE hemf, UINT cEntries, LPPALETTEENTRY lppe);
  UINT                   GetWinMetaFileBits(           HENHMETAFILE hemf, UINT cbBuffer, LPBYTE lpbBuffer, WINAPI_MappingMode fnMapMode, HDC hdcRef);
  BOOL                   PlayEnhMetaFile(              HDC hdc, HENHMETAFILE hemf, RECT* lpRect);
  BOOL                   PlayEnhMetaFileRecord(        HDC hdc, LPHANDLETABLE lpHandletable, ENHMETARECORD* lpEnhMetaRecord, UINT nHandles);
  HENHMETAFILE           SetEnhMetaFileBits(           UINT cbBuffer, BYTE* lpData);
  HENHMETAFILE           SetWinMetaFileBits(           UINT cbBuffer, BYTE* lpbBuffer, HDC hdcRef, METAFILEPICT* lpmfp);
  HMETAFILE              CloseMetaFile(                HDC hdc);
  HMETAFILE              CopyMetaFile(                 HMETAFILE hmfSrc, LPCTSTR lpszFile);
  HDC                    CreateMetaFile(               LPCTSTR lpszFile);
  BOOL                   DeleteMetaFile(               HMETAFILE hmf);
  BOOL                   EnumMetaFile(                 HDC hdc, HMETAFILE hmf, MFENUMPROC lpMetaFunc, LPARAM lParam);
  UINT                   GetMetaFileBitsEx(            HMETAFILE hmf, UINT nSize, LPVOID lpvData);
  BOOL                   PlayMetaFile(                 HDC hdc, HMETAFILE hmf);
  BOOL                   PlayMetaFileRecord(           HDC hdc, LPHANDLETABLE lpHandletable, LPMETARECORD lpMetaRecord, UINT nHandles);
  HMETAFILE              SetMetaFileBitsEx(            UINT nSize, BYTE* lpData);
  BOOL                   GdiFlush(                     );
  DWORD                  GdiGetBatchLimit(             );
  DWORD                  GdiSetBatchLimit(             DWORD dwLimit);
  COLORREF               GetBkColor(                   HDC hdc);
  int                    GetBkMode(                    HDC hdc);
  UINT                   GetBoundsRect(                HDC hdc, LPRECT lprcBounds, WINAPI_BoundsAccumulationFlags flags);
  int                    GetROP2(                      HDC hdc);
  COLORREF               SetBkColor(                   HDC hdc, COLORREF crColor);
  int                    SetBkMode(                    HDC hdc, WINAPI_BkModeEnum iBkMode);
  UINT                   SetBoundsRect(                HDC hdc, RECT* lprcBounds, WINAPI_BoundsAccumulationFlags flags);
  int                    SetROP2(                      HDC hdc, WINAPI_ROP2ModeEnum fnDrawMode);
  BOOL                   AbortPath(                    HDC hdc);
  BOOL                   BeginPath(                    HDC hdc);
  BOOL                   CloseFigure(                  HDC hdc);
  BOOL                   EndPath(                      HDC hdc);
  BOOL                   FillPath(                     HDC hdc);
  BOOL                   FlattenPath(                  HDC hdc);
  BOOL                   GetMiterLimit(                HDC hdc, PFLOAT peLimit);
  int                    GetPath(                      HDC hdc, LPPOINT lpPoints, LPBYTE lpTypes, int nSize);
  HRGN                   PathToRegion(                 HDC hdc);
  BOOL                   SetMiterLimit(                HDC hdc, FLOAT eNewLimit, PFLOAT peOldLimit);
  BOOL                   StrokeAndFillPath(            HDC hdc);
  BOOL                   StrokePath(                   HDC hdc);
  BOOL                   WidenPath(                    HDC hdc);
  int                    AbortDoc(                     HDC hdc);
  int                    StartDoc(                     HDC hdc, DOCINFO* lpdi);
  int                    EndDoc(                       HDC hdc);
  int                    EndPage(                      HDC hdc);
  int                    Escape(                       HDC hdc, WINAPI_GdiEscapeFunction nEscape, int cbInput, LPCSTR lpvInData, LPVOID lpvOutData);
  int                    ExtEscape(                    HDC hdc, int nEscape, int cbInput, LPCSTR lpszInData, int cbOutput, LPSTR lpszOutData);
  int                    SetAbortProc(                 HDC hdc, ABORTPROC lpAbortProc);
  int                    StartPage(                    HDC hDC);
  int                    CombineRgn(                   HRGN hrgnDest, HRGN hrgnSrc1, HRGN hrgnSrc2, WINAPI_RgnMode fnCombineMode);
  HRGN                   CreateEllipticRgn(            int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
  HRGN                   CreateEllipticRgnIndirect(    RECT* lprc);
  HRGN                   CreatePolygonRgn(             POINT* lppt, int cPoints, WINAPI_PolyFillModes fnPolyFillMode);
  HRGN                   CreatePolyPolygonRgn(         POINT* lppt, INT* lpPolyCounts, int nCount, WINAPI_PolyFillModes fnPolyFillMode);
  HRGN                   CreateRectRgn(                int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
  HRGN                   CreateRectRgnIndirect(        RECT* lprc);
  HRGN                   CreateRoundRectRgn(           int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidthEllipse, int nHeightEllipse);
  BOOL                   EqualRgn(                     HRGN hSrcRgn1, HRGN hSrcRgn2);
  HRGN                   ExtCreateRegion(              XFORM* lpXform, DWORD nCount, RGNDATA* lpRgnData);
  BOOL                   FillRgn(                      HDC hdc, HRGN hrgn, HBRUSH hbr);
  BOOL                   FrameRgn(                     HDC hdc, HRGN hrgn, HBRUSH hbr, int nWidth, int nHeight);
  int                    GetPolyFillMode(              HDC hdc);
  DWORD                  GetRegionData(                HRGN hRgn, DWORD dwCount, LPRGNDATA lpRgnData);
  int                    GetRgnBox(                    HRGN hrgn, LPRECT lprc);
  BOOL                   InvertRgn(                    HDC hdc, HRGN hrgn);
  int                    OffsetRgn(                    HRGN hrgn, int nXOffset, int nYOffset);
  BOOL                   PaintRgn(                     HDC hdc, HRGN hrgn);
  BOOL                   PtInRegion(                   HRGN hrgn, int X, int Y);
  BOOL                   RectInRegion(                 HRGN hrgn, RECT* lprc);
  int                    SetPolyFillMode(              HDC hdc, WINAPI_PolyFillModes iPolyFillMode);
  BOOL                   SetRectRgn(                   HRGN hrgn, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);
  WINAPI_FontCharset_int GetTextCharset(               HDC hdc);
  WINAPI_FontCharset_int GetTextCharsetInfo(           HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags);
  BOOL                   TranslateCharsetInfo(         DWORD* lpSrc, LPCHARSETINFO lpCs, WINAPI_TranslateCharsetInfoFlag dwFlags);
  int                    ChoosePixelFormat(            HDC hdc, PIXELFORMATDESCRIPTOR* ppfd);
  int                    DescribePixelFormat(          HDC hdc, int iPixelFormat, UINT nBytes, LPPIXELFORMATDESCRIPTOR ppfd);
  int                    GetPixelFormat(               HDC hdc);
  BOOL                   SetPixelFormat(               HDC hdc, int iPixelFormat, PIXELFORMATDESCRIPTOR* ppfd);
  UINT                   GetEnhMetaFilePixelFormat(    HENHMETAFILE hemf, DWORD cbBuffer, PIXELFORMATDESCRIPTOR* ppfd);
  BOOL                   SwapBuffers(                  HDC hdc);
]]
return ffi.load( 'Gdi32.dll' )
