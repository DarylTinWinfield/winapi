require( 'ffi/winapi/headers/windows' )
require( 'ffi/winapi/headers/shell' )
require( 'ffi/winapi/headers/gdi' )
require( 'ffi/winapi/headers/security' )
local ffi = require( 'ffi' )
ffi.cdef [[
  HWND                        CreateDialogIndirectParam(          HINSTANCE hInstance, LPCDLGTEMPLATE lpTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM lParamInit);
  HWND                        CreateDialogParam(                  HINSTANCE hInstance, LPCTSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM lParamInit);
  LRESULT                     DefDlgProc(                         HWND hDlg, WINAPI_WinMsg Msg, WPARAM wParam, LPARAM lParam);
  INT_PTR                     DialogBoxIndirectParam(             HINSTANCE hInstance, LPCDLGTEMPLATE hDialogTemplate, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  INT_PTR                     DialogBoxParam(                     HINSTANCE hInstance, LPCTSTR lpTemplateName, HWND hWndParent, DLGPROC lpDialogFunc, LPARAM dwInitParam);
  BOOL                        EndDialog(                          HWND hDlg, INT_PTR nResult);
  LONG                        GetDialogBaseUnits(                 );
  int                         GetDlgCtrlID(                       HWND hwndCtl);
  HWND                        GetDlgItem(                         HWND hDlg, int nIDDlgItem);
  UINT                        GetDlgItemInt(                      HWND hDlg, int nIDDlgItem, BOOL* lpTranslated, BOOL bSigned);
  UINT                        GetDlgItemText(                     HWND hDlg, int nIDDlgItem, LPTSTR lpString, int nMaxCount);
  HWND                        GetNextDlgGroupItem(                HWND hDlg, HWND hCtl, BOOL bPrevious);
  HWND                        GetNextDlgTabItem(                  HWND hDlg, HWND hCtl, BOOL bPrevious);
  BOOL                        IsDialogMessage(                    HWND hDlg, LPMSG lpMsg);
  BOOL                        MapDialogRect(                      HWND hDlg, LPRECT lpRect);
  WINAPI_MessageBoxResult     MessageBox(                         HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, WINAPI_MessageBoxType uType);
  WINAPI_MessageBoxResult     MessageBoxEx(                       HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, WINAPI_MessageBoxType uType, WORD wLanguageId);
  int                         MessageBoxIndirect(                 WINAPI_LPMSGBOXPARAMS lpMsgBoxParams);
  WINAPI_MessageBoxResult     MessageBoxTimeout(                  HWND hWnd, LPCTSTR lpText, LPCTSTR lpCaption, WINAPI_MessageBoxType uType, WORD wLanguageId, WINAPI_WaitTimeout dwMilliseconds);
  LRESULT                     SendDlgItemMessage(                 HWND hDlg, int nIDDlgItem, WINAPI_WinMsg Msg, WPARAM wParam, LPARAM lParam);
  BOOL                        SetDlgItemInt(                      HWND hDlg, int nIDDlgItem, UINT uValue, BOOL bSigned);
  BOOL                        SetDlgItemText(                     HWND hDlg, int nIDDlgItem, LPCTSTR lpString);
  long                        BroadcastSystemMessage(             DWORD dwFlags, LPDWORD lpdwRecipients, UINT uiMessage, WPARAM wParam, LPARAM lParam);
  long                        BroadcastSystemMessageEx(           DWORD dwFlags, LPDWORD lpdwRecipients, UINT uiMessage, WPARAM wParam, LPARAM lParam, PBSMINFO pBSMInfo);
  LRESULT                     DispatchMessage(                    WINAPI_MSG* lpmsg);
  BOOL                        GetInputState(                      );
  BOOL                        GetMessage(                         LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
  LPARAM                      GetMessageExtraInfo(                );
  DWORD                       GetMessagePos(                      );
  LONG                        GetMessageTime(                     );
  DWORD                       GetQueueStatus(                     WINAPI_QueueStatusFlag flags);
  BOOL                        InSendMessage(                      );
  DWORD                       InSendMessageEx(                    LPVOID lpReserved);
  BOOL                        PeekMessage(                        LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax, WINAPI_PeekMessageFlag wRemoveMsg);
  BOOL                        PostMessage(                        HWND hWnd, WINAPI_WinMsg Msg, WPARAM wParam, LPARAM lParam);
  VOID                        PostQuitMessage(                    int nExitCode);
  BOOL                        PostThreadMessage(                  DWORD idThread, WINAPI_WinMsg Msg, WPARAM wParam, LPARAM lParam);
  UINT                        RegisterWindowMessage(              LPCTSTR lpString);
  BOOL                        ReplyMessage(                       LRESULT lResult);
  LRESULT                     SendMessage(                        HWND hWnd, WINAPI_WinMsg Msg, WPARAM wParam, LPARAM lParam);
  BOOL                        SendMessageCallback(                HWND hWnd, WINAPI_WinMsg Msg, WPARAM wParam, LPARAM lParam, SENDASYNCPROC lpCallBack, ULONG_PTR dwData);
  LRESULT                     SendMessageTimeout(                 HWND hWnd, WINAPI_WinMsg Msg, WPARAM wParam, LPARAM lParam, WINAPI_SendMessageTimeoutFlags fuFlags, UINT uTimeout, PDWORD_PTR lpdwResult);
  BOOL                        SendNotifyMessage(                  HWND hWnd, WINAPI_WinMsg Msg, WPARAM wParam, LPARAM lParam);
  LPARAM                      SetMessageExtraInfo(                LPARAM lParam);
  BOOL                        TranslateMessage(                   WINAPI_MSG* lpMsg);
  BOOL                        WaitMessage(                        );
  DWORD                       GetGuiResources(                    WINAPI_ProcessHandle hProcess, DWORD uiFlags);
  BOOL                        AttachThreadInput(                  DWORD idAttach, DWORD idAttachTo, BOOL fAttach);
  DWORD                       WaitForInputIdle(                   WINAPI_ProcessHandle hProcess, WINAPI_WaitTimeout dwMilliseconds);
  BOOL                        IsWow64Message(                     );
  BOOL                        UserHandleGrantAccess(              HANDLE hUserHandle, HANDLE hJob, BOOL bGrant);
  BOOL                        AdjustWindowRect(                   LPRECT lpRect, WINAPI_WindowStyle dwStyle, BOOL bMenu);
  BOOL                        AdjustWindowRectEx(                 LPRECT lpRect, WINAPI_WindowStyle dwStyle, BOOL bMenu, WINAPI_WindowExStyle dwExStyle);
  VOID                        AllowActivateDetachQueuesSetFocus(  );
  BOOL                        AllowSetForegroundWindow(           DWORD dwProcessId);
  BOOL                        AnimateWindow(                      HWND hwnd, DWORD dwTime, WINAPI_AnimateWindowFlags dwFlags);
  BOOL                        AnyPopup(                           );
  UINT                        ArrangeIconicWindows(               HWND hWnd);
  HDWP                        BeginDeferWindowPos(                int nNumWindows);
  BOOL                        BringWindowToTop(                   HWND hWnd);
  BOOL                        CalculatePopupWindowPosition(       WINAPI_POINT* anchorPoint, WINAPI_SIZE* windowSize, WINAPI_TrackPopupMenuFlags flags, RECT* excludeRect, RECT* popupWindowPosition);
  WORD                        CascadeWindows(                     HWND hwndParent, UINT wHow, WINAPI_RECT* lpRect, UINT cKids, WINAPI_HWND* lpKids);
  BOOL                        ChangeWindowMessageFilter(          UINT message, WINAPI_WindowMessageFilterEnum dwFlag);
  BOOL                        ChangeWindowMessageFilterEx(        HWND hWnd, UINT message, DWORD action, PCHANGEFILTERSTRUCT pChangeFilterStruct);
  HWND                        ChildWindowFromPoint(               HWND hWndParent, POINT Point);
  HWND                        ChildWindowFromPointEx(             HWND hwndParent, POINT pt, UINT uFlags);
  BOOL                        CloseWindow(                        HWND hWnd);
  HWND                        CreateWindow(                       LPCTSTR lpClassName, LPCTSTR lpWindowName, DWORD dwStyle, WINAPI_CreateWindow_CW x, WINAPI_CreateWindow_CW y, WINAPI_CreateWindow_CW nWidth, WINAPI_CreateWindow_CW nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
  HWND                        CreateWindowEx(                     WINAPI_WindowExStyle dwExStyle, LPCTSTR lpClassName, LPCTSTR lpWindowName, WINAPI_WindowStyle dwStyle, WINAPI_CreateWindow_CW x, WINAPI_CreateWindow_CW y, WINAPI_CreateWindow_CW nWidth, WINAPI_CreateWindow_CW nHeight, HWND hWndParent, HMENU hMenu, HINSTANCE hInstance, LPVOID lpParam);
  HDWP                        DeferWindowPos(                     HDWP hWinPosInfo, HWND hWnd, WINAPI_HwndInsertAfterEnum hWndInsertAfter, int x, int y, int cx, int cy, WINAPI_SetWindowPosFlags uFlags);
  BOOL                        DeregisterShellHookWindow(          HWND hWnd);
  BOOL                        DestroyWindow(                      HWND hWnd);
  BOOL                        EndDeferWindowPos(                  HDWP hWinPosInfo);
  BOOL                        EndTask(                            HWND hWnd, BOOL fShutDown, BOOL fForce);
  BOOL                        EnumChildWindows(                   HWND hWndParent, WNDENUMPROC lpEnumFunc, LPARAM lParam);
  BOOL                        EnumThreadWindows(                  DWORD dwThreadId, WNDENUMPROC lpfn, LPARAM lParam);
  BOOL                        EnumWindows(                        WNDENUMPROC lpEnumFunc, LPARAM lParam);
  HWND                        FindWindow(                         LPCTSTR lpClassName, LPCTSTR lpWindowName);
  HWND                        FindWindowEx(                       HWND hwndParent, HWND hwndChildAfter, LPCTSTR lpszClass, LPCTSTR lpszWindow);
  BOOL                        GetAltTabInfo(                      HWND hwnd, int iItem, PALTTABINFO pati, LPTSTR pszItemText, UINT cchItemText);
  HWND                        GetAncestor(                        HWND hwnd, WINAPI_GetAncestorEnum gaFlags);
  BOOL                        GetClientRect(                      HWND hWnd, LPRECT lpRect);
  HWND                        GetDesktopWindow(                   );
  HWND                        GetForegroundWindow(                );
  BOOL                        GetGUIThreadInfo(                   DWORD idThread, LPGUITHREADINFO lpgui);
  HWND                        GetLastActivePopup(                 HWND hWnd);
  BOOL                        GetLayeredWindowAttributes(         HWND hwnd, COLORREF* pcrKey, BYTE* pbAlpha, WINAPI_LayeredWindowAttribute* pdwFlags);
  HWND                        GetParent(                          HWND hWnd);
  BOOL                        GetProcessDefaultLayout(            DWORD* pdwDefaultLayout);
  HWND                        GetShellWindow(                     );
  BOOL                        GetTitleBarInfo(                    HWND hwnd, PTITLEBARINFO pti);
  HWND                        GetTopWindow(                       HWND hWnd);
  HWND                        GetWindow(                          HWND hWnd, WINAPI_GetWindowEnum uCmd);
  BOOL                        GetWindowDisplayAffinity(           HWND hWnd, DWORD* dwAffinity);
  BOOL                        GetWindowInfo(                      HWND hwnd, PWINDOWINFO pwi);
  UINT                        GetWindowModuleFileName(            HWND hwnd, LPTSTR lpszFileName, UINT cchFileNameMax);
  BOOL                        GetWindowPlacement(                 HWND hWnd, WINDOWPLACEMENT* lpwndpl);
  BOOL                        GetWindowRect(                      HWND hWnd, LPRECT lpRect);
  int                         GetWindowText(                      HWND hWnd, LPTSTR lpString, int nMaxCount);
  int                         GetWindowTextLength(                HWND hWnd);
  DWORD                       GetWindowThreadProcessId(           HWND hWnd, LPDWORD lpdwProcessId);
  int                         InternalGetWindowText(              HWND hWnd, LPWSTR lpString, int nMaxCount);
  BOOL                        IsChild(                            HWND hWndParent, HWND hWnd);
  BOOL                        IsGUIThread(                        BOOL bConvert);
  BOOL                        IsHungAppWindow(                    HWND hWnd);
  BOOL                        IsIconic(                           HWND hWnd);
  BOOL                        IsProcessDPIAware(                  );
  BOOL                        IsWindow(                           HWND hWnd);
  BOOL                        IsWindowUnicode(                    HWND hWnd);
  BOOL                        IsWindowVisible(                    HWND hWnd);
  BOOL                        IsZoomed(                           HWND hWnd);
  BOOL                        LockSetForegroundWindow(            WINAPI_LockSetForegroundWindowCode uLockCode);
  void                        LogicalToPhysicalPoint(             HWND hWnd, LPPOINT lpPoint);
  BOOL                        MoveWindow(                         HWND hWnd, int X, int Y, int nWidth, int nHeight, BOOL bRepaint);
  BOOL                        OpenIcon(                           HWND hWnd);
  void                        PhysicalToLogicalPoint(             HWND hWnd, LPPOINT lpPoint);
  HWND                        RealChildWindowFromPoint(           HWND hwndParent, POINT ptParentClientCoords);
  UINT                        RealGetWindowClass(                 HWND hwnd, LPTSTR pszType, UINT cchType);
  BOOL                        RegisterShellHookWindow(            HWND hWnd);
  BOOL                        SetForegroundWindow(                HWND hWnd);
  BOOL                        SetLayeredWindowAttributes(         HWND hwnd, COLORREF crKey, BYTE bAlpha, WINAPI_LayeredWindowAttribute dwFlags);
  HWND                        SetParent(                          HWND hWndChild, HWND hWndNewParent);
  BOOL                        SetProcessDefaultLayout(            DWORD dwDefaultLayout);
  BOOL                        SetProcessDPIAware(                 );
  BOOL                        SetWindowDisplayAffinity(           HWND hWnd, DWORD dwAffinity);
  BOOL                        SetWindowPlacement(                 HWND hWnd, WINDOWPLACEMENT* lpwndpl);
  BOOL                        SetWindowPos(                       HWND hWnd, WINAPI_HwndInsertAfterEnum hWndInsertAfter, int X, int Y, int cx, int cy, WINAPI_SetWindowPosFlags uFlags);
  BOOL                        SetWindowText(                      HWND hWnd, LPCTSTR lpString);
  BOOL                        ShowOwnedPopups(                    HWND hWnd, BOOL fShow);
  BOOL                        ShowWindow(                         HWND hWnd, WINAPI_ShowWindowCmd nCmdShow);
  BOOL                        ShowWindowAsync(                    HWND hWnd, int nCmdShow);
  BOOL                        SoundSentry(                        );
  VOID                        SwitchToThisWindow(                 HWND hWnd, BOOL fAltTab);
  WORD                        TileWindows(                        HWND hwndParent, UINT wHow, RECT* lpRect, UINT cKids, WINAPI_HWND* lpKids);
  BOOL                        UpdateLayeredWindow(                HWND hwnd, HDC hdcDst, POINT* pptDst, SIZE* psize, HDC hdcSrc, POINT* pptSrc, COLORREF crKey, BLENDFUNCTION* pblend, WINAPI_UpdateLayeredWindowFlags dwFlags);
  BOOL                        UpdateLayeredWindowIndirect(        HWND hwnd, WINAPI_UPDATELAYEREDWINDOWINFO* pULWInfo);
  HWND                        WindowFromPhysicalPoint(            POINT Point);
  HWND                        WindowFromPoint(                    POINT Point);
  BOOL                        ExitWindowsEx(                      WINAPI_ExitWindowsExFlags uFlags, WINAPI_ExitWindowsExReason dwReason);
  BOOL                        LockWorkStation(                    );
  BOOL                        ShutdownBlockReasonCreate(          HWND hWnd, LPCWSTR pwszReason);
  BOOL                        ShutdownBlockReasonDestroy(         HWND hWnd);
  BOOL                        ShutdownBlockReasonQuery(           HWND hWnd, LPWSTR pwszBuff, DWORD* pcchBuff);
  HBITMAP                     LoadBitmap(                         HINSTANCE hInstance, WINAPI_LoadBitmapString/LPCTSTR lpBitmapName);
  HBRUSH                      GetSysColorBrush(                   WINAPI_SysColorIndex nIndex);
  BOOL                        CheckDlgButton(                     HWND hDlg, int nIDButton, WINAPI_ButtonState uCheck);
  BOOL                        CheckRadioButton(                   HWND hDlg, int nIDFirstButton, int nIDLastButton, int nIDCheckButton);
  UINT                        IsDlgButtonChecked(                 HWND hDlg, int nIDButton);
  BOOL                        CreateCaret(                        HWND hWnd, HBITMAP hBitmap, int nWidth, int nHeight);
  BOOL                        DestroyCaret(                       );
  UINT                        GetCaretBlinkTime(                  );
  BOOL                        GetCaretPos(                        LPPOINT lpPoint);
  BOOL                        HideCaret(                          HWND hWnd);
  BOOL                        SetCaretBlinkTime(                  UINT uMSeconds);
  BOOL                        SetCaretPos(                        int X, int Y);
  BOOL                        ShowCaret(                          HWND hWnd);
  BOOL                        AddClipboardFormatListener(         HWND hwnd);
  BOOL                        ChangeClipboardChain(               HWND hWndRemove, HWND hWndNewNext);
  BOOL                        CloseClipboard(                     );
  int                         CountClipboardFormats(              );
  BOOL                        EmptyClipboard(                     );
  UINT                        EnumClipboardFormats(               UINT format);
  HANDLE                      GetClipboardData(                   WINAPI_ClipboardFormat uFormat);
  int                         GetClipboardFormatName(             UINT format, LPTSTR lpszFormatName, int cchMaxCount);
  HWND                        GetClipboardOwner(                  );
  DWORD                       GetClipboardSequenceNumber(         );
  HWND                        GetClipboardViewer(                 );
  HWND                        GetOpenClipboardWindow(             );
  int                         GetPriorityClipboardFormat(         UINT* paFormatPriorityList, int cFormats);
  BOOL                        GetUpdatedClipboardFormats(         PUINT lpuiFormats, UINT cFormats, PUINT pcFormatsOut);
  BOOL                        IsClipboardFormatAvailable(         WINAPI_ClipboardFormat format);
  BOOL                        OpenClipboard(                      HWND hWndNewOwner);
  UINT                        RegisterClipboardFormat(            LPCTSTR lpszFormat);
  BOOL                        RemoveClipboardFormatListener(      HWND hwnd);
  HANDLE                      SetClipboardData(                   WINAPI_ClipboardFormat uFormat, HANDLE hMem);
  HWND                        SetClipboardViewer(                 HWND hWndNewViewer);
  int                         DlgDirListComboBox(                 HWND hDlg, LPTSTR lpPathSpec, int nIDComboBox, int nIDStaticPath, UINT uFiletype);
  BOOL                        DlgDirSelectComboBoxEx(             HWND hDlg, LPTSTR lpString, int nCount, int nIDComboBox);
  BOOL                        GetComboBoxInfo(                    HWND hwndCombo, PCOMBOBOXINFO pcbi);
  BOOL                        ClientToScreen(                     HWND hWnd, LPPOINT lpPoint);
  int                         MapWindowPoints(                    HWND hWndFrom, HWND hWndTo, LPPOINT lpPoints, UINT cPoints);
  BOOL                        ScreenToClient(                     HWND hWnd, LPPOINT lpPoint);
  BOOL                        ClipCursor(                         WINAPI_RECT* lpRect);
  HCURSOR                     CopyCursor(                         HCURSOR pcur);
  HCURSOR                     CreateCursor(                       HINSTANCE hInst, int xHotSpot, int yHotSpot, int nWidth, int nHeight, WINAPI_VOID* pvANDPlane, WINAPI_VOID* pvXORPlane);
  BOOL                        DestroyCursor(                      HCURSOR hCursor);
  BOOL                        GetClipCursor(                      LPRECT lpRect);
  HCURSOR                     GetCursor(                          );
  BOOL                        GetCursorInfo(                      PCURSORINFO pci);
  BOOL                        GetCursorPos(                       LPPOINT lpPoint);
  BOOL                        GetPhysicalCursorPos(               LPPOINT lpPoint);
  HCURSOR                     LoadCursor(                         HINSTANCE hInstance, WINAPI_LoadCursorString/LPCTSTR lpCursorName);
  HCURSOR                     LoadCursorFromFile(                 LPCTSTR lpFileName);
  HCURSOR                     SetCursor(                          HCURSOR hCursor);
  BOOL                        SetCursorPos(                       int X, int Y);
  BOOL                        SetPhysicalCursorPos(               int X, int Y);
  BOOL                        SetSystemCursor(                    HCURSOR hcur, WINAPI_CursorId id);
  int                         ShowCursor(                         BOOL bShow);
  LONG                        ChangeDisplaySettings(              DEVMODE* lpDevMode, DWORD dwflags);
  LONG                        ChangeDisplaySettingsEx(            LPCTSTR lpszDeviceName, DEVMODE* lpDevMode, HWND hwnd, DWORD dwflags, LPVOID lParam);
  BOOL                        EnumDisplayDevices(                 LPCTSTR lpDevice, DWORD iDevNum, PDISPLAY_DEVICE lpDisplayDevice, WINAPI_EnumDisplayDevicesFlags dwFlags);
  BOOL                        EnumDisplaySettings(                LPCTSTR lpszDeviceName, WINAPI_EnumDisplaySettingsEnum iModeNum, DEVMODE* lpDevMode);
  BOOL                        EnumDisplaySettingsEx(              LPCTSTR lpszDeviceName, DWORD iModeNum, DEVMODE* lpDevMode, DWORD dwFlags);
  HDC                         GetDC(                              HWND hWnd);
  HDC                         GetDCEx(                            HWND hWnd, HRGN hrgnClip, WINAPI_DCExFlags flags);
  int                         ReleaseDC(                          HWND hWnd, HDC hDC);
  HDEVNOTIFY                  RegisterDeviceNotification(         HANDLE hRecipient, LPVOID NotificationFilter, WINAPI_DeviceNotificationFlags Flags);
  BOOL                        UnregisterDeviceNotification(       HDEVNOTIFY Handle);
  BOOL                        DdeSetQualityOfService(             HWND hwndClient, WINAPI_SECURITY_QUALITY_OF_SERVICE* pqosNew, PSECURITY_QUALITY_OF_SERVICE pqosPrev);
  BOOL                        FreeDDElParam(                      UINT msg, LPARAM lParam);
  BOOL                        ImpersonateDdeClientWindow(         HWND hWndClient, HWND hWndServer);
  LPARAM                      PackDDElParam(                      UINT msg, UINT_PTR uiLo, UINT_PTR uiHi);
  LPARAM                      ReuseDDElParam(                     LPARAM lParam, UINT msgIn, UINT msgOut, UINT_PTR uiLo, UINT_PTR uiHi);
  BOOL                        UnpackDDElParam(                    UINT msg, LPARAM lParam, PUINT_PTR puiLo, PUINT_PTR puiHi);
  BOOL                        DdeAbandonTransaction(              DWORD idInst, HCONV hConv, DWORD idTransaction);
  LPBYTE                      DdeAccessData(                      HDDEDATA hData, LPDWORD pcbDataSize);
  HDDEDATA                    DdeAddData(                         HDDEDATA hData, LPBYTE pSrc, DWORD cb, DWORD cbOff);
  HDDEDATA                    DdeClientTransaction(               LPBYTE pData, DWORD cbData, HCONV hConv, HSZ hszItem, UINT wFmt, UINT wType, DWORD dwTimeout, LPDWORD pdwResult);
  int                         DdeCmpStringHandles(                HSZ hsz1, HSZ hsz2);
  HCONV                       DdeConnect(                         DWORD idInst, HSZ hszService, HSZ hszTopic, PCONVCONTEXT pCC);
  HCONVLIST                   DdeConnectList(                     DWORD idInst, HSZ hszService, HSZ hszTopic, HCONVLIST hConvList, PCONVCONTEXT pCC);
  HDDEDATA                    DdeCreateDataHandle(                DWORD idInst, LPBYTE pSrc, DWORD cb, DWORD cbOff, HSZ hszItem, UINT wFmt, UINT afCmd);
  HSZ                         DdeCreateStringHandle(              DWORD idInst, LPTSTR psz, int iCodePage);
  BOOL                        DdeDisconnect(                      HCONV hConv);
  BOOL                        DdeDisconnectList(                  HCONVLIST hConvList);
  BOOL                        DdeEnableCallback(                  DWORD idInst, HCONV hConv, UINT wCmd);
  BOOL                        DdeFreeDataHandle(                  HDDEDATA hData);
  BOOL                        DdeFreeStringHandle(                DWORD idInst, HSZ hsz);
  DWORD                       DdeGetData(                         HDDEDATA hData, LPBYTE pDst, DWORD cbMax, DWORD cbOff);
  UINT                        DdeGetLastError(                    DWORD idInst);
  BOOL                        DdeImpersonateClient(               HCONV hConv);
  UINT                        DdeInitialize(                      LPDWORD pidInst, PFNCALLBACK pfnCallback, DWORD afCmd, DWORD ulRes);
  BOOL                        DdeKeepStringHandle(                DWORD idInst, HSZ hsz);
  HDDEDATA                    DdeNameService(                     DWORD idInst, UINT hsz1, UINT hsz2, UINT afCmd);
  BOOL                        DdePostAdvise(                      DWORD idInst, HSZ hszTopic, HSZ hszItem);
  UINT                        DdeQueryConvInfo(                   HCONV hConv, DWORD idTransaction, PCONVINFO pConvInfo);
  HCONV                       DdeQueryNextServer(                 HCONVLIST hConvList, HCONV hConvPrev);
  DWORD                       DdeQueryString(                     DWORD idInst, HSZ hsz, LPTSTR psz, DWORD cchMax, int iCodePage);
  HCONV                       DdeReconnect(                       HCONV hConv);
  BOOL                        DdeSetUserHandle(                   HCONV hConv, DWORD id, DWORD_PTR hUser);
  BOOL                        DdeUnaccessData(                    HDDEDATA hData);
  BOOL                        DdeUninitialize(                    DWORD idInst);
  BOOL                        FlashWindow(                        HWND hWnd, BOOL bInvert);
  BOOL                        FlashWindowEx(                      PFLASHWINFO pfwi);
  BOOL                        MessageBeep(                        UINT uType);
  void                        SetLastErrorEx(                     WINAPI_ERROR_CODE dwErrCode, WINAPI_SET_LAST_ERROR_EX_TYPE dwType);
  int                         FillRect(                           HDC hDC, WINAPI_RECT* lprc, HBRUSH hbr);
  int                         FrameRect(                          HDC hDC, WINAPI_RECT* lprc, HBRUSH hbr);
  BOOL                        InvertRect(                         HDC hDC, WINAPI_RECT* lprc);
  int                         DrawText(                           HDC hDC, LPCTSTR lpchText, int nCount, LPRECT lpRect, WINAPI_DrawTextFlags uFormat);
  int                         DrawTextEx(                         HDC hdc, LPTSTR lpchText, int cchText, LPRECT lprc, WINAPI_DrawTextFlags dwDTFormat, LPDRAWTEXTPARAMS lpDTParams);
  DWORD                       GetTabbedTextExtent(                HDC hDC, LPCTSTR lpString, int nCount, int nTabPositions, WINAPI_LPINT lpnTabStopPositions);
  LONG                        TabbedTextOut(                      HDC hDC, int X, int Y, LPCTSTR lpString, int nCount, int nTabPositions, WINAPI_LPINT lpnTabStopPositions, int nTabOrigin);
  BOOL                        CallMsgFilter(                      LPMSG lpMsg, int nCode);
  LRESULT                     CallNextHookEx(                     HHOOK hhk, int nCode, WPARAM wParam, LPARAM lParam);
  HHOOK                       SetWindowsHookEx(                   WINAPI_WindowsHook idHook, HOOKPROC lpfn, HINSTANCE hMod, DWORD dwThreadId);
  BOOL                        UnhookWindowsHookEx(                HHOOK hhk);
  HICON                       CopyIcon(                           HICON hIcon);
  HICON                       CreateIcon(                         HINSTANCE hInstance, int nWidth, int nHeight, BYTE cPlanes, BYTE cBitsPixel, WINAPI_BYTE* lpbANDbits, WINAPI_BYTE* lpbXORbits);
  HICON                       CreateIconFromResource(             PBYTE presbits, DWORD dwResSize, BOOL fIcon, DWORD dwVer);
  HICON                       CreateIconFromResourceEx(           PBYTE pbIconBits, DWORD cbIconBits, BOOL fIcon, DWORD dwVersion, int cxDesired, int cyDesired, UINT uFlags);
  HICON                       CreateIconIndirect(                 PICONINFO piconinfo);
  BOOL                        DestroyIcon(                        HICON hIcon);
  BOOL                        DrawIcon(                           HDC hDC, int X, int Y, HICON hIcon);
  BOOL                        DrawIconEx(                         HDC hdc, int xLeft, int yTop, HICON hIcon, int cxWidth, int cyWidth, UINT istepIfAniCur, HBRUSH hbrFlickerFreeDraw, WINAPI_DrawIconFlags diFlags);
  BOOL                        GetIconInfo(                        HICON hIcon, PICONINFO piconinfo);
  BOOL                        GetIconInfoEx(                      HICON hIcon, PICONINFOEX piconinfoex);
  HICON                       LoadIcon(                           HINSTANCE hInstance, WINAPI_LoadIconString/LPCTSTR lpIconName);
  int                         LookupIconIdFromDirectory(          PBYTE presbits, BOOL fIcon);
  int                         LookupIconIdFromDirectoryEx(        PBYTE presbits, BOOL fIcon, int cxDesired, int cyDesired, WINAPI_LRFlags Flags);
  UINT                        PrivateExtractIcons(                LPCTSTR lpszFile, int nIconIndex, int cxIcon, int cyIcon, HICON* phicon, UINT* piconid, UINT nIcons, WINAPI_LRFlags flags);
  int                         CopyAcceleratorTable(               HACCEL hAccelSrc, LPACCEL lpAccelDst, int cAccelEntries);
  HACCEL                      CreateAcceleratorTable(             LPACCEL lpaccl, int cEntries);
  BOOL                        DestroyAcceleratorTable(            HACCEL hAccel);
  HACCEL                      LoadAccelerators(                   HINSTANCE hInstance, LPCTSTR lpTableName);
  int                         TranslateAccelerator(               HWND hWnd, HACCEL hAccTable, LPMSG lpMsg);
  HKL                         ActivateKeyboardLayout(             WINAPI_KeyboardLayoutHandle hkl, WINAPI_KeyboardLayoutFlags Flags);
  BOOL                        BlockInput(                         BOOL fBlockIt);
  BOOL                        EnableWindow(                       HWND hWnd, BOOL bEnable);
  HWND                        GetActiveWindow(                    );
  SHORT                       GetAsyncKeyState(                   WINAPI_VirtKeyCode vKey);
  HWND                        GetFocus(                           );
  UINT                        GetKBCodePage(                      );
  HKL                         GetKeyboardLayout(                  DWORD idThread);
  UINT                        GetKeyboardLayoutList(              int nBuff, HKL* lpList);
  BOOL                        GetKeyboardLayoutName(              LPTSTR pwszKLID);
  BOOL                        GetKeyboardState(                   PBYTE lpKeyState);
  int                         GetKeyNameText(                     LONG lParam, LPTSTR lpString, int nSize);
  SHORT                       GetKeyState(                        WINAPI_VirtKeyCode nVirtKey);
  BOOL                        GetLastInputInfo(                   PLASTINPUTINFO plii);
  BOOL                        IsWindowEnabled(                    HWND hWnd);
  VOID                        keybd_event(                        BYTE bVk, BYTE bScan, DWORD dwFlags, ULONG_PTR dwExtraInfo);
  HKL                         LoadKeyboardLayout(                 LPCTSTR pwszKLID, WINAPI_KeyboardLayoutFlags Flags);
  UINT                        MapVirtualKey(                      UINT uCode, WINAPI_MapVirtualKeyType uMapType);
  UINT                        MapVirtualKeyEx(                    UINT uCode, WINAPI_MapVirtualKeyType uMapType, HKL dwhkl);
  DWORD                       OemKeyScan(                         WORD wOemChar);
  BOOL                        RegisterHotKey(                     HWND hWnd, int id, UINT fsModifiers, UINT vk);
  UINT                        SendInput(                          UINT nInputs, LPINPUT pInputs, int cbSize);
  HWND                        SetActiveWindow(                    HWND hWnd);
  HWND                        SetFocus(                           HWND hWnd);
  BOOL                        SetKeyboardState(                   LPBYTE lpKeyState);
  int                         ToAscii(                            UINT uVirtKey, UINT uScanCode, PBYTE lpKeyState, LPWORD lpChar, UINT uFlags);
  int                         ToAsciiEx(                          UINT uVirtKey, UINT uScanCode, PBYTE lpKeyState, LPWORD lpChar, UINT uFlags, HKL dwhkl);
  int                         ToUnicode(                          UINT wVirtKey, UINT wScanCode, WINAPI_PBYTE lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags);
  int                         ToUnicodeEx(                        UINT wVirtKey, UINT wScanCode, WINAPI_PBYTE lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags, HKL dwhkl);
  BOOL                        UnloadKeyboardLayout(               HKL hkl);
  BOOL                        UnregisterHotKey(                   HWND hWnd, int id);
  SHORT                       VkKeyScan(                          TCHAR ch);
  SHORT                       VkKeyScanEx(                        TCHAR ch, HKL dwhkl);
  int                         DlgDirList(                         HWND hDlg, LPTSTR lpPathSpec, int nIDListBox, int nIDStaticPath, UINT uFileType);
  BOOL                        DlgDirSelectEx(                     HWND hDlg, LPTSTR lpString, int nCount, int nIDListBox);
  DWORD                       GetListBoxInfo(                     HWND hwnd);
  BOOL                        AppendMenu(                         HMENU hMenu, UINT uFlags, UINT_PTR uIDNewItem, LPCTSTR lpNewItem);
  DWORD                       CheckMenuItem(                      HMENU hmenu, UINT uIDCheckItem, WINAPI_CheckMenuItemFlag uCheck);
  BOOL                        CheckMenuRadioItem(                 HMENU hmenu, UINT idFirst, UINT idLast, UINT idCheck, WINAPI_MenuCommandPosFlag uFlags);
  HMENU                       CreateMenu(                         );
  HMENU                       CreatePopupMenu(                    );
  BOOL                        DeleteMenu(                         HMENU hMenu, UINT uPosition, WINAPI_MenuCommandPosFlag uFlags);
  BOOL                        DestroyMenu(                        HMENU hMenu);
  BOOL                        DrawMenuBar(                        HWND hWnd);
  WINAPI_EnableMenuItemResult EnableMenuItem(                     HMENU hMenu, UINT uIDEnableItem, WINAPI_EnableMenuItemFlag uEnable);
  BOOL                        EndMenu(                            );
  HMENU                       GetMenu(                            HWND hWnd);
  BOOL                        GetMenuBarInfo(                     HWND hwnd, WINAPI_ObjectIdEnum idObject, LONG idItem, PMENUBARINFO pmbi);
  LONG                        GetMenuCheckMarkDimensions(         );
  UINT                        GetMenuDefaultItem(                 HMENU hMenu, UINT fByPos, WINAPI_GetMenuDefaultItemFlags gmdiFlags);
  BOOL                        GetMenuInfo(                        HMENU hmenu, LPCMENUINFO lpcmi);
  int                         GetMenuItemCount(                   HMENU hMenu);
  UINT                        GetMenuItemID(                      HMENU hMenu, int nPos);
  BOOL                        GetMenuItemInfo(                    HMENU hMenu, UINT uItem, BOOL fByPosition, LPMENUITEMINFO lpmii);
  BOOL                        GetMenuItemRect(                    HWND hWnd, HMENU hMenu, UINT uItem, LPRECT lprcItem);
  UINT                        GetMenuState(                       HMENU hMenu, UINT uId, WINAPI_MenuCommandPosFlag uFlags);
  int                         GetMenuString(                      HMENU hMenu, UINT uIDItem, LPTSTR lpString, int nMaxCount, UINT uFlag);
  HMENU                       GetSubMenu(                         HMENU hMenu, int nPos);
  HMENU                       GetSystemMenu(                      HWND hWnd, BOOL bRevert);
  BOOL                        HiliteMenuItem(                     HWND hwnd, HMENU hmenu, UINT uItemHilite, UINT uHilite);
  BOOL                        InsertMenu(                         HMENU hMenu, UINT uPosition, WINAPI_InsertMenuFlags uFlags, UINT_PTR uIDNewItem, LPCTSTR lpNewItem);
  BOOL                        InsertMenuItem(                     HMENU hMenu, UINT uItem, BOOL fByPosition, LPCMENUITEMINFO lpmii);
  BOOL                        IsMenu(                             HMENU hMenu);
  HMENU                       LoadMenu(                           HINSTANCE hInstance, LPCTSTR lpMenuName);
  HMENU                       LoadMenuIndirect(                   WINAPI_MENUTEMPLATE* lpMenuTemplate);
  int                         MenuItemFromPoint(                  HWND hWnd, HMENU hMenu, POINT ptScreen);
  BOOL                        ModifyMenu(                         HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCTSTR lpNewItem);
  BOOL                        RemoveMenu(                         HMENU hMenu, UINT uPosition, WINAPI_MenuCommandPosFlag uFlags);
  BOOL                        SetMenu(                            HWND hWnd, HMENU hMenu);
  BOOL                        SetMenuDefaultItem(                 HMENU hMenu, UINT uItem, UINT fByPos);
  BOOL                        SetMenuInfo(                        HMENU hmenu, LPCMENUINFO lpcmi);
  BOOL                        SetMenuItemBitmaps(                 HMENU hMenu, UINT uPosition, UINT uFlags, HBITMAP hBitmapUnchecked, HBITMAP hBitmapChecked);
  BOOL                        SetMenuItemInfo(                    HMENU hMenu, UINT uItem, BOOL fByPosition, LPMENUITEMINFO lpmii);
  BOOL                        TrackPopupMenu(                     HMENU hMenu, WINAPI_TrackPopupMenuFlags uFlags, int x, int y, int nReserved, HWND hWnd, WINAPI_RECT* prcRect);
  BOOL                        TrackPopupMenuEx(                   HMENU hmenu, WINAPI_TrackPopupMenuFlags fuFlags, int x, int y, HWND hwnd, LPTPMPARAMS lptpm);
  BOOL                        DragDetect(                         HWND hwnd, POINT pt);
  HWND                        GetCapture(                         );
  UINT                        GetDoubleClickTime(                 );
  int                         GetMouseMovePointsEx(               UINT cbSize, LPMOUSEMOVEPOINT lppt, LPMOUSEMOVEPOINT lpptBuf, int nBufPoints, DWORD resolution);
  VOID                        mouse_event(                        DWORD dwFlags, DWORD dx, DWORD dy, DWORD dwData, ULONG_PTR dwExtraInfo);
  BOOL                        ReleaseCapture(                     );
  HWND                        SetCapture(                         HWND hWnd);
  BOOL                        SetDoubleClickTime(                 UINT uInterval);
  BOOL                        SwapMouseButton(                    BOOL fSwap);
  BOOL                        TrackMouseEvent(                    LPTRACKMOUSEEVENT lpEventTrack);
  BOOL                        EnumDisplayMonitors(                HDC hdc, LPCRECT lprcClip, MONITORENUMPROC lpfnEnum, LPARAM dwData);
  BOOL                        GetMonitorInfo(                     HMONITOR hMonitor, LPMONITORINFO lpmi);
  HMONITOR                    MonitorFromPoint(                   POINT pt, WINAPI_MonitorFlags dwFlags);
  HMONITOR                    MonitorFromRect(                    LPCRECT lprc, WINAPI_MonitorFlags dwFlags);
  HMONITOR                    MonitorFromWindow(                  HWND hwnd, WINAPI_MonitorFlags dwFlags);
  HWND                        CreateMDIWindow(                    LPCTSTR lpClassName, LPCTSTR lpWindowName, DWORD dwStyle, int X, int Y, int nWidth, int nHeight, HWND hWndParent, HINSTANCE hInstance, LPARAM lParam);
  LRESULT                     DefFrameProc(                       HWND hWnd, HWND hWndMDIClient, UINT uMsg, WPARAM wParam, LPARAM lParam);
  LRESULT                     DefMDIChildProc(                    HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
  BOOL                        TranslateMDISysAccel(               HWND hWndClient, LPMSG lpMsg);
  HDC                         BeginPaint(                         HWND hwnd, LPPAINTSTRUCT lpPaint);
  BOOL                        DrawAnimatedRects(                  HWND hwnd, int idAni, WINAPI_RECT* lprcFrom, WINAPI_RECT* lprcTo);
  BOOL                        DrawCaption(                        HWND hwnd, HDC hdc, LPCRECT lprc, UINT uFlags);
  BOOL                        DrawEdge(                           HDC hdc, LPRECT qrc, WINAPI_BorderEdge edge, WINAPI_BorderFlag grfFlags);
  BOOL                        DrawFocusRect(                      HDC hDC, WINAPI_RECT* lprc);
  BOOL                        DrawFrameControl(                   HDC hdc, LPRECT lprc, UINT uType, UINT uState);
  BOOL                        DrawState(                          HDC hdc, HBRUSH hbr, DRAWSTATEPROC lpOutputFunc, LPARAM lData, WPARAM wData, int x, int y, int cx, int cy, WINAPI_DrawStateFlags fuFlags);
  BOOL                        EndPaint(                           HWND hWnd, WINAPI_PAINTSTRUCT* lpPaint);
  WINAPI_WindowRegion         ExcludeUpdateRgn(                   HDC hDC, HWND hWnd);
  BOOL                        GetUpdateRect(                      HWND hWnd, LPRECT lpRect, BOOL bErase);
  WINAPI_WindowRegion         GetUpdateRgn(                       HWND hWnd, HRGN hRgn, BOOL bErase);
  HDC                         GetWindowDC(                        HWND hWnd);
  WINAPI_WindowRegion         GetWindowRgn(                       HWND hWnd, HRGN hRgn);
  WINAPI_WindowRegion         GetWindowRgnBox(                    HWND hWnd, LPRECT lprc);
  BOOL                        GrayString(                         HDC hDC, HBRUSH hBrush, GRAYSTRINGPROC lpOutputFunc, LPARAM lpData, int nCount, int X, int Y, int nWidth, int nHeight);
  BOOL                        InvalidateRect(                     HWND hWnd, WINAPI_RECT* lpRect, BOOL bErase);
  BOOL                        InvalidateRgn(                      HWND hWnd, HRGN hRgn, BOOL bErase);
  BOOL                        LockWindowUpdate(                   HWND hWndLock);
  BOOL                        PaintDesktop(                       HDC hdc);
  BOOL                        RedrawWindow(                       HWND hWnd, WINAPI_RECT* lprcUpdate, HRGN hrgnUpdate, WINAPI_RedrawWindowFlags flags);
  int                         SetWindowRgn(                       HWND hWnd, HRGN hRgn, BOOL bRedraw);
  BOOL                        UpdateWindow(                       HWND hWnd);
  BOOL                        ValidateRect(                       HWND hWnd, WINAPI_RECT* lpRect);
  BOOL                        ValidateRgn(                        HWND hWnd, HRGN hRgn);
  HWND                        WindowFromDC(                       HDC hDC);
  HPOWERNOTIFY                RegisterPowerSettingNotification(   HANDLE hRecipient, LPCGUID PowerSettingGuid, WINAPI_DeviceNotificationFlags Flags);
  BOOL                        UnregisterPowerSettingNotification( HPOWERNOTIFY Handle);
  BOOL                        PrintWindow(                        HWND hwnd, HDC hdcBlt, UINT nFlags);
  LRESULT                     DefRawInputProc(                    PRAWINPUT* paRawInput, INT nInput, UINT cbSizeHeader);
  UINT                        GetRawInputBuffer(                  PRAWINPUT pData, PUINT pcbSize, UINT cbSizeHeader);
  UINT                        GetRawInputData(                    HRAWINPUT hRawInput, UINT uiCommand, LPVOID pData, PUINT pcbSize, UINT cbSizeHeader);
  UINT                        GetRawInputDeviceInfo(              HANDLE hDevice, UINT uiCommand, LPVOID pData, PUINT pcbSize);
  UINT                        GetRawInputDeviceList(              PRAWINPUTDEVICELIST pRawInputDeviceList, PUINT puiNumDevices, UINT cbSize);
  UINT                        GetRegisteredRawInputDevices(       PRAWINPUTDEVICE pRawInputDevices, PUINT puiNumDevices, UINT cbSize);
  BOOL                        RegisterRawInputDevices(            PCRAWINPUTDEVICE pRawInputDevices, UINT uiNumDevices, UINT cbSize);
  BOOL                        CopyRect(                           LPRECT lprcDst, WINAPI_RECT* lprcSrc);
  BOOL                        EqualRect(                          WINAPI_RECT* lprc1, WINAPI_RECT* lprc2);
  BOOL                        InflateRect(                        LPRECT lprc, int dx, int dy);
  BOOL                        IntersectRect(                      LPRECT lprcDst, WINAPI_RECT* lprcSrc1, WINAPI_RECT* lprcSrc2);
  BOOL                        IsRectEmpty(                        WINAPI_RECT* lprc);
  BOOL                        OffsetRect(                         LPRECT lprc, int dx, int dy);
  BOOL                        PtInRect(                           WINAPI_RECT* lprc, POINT pt);
  BOOL                        SetRect(                            LPRECT lprc, int xLeft, int yTop, int xRight, int yBottom);
  BOOL                        SetRectEmpty(                       LPRECT lprc);
  BOOL                        SubtractRect(                       LPRECT lprcDst, WINAPI_RECT* lprcSrc1, WINAPI_RECT* lprcSrc2);
  BOOL                        UnionRect(                          LPRECT lprcDst, WINAPI_RECT* lprcSrc1, WINAPI_RECT* lprcSrc2);
  HANDLE                      CopyImage(                          HANDLE hImage, WINAPI_ImageType uType, int cxDesired, int cyDesired, WINAPI_LRFlags fuFlags);
  HANDLE                      LoadImage(                          HINSTANCE hinst, WINAPI_LoadImageString/LPCTSTR lpszName, WINAPI_ImageType uType, int cxDesired, int cyDesired, WINAPI_LRFlags fuLoad);
  BOOL                        EnableScrollBar(                    HWND hWnd, UINT wSBflags, UINT wArrows);
  BOOL                        GetScrollBarInfo(                   HWND hwnd, WINAPI_ObjectIdEnum idObject, PSCROLLBARINFO psbi);
  BOOL                        GetScrollInfo(                      HWND hwnd, WINAPI_SBType fnBar, LPSCROLLINFO lpsi);
  int                         GetScrollPos(                       HWND hWnd, WINAPI_SBType nBar);
  BOOL                        GetScrollRange(                     HWND hWnd, WINAPI_SBType nBar, LPINT lpMinPos, LPINT lpMaxPos);
  BOOL                        ScrollDC(                           HDC hDC, int dx, int dy, WINAPI_RECT* lprcScroll, WINAPI_RECT* lprcClip, HRGN hrgnUpdate, LPRECT lprcUpdate);
  BOOL                        ScrollWindow(                       HWND hWnd, int XAmount, int YAmount, WINAPI_RECT* lpRect, WINAPI_RECT* lpClipRect);
  int                         ScrollWindowEx(                     HWND hWnd, int dx, int dy, WINAPI_RECT* prcScroll, WINAPI_RECT* prcClip, HRGN hrgnUpdate, LPRECT prcUpdate, WINAPI_ScrollWindowFlags flags);
  int                         SetScrollInfo(                      HWND hwnd, WINAPI_SBType fnBar, LPCSCROLLINFO lpsi, BOOL fRedraw);
  int                         SetScrollPos(                       HWND hWnd, WINAPI_SBType nBar, int nPos, BOOL bRedraw);
  BOOL                        SetScrollRange(                     HWND hWnd, WINAPI_SBType nBar, int nMinPos, int nMaxPos, BOOL bRedraw);
  BOOL                        ShowScrollBar(                      HWND hWnd, WINAPI_SBType wBar, BOOL bShow);
  LPTSTR                      CharLower(                          LPTSTR lpsz);
  DWORD                       CharLowerBuff(                      LPTSTR lpsz, DWORD cchLength);
  LPTSTR                      CharNext(                           LPCTSTR lpsz);
  LPSTR                       CharNextExA(                        WINAPI_CodePageEnum CodePage, LPCSTR lpCurrentChar, DWORD dwFlags);
  LPTSTR                      CharPrev(                           LPCTSTR lpszStart, LPCTSTR lpszCurrent);
  LPSTR                       CharPrevExA(                        WINAPI_CodePageEnum CodePage, LPCSTR lpStart, LPCSTR lpCurrentChar, DWORD dwFlags);
  BOOL                        CharToOem(                          LPCTSTR lpszSrc, LPSTR lpszDst);
  BOOL                        CharToOemBuff(                      LPCTSTR lpszSrc, LPSTR lpszDst, DWORD cchDstLength);
  LPTSTR                      CharUpper(                          LPTSTR lpsz);
  DWORD                       CharUpperBuff(                      LPTSTR lpsz, DWORD cchLength);
  BOOL                        IsCharAlpha(                        TCHAR ch);
  BOOL                        IsCharAlphaNumeric(                 TCHAR ch);
  BOOL                        IsCharLower(                        TCHAR ch);
  BOOL                        IsCharUpper(                        TCHAR ch);
  int                         LoadString(                         HINSTANCE hInstance, UINT uID, LPTSTR lpBuffer, int nBufferMax);
  BOOL                        OemToChar(                          LPCSTR lpszSrc, LPTSTR lpszDst);
  BOOL                        OemToCharBuff(                      LPCTSTR lpszSrc, LPTSTR lpszDst, DWORD cchDstLength);
  int                         wsprintf(                           LPTSTR lpOut, LPCTSTR lpFmt);
  int                         wvsprintf(                          LPTSTR lpOutput, LPCTSTR lpFmt, va_list arglist);
  WINAPI_WAIT_RESULT          MsgWaitForMultipleObjects(          DWORD nCount, WINAPI_HANDLE* pHandles, BOOL bWaitAll, WINAPI_WaitTimeout dwMilliseconds, WINAPI_QueueStatusFlag dwWakeMask);
  WINAPI_WAIT_RESULT          MsgWaitForMultipleObjectsEx(        DWORD nCount, WINAPI_HANDLE* pHandles, WINAPI_WaitTimeout dwMilliseconds, WINAPI_QueueStatusFlag dwWakeMask, WINAPI_MsgWaitForMultipleObjectsFlags dwFlags);
  int                         GetKeyboardType(                    int nTypeFlag);
  DWORD                       GetSysColor(                        WINAPI_SysColorIndex nIndex);
  int                         GetSystemMetrics(                   WINAPI_SystemMetricIndex nIndex);
  BOOL                        SetSysColors(                       int cElements, WINAPI_INT* lpaElements, WINAPI_COLORREF* lpaRgbValues);
  BOOL                        SystemParametersInfo(               WINAPI_SystemParametersInfoEnum uiAction, UINT uiParam, PVOID pvParam, WINAPI_SystemParametersInfoFlags fWinIni);
  BOOL                        KillTimer(                          HWND hWnd, UINT_PTR uIDEvent);
  UINT_PTR                    SetTimer(                           HWND hWnd, UINT_PTR nIDEvent, UINT uElapse, TIMERPROC lpTimerFunc);
  BOOL                        GetClassInfo(                       HINSTANCE hInstance, LPCTSTR lpClassName, LPWNDCLASS lpWndClass);
  BOOL                        GetClassInfoEx(                     HINSTANCE hinst, LPCTSTR lpszClass, LPWNDCLASSEX lpwcx);
  DWORD                       GetClassLong(                       HWND hWnd, WINAPI_ClassLongIndex nIndex);
  int                         GetClassName(                       HWND hWnd, LPTSTR lpClassName, int nMaxCount);
  WORD                        GetClassWord(                       HWND hWnd, WINAPI_ClassLongIndex nIndex);
  LONG                        GetWindowLong(                      HWND hWnd, WINAPI_WindowLongIndex nIndex);
  ATOM                        RegisterClass(                      WINAPI_WNDCLASS* lpWndClass);
  ATOM                        RegisterClassEx(                    WINAPI_WNDCLASSEX* lpwcx);
  DWORD                       SetClassLong(                       HWND hWnd, WINAPI_ClassLongIndex nIndex, LONG dwNewLong);
  WORD                        SetClassWord(                       HWND hWnd, WINAPI_ClassLongIndex nIndex, WORD wNewWord);
  LONG                        SetWindowLong(                      HWND hWnd, WINAPI_WindowLongIndex nIndex, LONG dwNewLong);
  BOOL                        UnregisterClass(                    LPCTSTR lpClassName, HINSTANCE hInstance);
  LRESULT                     CallWindowProc(                     WNDPROC lpPrevWndFunc, HWND hWnd, WINAPI_WinMsg Msg, WPARAM wParam, LPARAM lParam);
  LRESULT                     DefWindowProc(                      HWND hWnd, WINAPI_WinMsg Msg, WPARAM wParam, LPARAM lParam);
  int                         EnumProps(                          HWND hWnd, PROPENUMPROC lpEnumFunc);
  int                         EnumPropsEx(                        HWND hWnd, PROPENUMPROCEX lpEnumFunc, LPARAM lParam);
  HANDLE                      GetProp(                            HWND hWnd, LPCTSTR lpString);
  HANDLE                      RemoveProp(                         HWND hWnd, LPCTSTR lpString);
  BOOL                        SetProp(                            HWND hWnd, LPCTSTR lpString, HANDLE hData);
  BOOL                        CloseWindowStation(                 HWINSTA hWinSta);
  HWINSTA                     CreateWindowStation(                LPCTSTR lpwinsta, WINAPI_CreateWindowStationFlags dwFlags, WINAPI_WindowStationAccessRights dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
  BOOL                        EnumWindowStations(                 WINSTAENUMPROC lpEnumFunc, LPARAM lParam);
  HWINSTA                     GetProcessWindowStation(            );
  BOOL                        GetUserObjectInformation(           HANDLE hObj, WINAPI_UserObjectInformationEnum nIndex, PVOID pvInfo, DWORD nLength, LPDWORD lpnLengthNeeded);
  HWINSTA                     OpenWindowStation(                  LPTSTR lpszWinSta, BOOL fInherit, WINAPI_WindowStationAccessRights dwDesiredAccess);
  BOOL                        SetProcessWindowStation(            HWINSTA hWinSta);
  BOOL                        CloseDesktop(                       HDESK hDesktop);
  HDESK                       CreateDesktop(                      LPCTSTR lpszDesktop, LPCTSTR lpszDevice, LPDEVMODE pDevmode, WINAPI_DesktopFlags dwFlags, WINAPI_DESKTOP_ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa);
  HDESK                       CreateDesktopEx(                    LPCTSTR lpszDesktop, LPCTSTR lpszDevice, LPDEVMODE pDevmode, WINAPI_DesktopFlags dwFlags, WINAPI_DESKTOP_ACCESS_MASK dwDesiredAccess, LPSECURITY_ATTRIBUTES lpsa, ULONG ulHeapSize, PVOID pvoid);
  BOOL                        EnumDesktops(                       HWINSTA hwinsta, DESKTOPENUMPROC lpEnumFunc, LPARAM lParam);
  BOOL                        EnumDesktopWindows(                 HDESK hDesktop, WNDENUMPROC lpfn, LPARAM lParam);
  HDESK                       GetThreadDesktop(                   DWORD dwThreadId);
  HDESK                       OpenDesktop(                        LPTSTR lpszDesktop, WINAPI_DesktopFlags dwFlags, BOOL fInherit, WINAPI_DESKTOP_ACCESS_MASK dwDesiredAccess);
  HDESK                       OpenInputDesktop(                   WINAPI_DesktopFlags dwFlags, BOOL fInherit, WINAPI_DESKTOP_ACCESS_MASK dwDesiredAccess);
  BOOL                        SetThreadDesktop(                   HDESK hDesktop);
  BOOL                        SetUserObjectInformation(           HANDLE hObj, WINAPI_UserObjectInformationEnum nIndex, PVOID pvInfo, DWORD nLength);
  BOOL                        SwitchDesktop(                      HDESK hDesktop);
  DWORD                       GetMenuContextHelpId(               HMENU hmenu);
  DWORD                       GetWindowContextHelpId(             HWND hwnd);
  BOOL                        SetMenuContextHelpId(               HMENU hmenu, DWORD dwContextHelpId);
  BOOL                        SetWindowContextHelpId(             HWND hwnd, DWORD dwContextHelpId);
  BOOL                        WinHelp(                            HWND hWndMain, LPCTSTR lpszHelp, UINT uCommand, ULONG_PTR dwData);
  BOOL                        GetUserObjectSecurity(              HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSD, DWORD nLength, LPDWORD lpnLengthNeeded);
  BOOL                        SetUserObjectSecurity(              HANDLE hObj, PSECURITY_INFORMATION pSIRequested, PSECURITY_DESCRIPTOR pSID);
  HWINEVENTHOOK               SetWinEventHook(                    UINT eventMin, UINT eventMax, HMODULE hmodWinEventProc, WINEVENTPROC lpfnWinEventProc, DWORD idProcess, DWORD idThread, WINAPI_WinEventFlags dwflags);
  BOOL                        UnhookWinEvent(                     HWINEVENTHOOK hWinEventHook);
  BOOL                        IsWinEventHookInstalled(            DWORD event);
  void                        NotifyWinEvent(                     DWORD event, HWND hwnd, WINAPI_ObjectIdEnum idObject, LONG idChild);
  BOOL                        CloseTouchInputHandle(              HTOUCHINPUT hTouchInput);
  BOOL                        GetTouchInputInfo(                  HTOUCHINPUT hTouchInput, UINT cInputs, PTOUCHINPUT pInputs, int cbSize);
  BOOL                        IsTouchWindow(                      HWND hWnd, PULONG pulFlags);
  BOOL                        RegisterTouchWindow(                HWND hWnd, ULONG ulFlags);
  BOOL                        UnregisterTouchWindow(              HWND hWnd);
  BOOL                        CloseGestureInfoHandle(             HGESTUREINFO hGestureInfo);
  BOOL                        GetGestureExtraArgs(                HGESTUREINFO hGestureInfo, UINT cbExtraArgs, PBYTE pExtraArgs);
  BOOL                        GetGestureInfo(                     HGESTUREINFO hGestureInfo, PGESTUREINFO pGestureInfo);
  BOOL                        GetGestureConfig(                   HWND hwnd, DWORD dwReserved, DWORD dwFlags, PUINT pcIDs, PGESTURECONFIG pGestureConfig, UINT cbSize);
  BOOL                        SetGestureConfig(                   HWND hwnd, DWORD dwReserved, UINT cIDs, PGESTURECONFIG pGestureConfig, UINT cbSize);
  BOOL                        DesktopHasWatermarkText(            );
  HWND                        FrostCrashedWindow(                 HWND hwndToReplace, HWND hwndErrorReportOwnerWnd);
  HWND                        GetSendMessageReceiver(             DWORD threadId);
  BOOL                        GetWindowCompositionAttribute(      HWND hwnd, WINCOMPATTRDATA* pAttrData);
  HWND                        GhostWindowFromHungWindow(          HWND hwndGhost);
  HWND                        HungWindowFromGhostWindow(          HWND hwndGhost);
  BOOL                        IsSETEnabled(                       );
  BOOL                        IsServerSideWindow(                 HWND hwnd);
  BOOL                        IsThreadDesktopComposited(          );
  BOOL                        IsWindowInDestroy(                  HWND hwnd);
  LPCWSTR                     MB_GetString(                       int strId);
  BOOL                        NtUserSetChildWindowNoActivate(     HWND hwndChild);
  BOOL                        QuerySendMessage(                   MSG* pMsg);
  BOOL                        SetWindowCompositionAttribute(      HWND hwnd, WINCOMPATTRDATA* pAttrData);
]]
return ffi.load( 'User32.dll' )
