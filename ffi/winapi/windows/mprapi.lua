require( 'ffi/winapi/headers/windows' )
local ffi = require( 'ffi' )
ffi.cdef [[
  typedef HANDLE RAS_SERVER_HANDLE; //Alias
  typedef HANDLE MPR_SERVER_HANDLE; //Alias
  typedef HANDLE MIB_SERVER_HANDLE; //Alias
  enum { MAX_INTERFACE_NAME_LEN = 257 };
  typedef struct MPR_IPINIP_INTERFACE_0 {
    WCHAR wszFriendlyName[MAX_INTERFACE_NAME_LEN + 1];
    GUID Guid;
  } MPR_IPINIP_INTERFACE_0;
  typedef MPR_IPINIP_INTERFACE_0 *PMPR_IPINIP_INTERFACE_0; //Pointer
  DWORD MprAdminPortEnum(                          RAS_SERVER_HANDLE hRasServer, DWORD dwLevel, HANDLE hConnection, LPBYTE* lplpbBuffer, DWORD dwPrefMaxLen, LPDWORD lpdwEntriesRead, LPDWORD lpdwTotalEntries, LPDWORD lpdwResumeHandle);
  DWORD MprAdminConnectionGetInfo(                 RAS_SERVER_HANDLE hRasServer, DWORD dwLevel, HANDLE hConnection, LPBYTE* lplpbBuffer);
  DWORD MprAdminPortGetInfo(                       RAS_SERVER_HANDLE hRasServer, DWORD dwLevel, HANDLE hPort, LPBYTE* lplpbBuffer);
  DWORD MprAdminConnectionClearStats(              RAS_SERVER_HANDLE hRasServer, HANDLE hConnection);
  DWORD MprAdminPortClearStats(                    RAS_SERVER_HANDLE hRasServer, HANDLE hPort);
  DWORD MprAdminPortReset(                         RAS_SERVER_HANDLE hRasServer, HANDLE hPort);
  DWORD MprAdminPortDisconnect(                    RAS_SERVER_HANDLE hRasServer, HANDLE hPort);
  DWORD MprAdminConnectionRemoveQuarantine(        HANDLE hRasServer, HANDLE hRasConnection, BOOL fIsIpAddress);
  DWORD MprAdminUserGetInfo(                       WINAPI_WCHAR* lpszServer, WINAPI_WCHAR* lpszUser, DWORD dwLevel, LPBYTE lpbBuffer);
  DWORD MprAdminUserSetInfo(                       WINAPI_WCHAR* lpszServer, WINAPI_WCHAR* lpszUser, DWORD dwLevel, WINAPI_LPBYTE lpbBuffer);
  DWORD MprAdminSendUserMessage(                   MPR_SERVER_HANDLE hMprServer, HANDLE hConnection, LPWSTR lpwszMessage);
  DWORD MprAdminGetPDCServer(                      WINAPI_WCHAR* lpszDomain, WINAPI_WCHAR* lpszServer, LPWSTR lpszPDCServer);
  BOOL  MprAdminIsServiceRunning(                  LPWSTR lpwsServerName);
  DWORD MprAdminServerConnect(                     LPWSTR lpwsServerName, MPR_SERVER_HANDLE* phMprServer);
  VOID  MprAdminServerDisconnect(                  MPR_SERVER_HANDLE hMprServer);
  DWORD MprAdminServerGetCredentials(              MPR_SERVER_HANDLE hMprServer, DWORD dwLevel, LPBYTE* lplpbBuffer);
  DWORD MprAdminServerSetCredentials(              MPR_SERVER_HANDLE hMprServer, DWORD dwLevel, LPBYTE lpbBuffer);
  DWORD MprAdminBufferFree(                        LPVOID pBuffer);
  DWORD MprAdminGetErrorString(                    DWORD dwError, LPWSTR* lpwsErrorString);
  DWORD MprAdminServerGetInfo(                     MPR_SERVER_HANDLE hMprServer, DWORD dwLevel, LPBYTE* lplpbBuffer);
  DWORD MprAdminServerSetInfo(                     MPR_SERVER_HANDLE hMprServer, DWORD dwLevel, LPBYTE lpbBuffer);
  DWORD MprAdminEstablishDomainRasServer(          PWCHAR pszDomain, PWCHAR pszMachine, BOOL bEnable);
  DWORD MprAdminIsDomainRasServer(                 PWCHAR pszDomain, PWCHAR pszMachine, PBOOL pbIsRasServer);
  DWORD MprAdminTransportCreate(                   MPR_SERVER_HANDLE hMprServer, DWORD dwTransportId, LPWSTR lpwsTransportName, LPBYTE pGlobalInfo, DWORD dwGlobalInfoSize, LPBYTE pClientInterfaceInfo, DWORD dwClientInterfaceInfoSize, LPWSTR lpwsDLLPath);
  DWORD MprAdminTransportSetInfo(                  MPR_SERVER_HANDLE hMprServer, DWORD dwTransportId, LPBYTE pGlobalInfo, DWORD dwGlobalInfoSize, LPBYTE pClientInterfaceInfo, DWORD dwClientInterfaceInfoSize);
  DWORD MprAdminTransportGetInfo(                  MPR_SERVER_HANDLE hMprServer, DWORD dwTransportId, LPBYTE* ppGlobalInfo, LPDWORD lpdwGlobalInfoSize, LPBYTE* ppClientInterfaceInfo, LPDWORD lpdwClientInterfaceInfoSize);
  DWORD MprAdminDeviceEnum(                        MPR_SERVER_HANDLE hMprServer, DWORD dwLevel, LPBYTE* lplpbBuffer, LPDWORD lpdwTotalEntries);
  DWORD MprAdminInterfaceGetHandle(                MPR_SERVER_HANDLE hMprServer, LPWSTR lpwsInterfaceName, HANDLE* phInterface, BOOL fIncludeClientInterfaces);
  DWORD MprAdminInterfaceCreate(                   MPR_SERVER_HANDLE hMprServer, DWORD dwLevel, LPBYTE lpbBuffer, HANDLE* phInterface);
  DWORD MprAdminInterfaceGetInfo(                  MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwLevel, LPBYTE* lplpbBuffer);
  DWORD MprAdminInterfaceSetInfo(                  MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwLevel, LPBYTE lpbBuffer);
  DWORD MprAdminInterfaceDelete(                   MPR_SERVER_HANDLE hMprServer, HANDLE hInterface);
  DWORD MprAdminInterfaceDeviceGetInfo(            MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwIndex, DWORD dwLevel, LPBYTE* lplpBuffer);
  DWORD MprAdminInterfaceDeviceSetInfo(            MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwIndex, DWORD dwLevel, LPBYTE lplpBuffer);
  DWORD MprAdminInterfaceTransportRemove(          MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwTransportId);
  DWORD MprAdminInterfaceTransportAdd(             MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwTransportId, LPBYTE pInterfaceInfo, DWORD dwInterfaceInfoSize);
  DWORD MprAdminInterfaceTransportGetInfo(         MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwTransportId, LPBYTE* ppInterfaceInfo, LPDWORD lpdwpInterfaceInfoSize);
  DWORD MprAdminInterfaceTransportSetInfo(         MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwTransportId, LPBYTE pInterfaceInfo, DWORD dwInterfaceInfoSize);
  DWORD MprAdminInterfaceEnum(                     MPR_SERVER_HANDLE hMprServer, DWORD dwLevel, LPBYTE* lplpbBuffer, DWORD dwPrefMaxLen, LPDWORD lpdwEntriesRead, LPDWORD lpdwTotalEntries, LPDWORD lpdwResumeHandle);
  DWORD MprSetupIpInIpInterfaceFriendlyNameEnum(   PWCHAR pwszMachineName, LPBYTE* lplpBuffer, LPDWORD lpdwEntriesRead);
  DWORD MprSetupIpInIpInterfaceFriendlyNameFree(   LPVOID lpBuffer);
  DWORD MprSetupIpInIpInterfaceFriendlyNameCreate( PWCHAR pwszMachineName, PMPR_IPINIP_INTERFACE_0 pNameInformation);
  DWORD MprSetupIpInIpInterfaceFriendlyNameDelete( PWCHAR pwszMachineName, GUID* pGuid);
  DWORD MprAdminInterfaceSetCredentials(           LPWSTR lpwsServer, LPWSTR lpwsInterfaceName, LPWSTR lpwsUserName, LPWSTR lpwsDomainName, LPWSTR lpwsPassword);
  DWORD MprAdminInterfaceGetCredentials(           LPWSTR lpwsServer, LPWSTR lpwsInterfaceName, LPWSTR lpwsUserName, LPWSTR lpwsPassword, LPWSTR lpwsDomainName);
  DWORD MprAdminInterfaceSetCredentialsEx(         MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwLevel, LPBYTE lpbBuffer);
  DWORD MprAdminInterfaceGetCredentialsEx(         MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwLevel, LPBYTE* lplpbBuffer);
  DWORD MprAdminInterfaceConnect(                  MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, HANDLE hEvent, BOOL fSynchronous);
  DWORD MprAdminInterfaceDisconnect(               MPR_SERVER_HANDLE hMprServer, HANDLE hInterface);
  DWORD MprAdminInterfaceUpdateRoutes(             MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwProtocolId, HANDLE hEvent);
  DWORD MprAdminInterfaceQueryUpdateResult(        MPR_SERVER_HANDLE hMprServer, HANDLE hInterface, DWORD dwProtocolId, LPDWORD lpdwUpdateResult);
  DWORD MprAdminInterfaceUpdatePhonebookInfo(      MPR_SERVER_HANDLE hMprServer, HANDLE hInterface);
  DWORD MprAdminRegisterConnectionNotification(    MPR_SERVER_HANDLE hMprServer, HANDLE hEventNotification);
  DWORD MprAdminDeregisterConnectionNotification(  MPR_SERVER_HANDLE hMprServer, HANDLE hEventNotification);
  DWORD MprAdminMIBServerConnect(                  LPWSTR lpwsServerName, MIB_SERVER_HANDLE* phMibServer);
  VOID  MprAdminMIBServerDisconnect(               MIB_SERVER_HANDLE hMibServer);
  DWORD MprAdminMIBEntryCreate(                    MIB_SERVER_HANDLE hMibServer, DWORD dwPid, DWORD dwRoutingPid, LPVOID lpEntry, DWORD dwEntrySize);
  DWORD MprAdminMIBEntryDelete(                    MIB_SERVER_HANDLE hMibServer, DWORD dwProtocolId, DWORD dwRoutingPid, LPVOID lpEntry, DWORD dwEntrySize);
  DWORD MprAdminMIBEntrySet(                       MIB_SERVER_HANDLE hMibServer, DWORD dwProtocolId, DWORD dwRoutingPid, LPVOID lpEntry, DWORD dwEntrySize);
  DWORD MprAdminMIBEntryGet(                       MIB_SERVER_HANDLE hMibServer, DWORD dwProtocolId, DWORD dwRoutingPid, LPVOID lpInEntry, DWORD dwInEntrySize, LPVOID* lplpOutEntry, LPDWORD lpOutEntrySize);
  DWORD MprAdminMIBEntryGetFirst(                  MIB_SERVER_HANDLE hMibServer, DWORD dwProtocolId, DWORD dwRoutingPid, LPVOID lpInEntry, DWORD dwInEntrySize, LPVOID* lplpOutEntry, LPDWORD lpOutEntrySize);
  DWORD MprAdminMIBEntryGetNext(                   MIB_SERVER_HANDLE hMibServer, DWORD dwProtocolId, DWORD dwRoutingPid, LPVOID lpInEntry, DWORD dwInEntrySize, LPVOID* lplpOutEntry, LPDWORD lpOutEntrySize);
  DWORD MprAdminMIBGetTrapInfo(                    MIB_SERVER_HANDLE hMibServer, DWORD dwProtocolId, DWORD dwRoutingPid, LPVOID lpInData, DWORD dwInDataSize, LPVOID* lplpOutData, LPDWORD lpOutDataSize);
  DWORD MprAdminMIBSetTrapInfo(                    DWORD dwProtocolId, DWORD dwRoutingPid, HANDLE hEvent, LPVOID lpInData, DWORD dwInDataSize, LPVOID* lplpOutData, LPDWORD lpOutDataSize);
  DWORD MprAdminMIBBufferFree(                     LPVOID pBuffer);
  DWORD MprConfigServerInstall(                    DWORD dwLevel, PVOID pBuffer);
  DWORD MprConfigServerConnect(                    LPWSTR lpwsServerName, HANDLE* phMprConfig);
  VOID  MprConfigServerDisconnect(                 HANDLE hMprConfig);
  DWORD MprConfigServerRefresh(                    HANDLE hMprConfig);
  DWORD MprConfigBufferFree(                       LPVOID pBuffer);
  DWORD MprConfigServerGetInfo(                    HANDLE hMprConfig, DWORD dwLevel, LPBYTE* lplpbBuffer);
  DWORD MprConfigServerSetInfo(                    MPR_SERVER_HANDLE hMprServer, DWORD dwLevel, LPBYTE lpbBuffer);
  DWORD MprConfigServerBackup(                     HANDLE hMprConfig, LPWSTR lpwsPath);
  DWORD MprConfigServerRestore(                    HANDLE hMprConfig, LPWSTR lpwsPath);
  DWORD MprConfigTransportCreate(                  HANDLE hMprConfig, DWORD dwTransportId, LPWSTR lpwsTransportName, LPBYTE pGlobalInfo, DWORD dwGlobalInfoSize, LPBYTE pClientInterfaceInfo, DWORD dwClientInterfaceInfoSize, LPWSTR lpwsDLLPath, HANDLE* phRouterTransport);
  DWORD MprConfigTransportDelete(                  HANDLE hMprConfig, HANDLE hRouterTransport);
  DWORD MprConfigTransportGetHandle(               HANDLE hMprConfig, DWORD dwTransportId, HANDLE* phRouterTransport);
  DWORD MprConfigTransportSetInfo(                 HANDLE hMprConfig, HANDLE hRouterTransport, LPBYTE pGlobalInfo, DWORD dwGlobalInfoSize, LPBYTE pClientInterfaceInfo, DWORD dwClientInterfaceInfoSize, LPWSTR lpwsDLLPath);
  DWORD MprConfigTransportGetInfo(                 HANDLE hMprConfig, HANDLE hRouterTransport, LPBYTE* ppGlobalInfo, LPDWORD lpdwGlobalInfoSize, LPBYTE* ppClientInterfaceInfo, LPDWORD lpdwClientInterfaceInfoSize, LPWSTR* lplpwsDLLPath);
  DWORD MprConfigTransportEnum(                    HANDLE hMprConfig, DWORD dwLevel, LPBYTE* lplpBuffer, DWORD dwPrefMaxLen, LPDWORD lpdwEntriesRead, LPDWORD lpdwTotalEntries, LPDWORD lpdwResumeHandle);
  DWORD MprConfigInterfaceCreate(                  HANDLE hMprConfig, DWORD dwLevel, LPBYTE lpbBuffer, HANDLE* phRouterInterface);
  DWORD MprConfigInterfaceDelete(                  HANDLE hMprConfig, HANDLE hRouterInterface);
  DWORD MprConfigInterfaceGetHandle(               HANDLE hMprConfig, LPWSTR lpwsInterfaceName, HANDLE* phRouterInterface);
  DWORD MprConfigInterfaceGetInfo(                 HANDLE hMprConfig, HANDLE hRouterInterface, DWORD dwLevel, LPBYTE* lplpBuffer, LPDWORD lpdwBufferSize);
  DWORD MprConfigInterfaceSetInfo(                 HANDLE hMprConfig, HANDLE hRouterInterface, DWORD dwLevel, LPBYTE lpbBuffer);
  DWORD MprConfigInterfaceEnum(                    HANDLE hMprConfig, DWORD dwLevel, LPBYTE* lplpBuffer, DWORD dwPrefMaxLen, LPDWORD lpdwEntriesRead, LPDWORD lpdwTotalEntries, LPDWORD lpdwResumeHandle);
  DWORD MprConfigInterfaceTransportAdd(            HANDLE hMprConfig, HANDLE hRouterInterface, DWORD dwTransportId, LPWSTR lpwsTransportName, LPBYTE pInterfaceInfo, DWORD dwInterfaceInfoSize, HANDLE* phRouterIfTransport);
  DWORD MprConfigInterfaceTransportRemove(         HANDLE hMprConfig, HANDLE hRouterInterface, HANDLE hRouterIfTransport);
  DWORD MprConfigInterfaceTransportGetHandle(      HANDLE hMprConfig, HANDLE hRouterInterface, DWORD dwTransportId, HANDLE* phRouterIfTransport);
  DWORD MprConfigInterfaceTransportGetInfo(        HANDLE hMprConfig, HANDLE hRouterInterface, HANDLE hRouterIfTransport, LPBYTE* ppInterfaceInfo, LPDWORD lpdwInterfaceInfoSize);
  DWORD MprConfigInterfaceTransportSetInfo(        HANDLE hMprConfig, HANDLE hRouterInterface, HANDLE hRouterIfTransport, LPBYTE pInterfaceInfo, DWORD dwInterfaceInfoSize);
  DWORD MprConfigInterfaceTransportEnum(           HANDLE hMprConfig, HANDLE hRouterInterface, DWORD dwLevel, LPBYTE* lplpBuffer, DWORD dwPrefMaxLen, LPDWORD lpdwEntriesRead, LPDWORD lpdwTotalEntries, LPDWORD lpdwResumeHandle);
  DWORD MprConfigGetFriendlyName(                  HANDLE hMprConfig, PWCHAR pszGuidName, PWCHAR pszBuffer, DWORD dwBufferSize);
  DWORD MprConfigGetGuidName(                      HANDLE hMprConfig, PWCHAR pszFriendlyName, PWCHAR pszBuffer, DWORD dwBufferSize);
  DWORD MprConfigFilterGetInfo(                    HANDLE hMprConfig, DWORD dwLevel, LPBYTE lpBuffer);
  DWORD MprConfigFilterSetInfo(                    HANDLE hMprConfig, DWORD dwLevel, LPBYTE lpBuffer);
  DWORD MprInfoCreate(                             DWORD dwVersion, LPVOID* lplpNewHeader);
  DWORD MprInfoDelete(                             LPVOID lpHeader);
  DWORD MprInfoRemoveAll(                          LPVOID lpHeader, LPVOID* lplpNewHeader);
  DWORD MprInfoDuplicate(                          LPVOID lpHeader, LPVOID* lplpNewHeader);
  DWORD MprInfoBlockAdd(                           LPVOID lpHeader, DWORD dwInfoType, DWORD dwItemSize, DWORD dwItemCount, LPBYTE lpItemData, LPVOID* lplpNewHeader);
  DWORD MprInfoBlockRemove(                        LPVOID lpHeader, DWORD dwInfoType, LPVOID* lplpNewHeader);
  DWORD MprInfoBlockSet(                           LPVOID lpHeader, DWORD dwInfoType, DWORD dwItemSize, DWORD dwItemCount, LPBYTE lpItemData, LPVOID* lplpNewHeader);
  DWORD MprInfoBlockFind(                          LPVOID lpHeader, DWORD dwInfoType, LPDWORD lpdwItemSize, LPDWORD lpdwItemCount, LPBYTE* lplpItemData);
  DWORD MprInfoBlockQuerySize(                     LPVOID lpHeader);
]]
return ffi.load( 'Mprapi.dll' )
